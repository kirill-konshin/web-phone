{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","ringcentral-web-phone.js","webpack:/webpack/bootstrap 38749ea47466bbecd147","webpack:///src/index.js","webpack:///~/sip.js/src/SIP.js","webpack:///~/sip.js/package.json","webpack:///~/sip.js/src/Utils.js","webpack:///~/sip.js/src/Logger.js","webpack:///~/sip.js/src/LoggerFactory.js","webpack:///~/sip.js/src/EventEmitter.js","webpack:///~/sip.js/src/Constants.js","webpack:///~/sip.js/src/Exceptions.js","webpack:///~/sip.js/src/Timers.js","webpack:///~/sip.js/src/Transport.js","webpack:///~/sip.js/src/Parser.js","webpack:///~/sip.js/src/SIPMessage.js","webpack:///~/sip.js/src/URI.js","webpack:///~/sip.js/src/NameAddrHeader.js","webpack:///~/sip.js/src/Transactions.js","webpack:///~/sip.js/src/Dialog/RequestSender.js","webpack:///~/sip.js/src/Dialogs.js","webpack:///~/sip.js/src/RequestSender.js","webpack:///~/sip.js/src/RegisterContext.js","webpack:///~/sip.js/src/MediaHandler.js","webpack:///~/sip.js/src/ClientContext.js","webpack:///~/sip.js/src/ServerContext.js","webpack:///~/sip.js/src/Session/DTMF.js","webpack:///~/sip.js/src/Session.js","webpack:///~/sip.js/src/Subscription.js","webpack:///~/sip.js/src/WebRTC/MediaHandler.js","webpack:///~/sip.js/src/WebRTC/MediaStreamManager.js","webpack:///~/sip.js/src/WebRTC.js","webpack:///~/sip.js/src/UA.js","webpack:///~/sip.js/src/Hacks.js","webpack:///~/sip.js/src/SanityCheck.js","webpack:///~/sip.js/src/DigestAuthentication.js","webpack:///~/sip.js/src/Grammar/dist/Grammar.js","webpack:///src/emitter.js","webpack:///src/userAgent.js","webpack:///src/phoneLine.js","webpack:///src/utils.js","webpack:///src/eventNames.js","webpack:///src/dom.js","webpack:///src/audioHelper.js","webpack:///src/audio.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","WebPhone","options","service","__registerDeferred","undefined","__unregisterDeferred","__callDeferred","__sipRegistered","__sipOutboundEnabled","uuid","localStorage","activeLine","onMute","onHold","onRecord","contact","ua","UserAgent","on","bind","username","isRegistered","isRegistering","isUnregistering","events","EVENT_NAMES","causes","SIP","C","reasons","REASON_PHRASE","sipIncomingCall","line","eventEmitter","emit","incomingCall","outgoingCall","isOnHold","setHold","resolve","callEnded","callFailed","response","cause","test","status_code","session","onTransportError","setTimeout","reregister","sipRegistered","e","isUnregistered","sipRegistrationFailed","sipConnectionFailed","reject","sipUnRegistered","window","addEventListener","hangup","unregister","_audioHelper","audioHelper","createAudioHelper","_appKey","appKey","_appName","appName","_appVersion","appVersion","_userAgent","version","EventEmitter","PhoneLine","AudioHelper","defer","extend","mediaStreamManagerProto","Object","create","WebRTC","MediaStreamManager","prototype","release","value","stream","streamId","acquisitions","stop","getTracks","forEach","track","console","log","register","info","checkFlags","sipFlags","outboundCallsEnabled","Error","sipInfo","headers","endpointId","push","extraHeaders","warn","promise","wsServers","outboundProxy","transport","toLowerCase","domain","sipDomain","userName","Array","isArray","uri","password","authorizationUser","authorizationId","traceSip","stunServers","turnServers","level","autostart","iceGatheringTimeout","setSIPConfig","start","Promise","reconnect","forceDisconnect","toNumber","fromNumber","country","Boolean","answer","incomingLines","getIncomingLinesArray","activeLines","getActiveLinesArray","self","length","arr","promises","all","then","onCall","filter","getLine","sendDTMF","hold","unhold","isIncoming","mute","setMute","unmute","transfer","target","global","pkg","defineProperties","get","name","title","Logger","LoggerFactory","Exceptions","Timers","DialogRequestSender","MediaHandler","SessionDTMF","WebRTCMediaHandler","WebRTCMediaStreamManager","Utils","Hacks","DigestAuthentication","Grammar","description","main","homepage","author","email","contributors","url","repository","type","keywords","devDependencies","grunt","grunt-cli","grunt-contrib-jasmine","grunt-contrib-jshint","grunt-contrib-uglify","grunt-peg","grunt-trimtrailingspaces","node-minify","pegjs","sdp-transform","grunt-contrib-copy","browserify","grunt-browserify","engines","node","license","scripts","gitHead","bugs","_id","_shasum","_from","_npmVersion","_npmUser","maintainers","dist","shasum","tarball","directories","_resolved","augment","object","constructor","args","override","idx","proto","apply","optionsOverride","winner","loser","isDeprecated","logger","defaultValue","desugarSessionOptions","HTMLMediaElement","media","constraints","audio","video","tagName","render","remote","str_utf8_length","string","encodeURIComponent","replace","getPrefixedProperty","capitalizedName","charAt","toUpperCase","slice","prefixedNames","i","property","generateFakeSDP","body","indexOf","end","isFunction","fn","toString","isDecimal","num","isNaN","parseFloat","parseInt","createRandomToken","size","base","r","token","Math","random","newTag","UA","TAG_LENGTH","newUUID","UUID","v","hostType","host","parse","host_type","normalizeTarget","target_array","target_user","target_domain","URI","split","join","escapeUser","user","decodeURIComponent","headerize","part","exceptions","Call-Id","Cseq","Rack","Rseq","Www-Authenticate","hname","parts","substring","sipErrorCause","SIP_ERROR_CAUSES","SIP_FAILURE_CODE","getRandomTestNetIP","getOctet","from","to","floor","getAllowedMethods","event","allowed","ALLOWED_METHODS","EVENT_METHODS","checkListener","calculateMD5","RotateLeft","lValue","iShiftBits","AddUnsigned","lX","lY","lX4","lY4","lX8","lY8","lResult","F","x","y","z","G","H","I","FF","a","b","d","s","ac","GG","HH","II","ConvertToWordArray","lWordCount","lMessageLength","lNumberOfWords_temp1","lNumberOfWords_temp2","lNumberOfWords","lWordArray","lBytePosition","lByteCount","charCodeAt","WordToHex","lByte","lCount","WordToHexValue","WordToHexValue_temp","substr","Utf8Encode","utftext","n","String","fromCharCode","k","AA","BB","CC","DD","S11","S12","S13","S14","S21","S22","S23","S24","S31","S32","S33","S34","S41","S42","S43","S44","temp","category","label","debug","content","error","levels","builtinEnabled","connector","loggers","getLogger","set","JSON","stringify","hasOwnProperty","print","prefix","Date","Event","MAX_LISTENERS","initEvents","initMoreEvents","maxListeners","checkEvent","listener","bindTarget","TypeError","listenerObj","once","listenOnce","arguments","off","splice","setMaxListeners","listeners","err","stack","sender","data","USER_AGENT","SIPS","CONNECTION_ERROR","REQUEST_TIMEOUT","INTERNAL_ERROR","BUSY","REJECTED","REDIRECTED","UNAVAILABLE","NOT_FOUND","ADDRESS_INCOMPLETE","INCOMPATIBLE_SDP","AUTHENTICATION_ERROR","DIALOG_ERROR","WEBRTC_NOT_SUPPORTED","WEBRTC_ERROR","CANCELED","NO_ANSWER","EXPIRES","NO_ACK","NO_PRACK","USER_DENIED_MEDIA_ACCESS","BAD_MEDIA_DESCRIPTION","RTP_TIMEOUT","supported","UNSUPPORTED","SUPPORTED","REQUIRED","ACK","BYE","CANCEL","INFO","INVITE","MESSAGE","NOTIFY","OPTIONS","REGISTER","UPDATE","SUBSCRIBE","REFER","PRACK",100,180,181,182,183,199,200,202,204,300,301,302,305,380,400,401,402,403,404,405,406,407,408,410,412,413,414,415,416,417,420,421,422,423,428,429,430,433,436,437,438,439,440,469,470,478,480,481,482,483,484,485,486,487,488,489,491,493,494,500,501,502,503,504,505,513,580,600,603,604,606,"ConfigurationError","exception","parameter","code","message","InvalidStateError","status","NotSupportedError","NotReadyError","T1","T2","T4","timers","TIMER_B","TIMER_D","TIMER_F","TIMER_H","TIMER_I","TIMER_J","TIMER_K","TIMER_L","TIMER_M","TIMER_N","PROVISIONAL_RESPONSE_INTERVAL","Transport","STATUS_READY","STATUS_DISCONNECTED","STATUS_ERROR","server","ws","reconnection_attempts","closed","connected","reconnectTimer","lastTransportError","connect","send","msg","readyState","WebSocket","OPEN","configuration","disconnect","clearTimeout","ws_uri","close","reason","CONNECTING","onTransportConnecting","binaryType","onopen","onOpen","onclose","onClose","onmessage","onMessage","onerror","onError","onTransportConnected","connected_before","wasClean","onTransportClosed","reConnect","transaction","Uint8Array","evt","Parser","parseMessage","STATUS_USER_CLOSED","IncomingRequest","sanityCheck","receiveRequest","IncomingResponse","method","transactions","ict","via_branch","receiveResponse","nict","wsServerMaxReconnection","wsServerReconnectionTimeout","getHeader","headerStart","partialEnd","match","parseHeader","headerEnd","header","parsed","hcolonIndex","headerName","trim","headerValue","addHeader","getHeaders","via","branch","setHeader","from_tag","getParam","to_tag","position","offset","call_id","cseq","refer_to","firstLine","contentLength","bodyStart","reason_phrase","ruri","hasHeader","OutgoingRequest","IncomingMessage","params","statusCode","reasonPhrase","route_set","usePreloadedRoute","sip_uri","MAX_FORWARDS","to_displayName","to_uri","NameAddrHeader","from_displayName","displayName","from_uri","sipjsId","regexp","RegExp","result","pub_gruu","temp_gruu","rel100","userAgentString","raw","server_transaction","reply","onSuccess","onFailure","rr","vias","hasParam","reply_sl","scheme","port","parameters","param","setParam","key","deleteParam","clearParams","deleteHeader","clearHeaders","clone","name_addr_header","STATUS_TRYING","STATUS_PROCEEDING","STATUS_CALLING","STATUS_ACCEPTED","STATUS_COMPLETED","STATUS_TERMINATED","STATUS_CONFIRMED","NON_INVITE_CLIENT","NON_INVITE_SERVER","INVITE_CLIENT","INVITE_SERVER","NonInviteClientTransaction","request_sender","request","hackViaTcp","viaHost","newTransaction","stateChanged","state","tr","timer_F","K","destroyTransaction","onRequestTimeout","timer_K","InviteClientTransaction","cancel","cancel_request","B","timer_B","D","M","timer_M","timer_D","sendACK","ack","AckClientTransaction","NonInviteServerTransaction","last_response","timer_J","transportError","J","InviteServerTransaction","resendProvisionalTimer","timer_H","timer_I","timer_L","clearInterval","L","resend_provisional","setInterval","checkTransaction","ist","nist","Transactions","RequestSender","dialog","applicant","reattempt","reattemptTimer","owner","clientTransaction","uac_pending_reply","uas_pending_reply","onReadyToReinvite","onDialogError","local_seqnum","Session","getReattemptTimeout","Dialog","STATUS_EARLY","local_tag","remote_tag","remote_seqnum","local_uri","remote_uri","remote_target","invite_seqnum","pracked","reverse","hasOffer","mediaHandler","mediaHandlerFactory","dialogs","update","terminate","peerConnection","createRequest","checkInDialogRequest","retryAfter","sendRequest","credentials","challenged","staled","challenge","authorization_header_name","stale","authenticate","RegisterContext","regId","registrar","registrarServer","expires","registerExpires","instanceId","ClientContext","registrationTimer","registrationExpiredTimer","registered","contacts","unregistered","registrationFailure","registered_before","isReady","getDescription","mediaHint","setDescription","originalTarget","contentType","localIdentity","remoteIdentity","cancel_reason","applicants","ServerContext","progress","accept","DTMF","MIN_DURATION","MAX_DURATION","DEFAULT_DURATION","MIN_INTER_TONE_GAP","DEFAULT_INTER_TONE_GAP","tone","duration","interToneGap","direction","abs","STATUS_WAITING_FOR_ACK","originator","init_incoming","InviteServerContext","InviteClientContext","STATUS_NULL","STATUS_INVITE_SENT","STATUS_1XX_RECEIVED","STATUS_INVITE_RECEIVED","STATUS_WAITING_FOR_ANSWER","STATUS_ANSWERED","STATUS_WAITING_FOR_PRACK","STATUS_CANCELED","STATUS_ANSWERED_WAITING_FOR_PRACK","STATUS_EARLY_MEDIA","earlyDialogs","defaultFactory","hasAnswer","ackTimer","expiresTimer","invite2xxTimer","userNoAnswerTimer","rel1xxTimer","prackTimer","startTime","endTime","tones","local_hold","remote_hold","pending_actions","actions","isPending","shift","pop","early_sdp","dtmf","dtmfs","concat","timeout","bye","terminated","refer","followRefer","callback","targetString","open","Chrome","getsConfusedAboutGUM","referSession","invite","receiveNonInviteResponse","sessions","createDialog","early","early_dialog","failed","dia","isReadyToReinvite","ret","onmute","onunmute","onhold","sendReinvite","mangle","onunhold","local","receiveReinvite","setInvite2xxTimer","setACKTimer","eventHandlers","succeeded","reinviteSucceeded","reinviteFailed","receiveReinviteResponse","reg_tone","reg_duration","hasReferListener","notifyBody","acceptAndTerminate","invite2xxRetransmission","min","action","rejected","canceled","accepted","connecting","set100rel","h","fireNewSession","noAnswerTimeout","contentDisp","renderbody","rendertype","Firefox","cannotHandleExtraWhitespace","AllBrowsers","maskDtls","RTCConstraints","optional","DtlsSrtpKeyAgreement","getRemoteStreams","getLocalStreams","do100rel","isCanceled","rel1xxRetransmission","normalReply","sdpCreationSucceeded","replySucceeded","replyFailed","sdpCreationFailed","confirmSession","requestParams","iceServers","isMediaSupported","isSupported","inviteWithoutSdp","anonymous","outbound","received_100","receiveInviteResponse","configuration_check","offer","cancelReason","sdp","localMedia","hasMissingCLineInSDP","Subscription","N","sub_duration","errorCodes","subscribe","sub","timer_fire","createConfirmedDialog","subscriptions","INVALID_EXPIRES_HEADER","EXPIRES_HEADER_MISSING","unsubscribe","terminateDialog","setExpiresTimeout","sub_state","max","matchEvent","REASON_200","selfEmit","mh","mediaStreamManager","ready","audioMuted","videoMuted","servers","config","urls","credential","RTCPeerConnection","onaddstream","onremovestream","onicecandidate","candidate","onIceCompleted","callOnIceCompleted","onicegatheringstatechange","iceGatheringState","oniceconnectionstatechange","iceConnectionState","onstatechange","writable","signalingState","streamAdditionSucceeded","ondatachannel","dataChannel","channel","createDataChannel","createOfferOrAnswer","acquireSucceeded","addStream","acquire","rawDescription","RTCSessionDescription","setRemoteDescription","isMuted","getAudioTracks","getVideoTracks","toggleMuteAudio","toggleMuteVideo","audioUnMuted","videoUnMuted","pc","localStreams","remoteStreams","renderHint","streamGetters","keys","loc","streamGetter","streams","where","offerState","readySuccess","localDescription","needsExplicitlyInactiveSDP","unmaskDtls","hasIncompatibleCLineWithSomeSIPEndpoints","sdpWrapper","methodName","onSetLocalDescriptionSuccess","methodFailed","sessionDescription","setLocalDescription","toggleMuteHelper","trackGetter","enabled","defaultMediaHint","map","elements","attachAndPlay","element","attachMediaStream","ensureMediaPlaying","src","URL","revokeObjectURL","createObjectURL","srcObject","mozSrcObject","mediaElement","interval","ensurePlayingIntervalId","paused","play","volume","saveSuccess","isHintStream","emitThenCall","eventName","callbackArgs","newArgs","getUserMedia","_isSupported","MediaStream","navigator","STATUS_INIT","STATUS_NOT_READY","CONFIGURATION_ERROR","NETWORK_ERROR","ACCEPTED_BODY_TYPES","len","cache","transportRecoverAttempts","transportRecoveryTimer","transactionsCount","count","nictTransactionsCount","nistTransactionsCount","ictTransactionsCount","istTransactionsCount","loadConfig","registerContext","isConnected","context","mes","req","transactionsListener","subscription","getNextWsServer","hostportParams","saveCredentials","realm","getCredentials","client_transactions","closeSessionsOnTransportError","recoverTransport","attempts","ruriMatches","methodLower","content_type","findDialog","findSession","ws_server","candidates","weight","nextRetry","pow","connectionRecoveryMinInterval","connectionRecoveryMaxInterval","aliasUnderscored","underscored","hasParameter","checked_value","settings","hackIpInContact","hackWssInTransport","mandatory","emptyArraysAllowed","configuration_skeleton","skeleton","configurable","Number","stun_server","turn_server","Function","isFirefox","mozRTCPeerConnection","insertAt","mlines","search","index","rfc3261_8_2_2_1","rfc3261_16_3_4","rfc3261_18_3_request","rfc3261_8_2_2_2","fromTag","rfc3261_8_1_3_3","rfc3261_18_1_2","rfc3261_18_3_response","minimumHeaders","mandatoryHeaders","requests","responses","u","t","pass","cnonce","nc","ncHex","algorithm","nonce","opaque","qop","updateNcHex","calculateResponse","ha1","ha2","auth_params","hex","peg$subclass","child","parent","ctor","SyntaxError","expected","found","column","input","text","peg$reportedPos","peg$currPos","peg$computePosDetails","pos","advance","details","startPos","endPos","ch","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$maxFailPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","buildMessage","stringEscape","expectedDesc","foundDesc","expectedDescs","posDetails","peg$decode","bc","peg$parseRule","protect","peg$bytecode","ip","ips","ends","peg$consts","peg$FAILED","peg$silentFails","peg$result","peg$startRuleIndices","Contact","Name_Addr_Header","Record_Route","Request_Response","SIP_URI","Subscription_State","Via","absoluteURI","Call_ID","Content_Disposition","Content_Length","Content_Type","CSeq","From","Max_Forwards","Proxy_Authenticate","quoted_string","Refer_To","stun_URI","To","turn_URI","WWW_Authenticate","peg$startRuleIndex","escaped","contents","uri_params","uri_headers","startRule","uri_scheme","ttl","maddr","pname","pvalue","hvalue","sip_version","multi_header","q","delta_seconds","cseq_value","event_type","tag","forwards","min_expires","qop_value","rack_value","rseq_value","retry_after","via_ttl_value","via_maddr","via_received","received","response_port","rport","via_protocol","protocol","via_transport","via_sent_by_port","handlers","executeListener","list","__emit","utils","DomAudio","sipConfig","lines","userAgent","dom","checkConfig","enums","enumerable","defineProperty","useSecureConnection","document","location","__createLine","sipRTCSession","__clearInactiveLines","getActiveLines","el","isClosed","__disconnectCount","__registerExtraOptions","sipConnected","retryCount","sipDisconnected","newLine","replaces","callId","foundLine","getId","types","incoming","callReplaced","number","inviteOptions","localAudio","remoteAudio","outgoing","cb","isConnecting","setStreamMute","val","tracks","delay","onEnd","timeCallStarted","terminateCallOnDisconnected","sessionId","muted","bothMuted","responseTimeout","controlSender","messages","park","reqid","command","startRecord","stopRecord","flip","monitor","barge","whisper","takeover","onInfo","obj","__receiveRequest","localSDP","callConnecting","__hasEarlyMedia","__receiveInviteReponse","__waitingForIce","sessionSelf","hasEarlyMedia","ICECompleted","ICEFailed","callProgress","callStarted","callRejected","callTerminated","onStateChange","__doubleCompleted","ICEConnected","ICEDisconnected","__ignoreReinviteDuplicates","__sendReinvite","res","__reinviteSucceeded","__reinviteFailed","callReinviteSucceeded","callReinviteFailed","__receiveReinviteResponse","getSession","record","peer","dtmfSender","createDTMFSender","canInsertDTMF","insertDTMF","sendInfoDTMF","blindTransfer","onNotify","forward","onAnswered","onFail","callMute","callUnmute","setMuteBoth","__legacyHold","__hold","onSucceeded","onFailed","callHold","callUnhold","isOnMute","isOnRecord","getContact","getCallDuration","getTime","ms","deferred","dst","copy","sipConnecting","ICEChecking","ICEClosed","LOCAL_AUDIO","createElement","REMOTE_AUDIO","LOCAL_AUDIO_ID","REMOTE_AUDIO_ID","setAttribute","appendChild","localAudioId","remoteAudioId","rcSIPUA","_rcSIPUA","_incoming","_outgoing","_audio","playIncoming","playOutgoing","_playSound","reset","loop","emitter","Audio","currentTime","resumed","pause","resume","ceil","load","prop"],"mappings":"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","file":"ringcentral-web-phone.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebPhone\"] = factory();\n\telse\n\t\troot[\"RingCentral\"] = root[\"RingCentral\"] || {}, root[\"RingCentral\"][\"WebPhone\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebPhone\"] = factory();\n\telse\n\t\troot[\"RingCentral\"] = root[\"RingCentral\"] || {}, root[\"RingCentral\"][\"WebPhone\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar EventEmitter = __webpack_require__(35);\nvar UserAgent = __webpack_require__(36);\nvar PhoneLine = __webpack_require__(37);\nvar AudioHelper = __webpack_require__(41);\nvar defer = __webpack_require__(38).defer;\nvar uuid = __webpack_require__(38).uuid;\nvar extend = __webpack_require__(38).extend;\nvar EVENT_NAMES = __webpack_require__(39);\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//Patching proto because of https://developers.google.com/web/updates/2015/07/mediastream-deprecations\nvar mediaStreamManagerProto = Object.create(SIP.WebRTC.MediaStreamManager.prototype, {\n    'release': {\n        value: function release(stream) {\n            var streamId = SIP.WebRTC.MediaStreamManager.streamId(stream);\n            if (this.acquisitions[streamId] === false) {\n                //MediaStream.stop removed in M47\n                if (typeof (stream.stop) === 'function') {\n                    stream.stop();\n                }\n                else {\n                    stream.getTracks().forEach(function(track) {\n                        track.stop()\n                    });\n                }\n            }\n            delete this.acquisitions[streamId];\n        }\n    }\n});\n\nSIP.WebRTC.MediaStreamManager.prototype = mediaStreamManagerProto;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @namespace RingCentral\n * @param {boolean} [options.audioHelper] Automatically create audio helper\n * @param {string} [options.uuid] Instance ID\n * @constructor\n */\nfunction WebPhone(options) {\n\n    options = options || {};\n\n    var service = this;\n\n    this.__registerDeferred = undefined;\n    this.__unregisterDeferred = undefined;\n    this.__callDeferred = undefined;\n    this.__sipRegistered = false;\n    this.__sipOutboundEnabled = false;\n\n    if (options.uuid) {\n        this.uuid = options.uuid;\n    } else {\n        localStorage['rc-webPhone-uuid'] = localStorage['rc-webPhone-uuid'] || uuid();\n        this.uuid = localStorage['rc-webPhone-uuid'];\n    }\n\n    this.activeLine = null;\n\n    this.onMute = false;\n    this.onHold = false;\n    this.onRecord = false;\n    this.contact = undefined;\n\n    var ua = new UserAgent();\n\n    this.ua = ua;\n    this.on = ua.on.bind(ua);\n\n    this.username = null;\n\n    this.isRegistered = false;\n    this.isRegistering = false;\n    this.isUnregistering = false;\n\n    this.events = EVENT_NAMES;\n\n    this.causes = SIP.C.causes;\n    this.reasons = SIP.C.REASON_PHRASE;\n\n    //naming convention: incoming or sipincoming?\n    service.on(EVENT_NAMES.sipIncomingCall, function(line) {\n        service.ua.eventEmitter.emit(EVENT_NAMES.incomingCall, line);\n    });\n\n    //naming convention: outgoing or sipoutgoing?\n    service.on(EVENT_NAMES.outgoingCall, function(line) {\n        if (service.activeLine && !service.activeLine.isOnHold()) {\n            service.activeLine.setHold();\n        }\n        service.__callDeferred && service.__callDeferred.resolve(line);\n        service.__callDeferred = null;\n    });\n\n    //naming convention: call or line?\n    service.on([EVENT_NAMES.callEnded, EVENT_NAMES.callFailed], function(call) {\n        //delete activeLine property if the call has ended on the other side\n        if (call && service.activeLine && call === service.activeLine) {\n            service.activeLine = null;\n        }\n    });\n\n    // On Call Failed due to 503 Invite Connection error reconnect the call\n    service.on(EVENT_NAMES.callFailed, function(call, response, cause) {\n        if (response) {\n            switch (true) {\n                //[WRTC-424] Should reconnect the websocket if received 503 on INVITE\n                case (/^503$/.test(response.status_code)):\n                    //This method will throw 'Connection Error', so we just remove it\n                    call.session.onTransportError = function() {};\n                    //Re-register after 500ms\n                    setTimeout(service.reregister.bind(service, true), 500);\n                    break;\n            }\n        }\n    });\n\n\n    // Setting flags for SIP Registration process\n    service.on(EVENT_NAMES.sipRegistered, function(e) {\n        service.__sipRegistered = true;\n        service.__registerDeferred && service.__registerDeferred.resolve(e);\n        service.isRegistered = true;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on([EVENT_NAMES.sipRegistrationFailed, EVENT_NAMES.sipConnectionFailed], function(e) {\n        service.__sipRegistered = false;\n        service.__registerDeferred && service.__registerDeferred.reject(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on(EVENT_NAMES.sipUnRegistered, function(e) {\n        service.__sipRegistered = false;\n        service.__unregisterDeferred && service.__unregisterDeferred.resolve(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistered = true;\n        service.isUnregistering = false;\n    });\n\n    window.addEventListener('unload', function() {\n        service.hangup();\n        service.unregister();\n    });\n\n    this._audioHelper = null;\n    if (options.audioHelper) service.createAudioHelper();\n\n    this._appKey = options.appKey;\n    this._appName = options.appName;\n    this._appVersion = options.appVersion;\n\n    this._userAgent = (options.appName ? (options.appName + (options.appVersion ? '/' + options.appVersion : '')) + ' ' : '') +\n                      'RCWEBPHONE/' + WebPhone.version;\n\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.version = '0.1.0';\n\nWebPhone.PhoneLine = PhoneLine;\nWebPhone.EventEmitter = EventEmitter;\nWebPhone.UserAgent = UserAgent;\nWebPhone.AudioHelper = AudioHelper;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param [options]\n * @return {AudioHelper}\n */\nWebPhone.prototype.createAudioHelper = function(options) {\n    if (!this._audioHelper) {\n        console.log('Helper Created');\n        this._audioHelper = new AudioHelper(this, options);\n    }\n    return this._audioHelper;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.register = function(info, checkFlags) {\n\n    try {\n        var service = this;\n\n        // console.log(\"Sip Data\"+JSON.stringify(data));\n\n        if (!checkFlags || (\n            typeof(info.sipFlags) === 'object' &&\n                //checking for undefined for platform v7.3, which doesn't support this flag\n            (info.sipFlags.outboundCallsEnabled === undefined || info.sipFlags.outboundCallsEnabled === true))\n        ) {\n\n            // Access SIP flags\n            this.__sipOutboundEnabled = info.sipFlags.outboundCallsEnabled;\n\n            // console.log('SIP Provision data', data+'\\n');\n            info = info.sipInfo[0];\n\n        } else {\n            throw new Error('ERROR.sipOutboundNotAvailable'); //FIXME Better error reporting...\n        }\n\n        var headers = [];\n        var endpointId = this.uuid;\n        if (endpointId) {\n            headers.push('P-rc-endpoint-id: ' + endpointId);\n        }\n\n        extend(info, {\n            extraHeaders: headers\n        });\n\n        if (service.isRegistered) {\n            console.warn('Already registered, please unregister the UA first');\n            return service.__registerDeferred.promise;\n        }\n\n        if (service.isRegistering) {\n            console.warn('Already registering the UA');\n            return service.__registerDeferred.promise;\n        }\n\n        service.__registerDeferred = defer();\n        service.isRegistering = true;\n        service.isRegistered = false;\n\n        //compatability properties\n        info.wsServers = info.outboundProxy && info.transport\n            ? info.transport.toLowerCase() + '://' + info.outboundProxy\n            : info.wsServers;\n        info.domain = info.domain || info.sipDomain;\n        info.username = info.username || info.userName;\n        info.extraHeaders = Array.isArray(info.extraHeaders) ? info.extraHeaders : [];\n\n        var options = {\n            wsServers: info.wsServers,\n            uri: \"sip:\" + info.username + \"@\" + info.domain,\n            password: info.password,\n            authorizationUser: info.authorizationId,\n            traceSip: true,\n            stunServers: info.stunServers || ['stun:74.125.194.127:19302'],\n            turnServers: [],\n            log: {\n                level: 1 //FIXME LOG LEVEL 3\n            },\n            domain: info.domain,\n            autostart: false,   //turn off autostart on UA creation\n            register: false,     //turn off auto register on UA creation,\n            iceGatheringTimeout: info.iceGatheringTimeout || 3000\n        };\n\n        service.username = info.userName;\n        service.ua.setSIPConfig(options);\n        service.ua.start({\n            extraHeaders: info.extraHeaders\n        });\n    }\n    catch (e) {\n        service.isRegistering = false;\n        service.isRegistered = false;\n        return Promise.reject(e);\n    }\n\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.reregister = function(reconnect) {\n    var service = this;\n    if (service.isRegistering) return service.__registerDeferred;\n    service.__registerDeferred = defer();\n    service.isRegistering = true;\n    service.ua.reregister({}, !!reconnect);\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.unregister = function() {\n    var service = this;\n    if (service.isRegistering) {\n        service.ua.forceDisconnect();\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isRegistered = false;\n        service.isUnregistered = true;\n    }\n\n    if (service.isUnregistered || service.isUnregistering) return service.__unregisterDeferred;\n\n    service.isUnregistering = true;\n    service.isUnregistered = false;\n\n    service.__unregisterDeferred = defer();\n    if (service.__sipRegistered) {\n        service.ua.stop();\n    }\n    else {\n        service.__unregisterDeferred.resolve(null);\n    }\n    return service.__unregisterDeferred.promise.catch(function() {\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.forceDisconnect = function() {\n    this.ua.forceDisconnect();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.call = function(toNumber, fromNumber, country) {\n\n    var service = this;\n    if(!this.__sipOutboundEnabled || false === Boolean(this.__sipOutboundEnabled)) {\n        throw new Error('Outbound calling is disabled'); // TODO: Fix this to be more robust error messaging\n    }\n\n    if(!toNumber)\n        throw new Error('Invalid or undefined [toNumber]');\n\n    if (!service.__callDeferred) {\n        service.__callDeferred = defer();\n        this.activeLine = service.ua.call.call(service.ua, toNumber, {\n            fromNumber: fromNumber,\n            country: country\n        });\n    }\n    return service.__callDeferred;\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nWebPhone.prototype.answer = function(line) {\n    var incomingLines = this.ua.getIncomingLinesArray();\n    var activeLines = this.ua.getActiveLinesArray();\n    var self = this;\n\n    return new Promise(function(resolve, reject) {\n        if (!line) {\n            line = incomingLines.length > 0 && arr[0];\n        }\n\n        if (line) {\n            var promises = [];\n            activeLines.forEach(function (activeLine) {\n                if (activeLine !== line) {\n                    !activeLine.isOnHold() && promises.push(activeLine.setHold(true));\n                }\n            });\n            resolve(Promise\n                .all(promises)\n                .then(function () {\n                    self.activeLine = line;\n                    self.ua.answer(line);\n                })\n                .catch(function (e) {\n                    self.hangup(line);\n                    throw e;\n                }));\n        }\n\n        return null;\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.onCall = function() {\n    return this.ua.getActiveLinesArray().filter(function(line) {\n            return line.onCall;\n        }).length > 0;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hangup = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        self.ua.hangup(line);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nWebPhone.prototype.getLine = function(line) {\n    if (!line) line = this.activeLine;\n    if (!line) throw new Error('No line or no active line');\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Check if we can replace this with  SIPJS dtmf(tone,[options]) ref: http://sipjs.com/api/0.7.0/session/#dtmftone-options\n/***\n * deprecated\n * @param value\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.sendDTMF = function(value, line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.sendDTMF.call(line, value);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setHold(true);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unhold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        if (line) {\n            self.ua.getActiveLinesArray().forEach(function (activeLine) {\n                if (activeLine !== line && !activeLine.isIncoming() && !activeLine.isOnHold()) {\n                    activeLine.setHold(true);\n                }\n            });\n            line.setHold(false);\n            self.activeLine = line;\n        }\n        return null;\n    });\n};\n\n////FIXME: Use SIPJS mute() and unmute() ref:http://sipjs.com/api/0.7.0/session/#muteoptions\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.mute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(true);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unmute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(false);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @param target\n * @param options\n * @returns {*}\n */\n//Phone-line->transfer->blindTransfer\nWebPhone.prototype.transfer = function(line, target, options) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.transfer(target, options);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nmodule.exports = WebPhone;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @name SIP\n * @namespace\n */\nmodule.exports = (function(window) {\n  \"use strict\";\n\n  var SIP = {};\n\n  var pkg = __webpack_require__(3);\n\n  Object.defineProperties(SIP, {\n    version: {\n      get: function(){ return pkg.version; }\n    },\n    name: {\n      get: function(){ return pkg.title; }\n    }\n  });\n\n  __webpack_require__(4)(SIP);\n  var Logger = __webpack_require__(5);\n  SIP.LoggerFactory = __webpack_require__(6)(window, Logger);\n  __webpack_require__(7)(SIP);\n  SIP.C = __webpack_require__(8)(SIP.name, SIP.version);\n  SIP.Exceptions = __webpack_require__(9);\n  SIP.Timers = __webpack_require__(10)(window);\n  __webpack_require__(11)(SIP, window);\n  __webpack_require__(12)(SIP);\n  __webpack_require__(13)(SIP);\n  __webpack_require__(14)(SIP);\n  __webpack_require__(15)(SIP);\n  __webpack_require__(16)(SIP, window);\n  var DialogRequestSender = __webpack_require__(17)(SIP, window);\n  __webpack_require__(18)(SIP, DialogRequestSender);\n  __webpack_require__(19)(SIP);\n  __webpack_require__(20)(SIP, window);\n  SIP.MediaHandler = __webpack_require__(21)(SIP.EventEmitter);\n  __webpack_require__(22)(SIP);\n  __webpack_require__(23)(SIP);\n  var SessionDTMF = __webpack_require__(24)(SIP);\n  __webpack_require__(25)(SIP, window, SessionDTMF);\n  __webpack_require__(26)(SIP, window);\n  var WebRTCMediaHandler = __webpack_require__(27)(SIP);\n  var WebRTCMediaStreamManager = __webpack_require__(28)(SIP);\n  SIP.WebRTC = __webpack_require__(29)(SIP.Utils, window, WebRTCMediaHandler, WebRTCMediaStreamManager);\n  __webpack_require__(30)(SIP, window);\n  SIP.Hacks = __webpack_require__(31)(SIP);\n  __webpack_require__(32)(SIP);\n  SIP.DigestAuthentication = __webpack_require__(33)(SIP.Utils);\n  SIP.Grammar = __webpack_require__(34)(SIP);\n\n  return SIP;\n})((typeof window !== 'undefined') ? window : global);\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n\t\"name\": \"sip.js\",\n\t\"title\": \"SIP.js\",\n\t\"description\": \"A simple, intuitive, and powerful JavaScript signaling library\",\n\t\"version\": \"0.6.4\",\n\t\"main\": \"src/SIP.js\",\n\t\"homepage\": \"http://sipjs.com\",\n\t\"author\": {\n\t\t\"name\": \"Will Mitchell\",\n\t\t\"email\": \"will@onsip.com\"\n\t},\n\t\"contributors\": [\n\t\t{\n\t\t\t\"url\": \"http://sipjs.com/authors/\"\n\t\t}\n\t],\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/onsip/SIP.js.git\"\n\t},\n\t\"keywords\": [\n\t\t\"sip\",\n\t\t\"websocket\",\n\t\t\"webrtc\",\n\t\t\"library\",\n\t\t\"javascript\"\n\t],\n\t\"devDependencies\": {\n\t\t\"grunt\": \"~0.4.0\",\n\t\t\"grunt-cli\": \"~0.1.6\",\n\t\t\"grunt-contrib-jasmine\": \"~0.6.0\",\n\t\t\"grunt-contrib-jshint\": \">0.5.0\",\n\t\t\"grunt-contrib-uglify\": \"~0.2.0\",\n\t\t\"grunt-peg\": \"~1.3.1\",\n\t\t\"grunt-trimtrailingspaces\": \"^0.4.0\",\n\t\t\"node-minify\": \"~0.7.2\",\n\t\t\"pegjs\": \"0.8.0\",\n\t\t\"sdp-transform\": \"~0.4.0\",\n\t\t\"grunt-contrib-copy\": \"^0.5.0\",\n\t\t\"browserify\": \"^4.1.8\",\n\t\t\"grunt-browserify\": \"^2.1.0\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=0.8\"\n\t},\n\t\"license\": \"MIT\",\n\t\"scripts\": {\n\t\t\"test\": \"grunt travis --verbose\"\n\t},\n\t\"gitHead\": \"209fb9bb50f1918522d37a002b83f21abd6946ab\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/onsip/SIP.js/issues\"\n\t},\n\t\"_id\": \"sip.js@0.6.4\",\n\t\"_shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\"_from\": \"sip.js@0.6.4\",\n\t\"_npmVersion\": \"1.4.13\",\n\t\"_npmUser\": {\n\t\t\"name\": \"egreen_onsip\",\n\t\t\"email\": \"eric.green@onsip.com\"\n\t},\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"joseph-onsip\",\n\t\t\t\"email\": \"joseph@onsip.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"egreen_onsip\",\n\t\t\t\"email\": \"eric.green@onsip.com\"\n\t\t}\n\t],\n\t\"dist\": {\n\t\t\"shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\t\"tarball\": \"http://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n\t},\n\t\"directories\": {},\n\t\"_resolved\": \"https://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @fileoverview Utils\n */\n\nmodule.exports = function (SIP) {\nvar Utils;\n\nUtils= {\n\n  augment: function (object, constructor, args, override) {\n    var idx, proto;\n\n    // Add public properties from constructor's prototype onto object\n    proto = constructor.prototype;\n    for (idx in proto) {\n      if (override || object[idx] === undefined) {\n        object[idx] = proto[idx];\n      }\n    }\n\n    // Construct the object as though it were just created by constructor\n    constructor.apply(object, args);\n  },\n\n  optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {\n    if (isDeprecated && options[loser]) {\n      logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');\n    }\n\n    if (options[winner] && options[loser]) {\n      logger.warn(winner + ' overriding ' + loser);\n    }\n\n    options[winner] = options[winner] || options[loser] || defaultValue;\n  },\n\n  desugarSessionOptions: function desugarSessionOptions (options) {\n    if (global.HTMLMediaElement && options instanceof global.HTMLMediaElement) {\n      options = {\n        media: {\n          constraints: {\n            audio: true,\n            video: options.tagName === 'VIDEO'\n          },\n          render: {\n            remote: {\n              video: options\n            }\n          }\n        }\n      };\n    }\n    return options;\n  },\n\n  str_utf8_length: function(string) {\n    return encodeURIComponent(string).replace(/%[A-F\\d]{2}/g, 'U').length;\n  },\n\n  getPrefixedProperty: function (object, name) {\n    if (object == null) {\n      return;\n    }\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    var prefixedNames = [name, 'webkit' + capitalizedName, 'moz' + capitalizedName];\n    for (var i in prefixedNames) {\n      var property = object[prefixedNames[i]];\n      if (property) {\n        return property;\n      }\n    }\n  },\n\n  generateFakeSDP: function(body) {\n    if (!body) {\n      return;\n    }\n\n    var start = body.indexOf('o=');\n    var end = body.indexOf('\\r\\n', start);\n\n    return 'v=0\\r\\n' + body.slice(start, end) + '\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0';\n  },\n\n  isFunction: function(fn) {\n    if (fn !== undefined) {\n      return Object.prototype.toString.call(fn) === '[object Function]';\n    } else {\n      return false;\n    }\n  },\n\n  isDecimal: function (num) {\n    return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n  },\n\n  createRandomToken: function(size, base) {\n    var i, r,\n      token = '';\n\n    base = base || 32;\n\n    for( i=0; i < size; i++ ) {\n      r = Math.random() * base|0;\n      token += r.toString(base);\n    }\n\n    return token;\n  },\n\n  newTag: function() {\n    return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);\n  },\n\n  // http://stackoverflow.com/users/109538/broofa\n  newUUID: function() {\n    var UUID =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n\n    return UUID;\n  },\n\n  hostType: function(host) {\n    if (!host) {\n      return;\n    } else {\n      host = SIP.Grammar.parse(host,'host');\n      if (host !== -1) {\n        return host.host_type;\n      }\n    }\n  },\n\n  /**\n  * Normalize SIP URI.\n  * NOTE: It does not allow a SIP URI without username.\n  * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n  * Detects the domain part (if given) and properly hex-escapes the user portion.\n  * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n  * @private\n  * @param {String} target\n  * @param {String} [domain]\n  */\n  normalizeTarget: function(target, domain) {\n    var uri, target_array, target_user, target_domain;\n\n    // If no target is given then raise an error.\n    if (!target) {\n      return;\n    // If a SIP.URI instance is given then return it.\n    } else if (target instanceof SIP.URI) {\n      return target;\n\n    // If a string is given split it by '@':\n    // - Last fragment is the desired domain.\n    // - Otherwise append the given domain argument.\n    } else if (typeof target === 'string') {\n      target_array = target.split('@');\n\n      switch(target_array.length) {\n        case 1:\n          if (!domain) {\n            return;\n          }\n          target_user = target;\n          target_domain = domain;\n          break;\n        case 2:\n          target_user = target_array[0];\n          target_domain = target_array[1];\n          break;\n        default:\n          target_user = target_array.slice(0, target_array.length-1).join('@');\n          target_domain = target_array[target_array.length-1];\n      }\n\n      // Remove the URI scheme (if present).\n      target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n      // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n      if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n        target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n      }\n\n      // Build the complete SIP URI.\n      target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;\n\n      // Finally parse the resulting URI.\n      if (uri = SIP.URI.parse(target)) {\n        return uri;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n  * Hex-escape a SIP URI user.\n  * @private\n  * @param {String} user\n  */\n  escapeUser: function(user) {\n    // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n    return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n  },\n\n  headerize: function(string) {\n    var exceptions = {\n      'Call-Id': 'Call-ID',\n      'Cseq': 'CSeq',\n      'Rack': 'RAck',\n      'Rseq': 'RSeq',\n      'Www-Authenticate': 'WWW-Authenticate'\n      },\n      name = string.toLowerCase().replace(/_/g,'-').split('-'),\n      hname = '',\n      parts = name.length, part;\n\n    for (part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname +='-';\n      }\n      hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n    return hname;\n  },\n\n  sipErrorCause: function(status_code) {\n    var cause;\n\n    for (cause in SIP.C.SIP_ERROR_CAUSES) {\n      if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n        return SIP.C.causes[cause];\n      }\n    }\n\n    return SIP.C.causes.SIP_FAILURE_CODE;\n  },\n\n  /**\n  * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n  * @private\n  */\n  getRandomTestNetIP: function() {\n    function getOctet(from,to) {\n      return Math.floor(Math.random()*(to-from+1)+from);\n    }\n    return '192.0.2.' + getOctet(1, 254);\n  },\n\n  getAllowedMethods: function(ua) {\n    var event,\n      allowed = SIP.UA.C.ALLOWED_METHODS.toString();\n\n    for (event in SIP.UA.C.EVENT_METHODS) {\n      if (ua.checkListener(event)) {\n        allowed += ','+ SIP.UA.C.EVENT_METHODS[event];\n      }\n    }\n\n    return allowed;\n  },\n\n  // MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\n  calculateMD5: function(string) {\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) {\n      return (x & y) | ((~x) & z);\n    }\n\n    function G(x,y,z) {\n      return (x & z) | (y & (~z));\n    }\n\n    function H(x,y,z) {\n      return (x ^ y ^ z);\n    }\n\n    function I(x,y,z) {\n      return (y ^ (x | (~z)));\n    }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    }\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    }\n\n    function Utf8Encode(string) {\n      string = string.replace(/\\r\\n/g,\"\\n\");\n      var utftext = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n        var c = string.charCodeAt(n);\n\n        if (c < 128) {\n          utftext += String.fromCharCode(c);\n        }\n        else if((c > 127) && (c < 2048)) {\n          utftext += String.fromCharCode((c >> 6) | 192);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n        else {\n          utftext += String.fromCharCode((c >> 12) | 224);\n          utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n      }\n      return utftext;\n    }\n\n    var x=[];\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    string = Utf8Encode(string);\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n\n    return temp.toLowerCase();\n  }\n};\n\nSIP.Utils = Utils;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\nmodule.exports = (function() {\n\nvar Logger = function(logger, category, label) {\n  this.logger = logger;\n  this.category = category;\n  this.label = label;\n};\n\n\nLogger.prototype.debug = function(content) {\n  this.logger.debug(this.category, this.label, content);\n};\n\nLogger.prototype.log = function(content) {\n  this.logger.log(this.category, this.label, content);\n};\n\nLogger.prototype.warn = function(content) {\n  this.logger.warn(this.category, this.label, content);\n};\n\nLogger.prototype.error = function(content) {\n  this.logger.error(this.category, this.label, content);\n};\n\nreturn Logger;\n})();\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\nmodule.exports = function (window, Logger) {\n\n// Console is not defined in ECMAScript, so just in case...\nvar console = window.console || {\n  debug: function () {},\n  log: function () {},\n  warn: function () {},\n  error: function () {}\n};\n\nvar LoggerFactory = function() {\n  var logger,\n    levels = {\n    'error': 0,\n    'warn': 1,\n    'log': 2,\n    'debug': 3\n    },\n\n    level = 2,\n    builtinEnabled = true,\n    connector = null;\n\n    this.loggers = {};\n\n    logger = this.getLogger('sip.loggerfactory');\n\n\n  Object.defineProperties(this, {\n    builtinEnabled: {\n      get: function(){ return builtinEnabled; },\n      set: function(value){\n        if (typeof value === 'boolean') {\n          builtinEnabled = value;\n        } else {\n          logger.error('invalid \"builtinEnabled\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    level: {\n      get: function() {return level; },\n      set: function(value) {\n        if (value >= 0 && value <=3) {\n          level = value;\n        } else if (value > 3) {\n          level = 3;\n        } else if (levels.hasOwnProperty(value)) {\n          level = levels[value];\n        } else {\n          logger.error('invalid \"level\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    connector: {\n      get: function() {return connector; },\n      set: function(value){\n        if(value === null || value === \"\" || value === undefined) {\n          connector = null;\n        } else if (typeof value === 'function') {\n          connector = value;\n        } else {\n          logger.error('invalid \"connector\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    }\n  });\n};\n\nLoggerFactory.prototype.print = function(target, category, label, content) {\n  var prefix = [];\n\n  prefix.push(new Date());\n\n  prefix.push(category);\n\n  if (label) {\n    prefix.push(label);\n  }\n\n  prefix.push('');\n\n  if (typeof content === 'string') {\n    target.call(console, prefix.join(' | ') + content);\n  } else {\n    target.call(console, content);\n  }\n};\n\nLoggerFactory.prototype.debug = function(category, label, content) {\n  if (this.level === 3) {\n    if (this.builtinEnabled) {\n      this.print(console.debug, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('debug', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.log = function(category, label, content) {\n  if (this.level >= 2) {\n    if (this.builtinEnabled) {\n      this.print(console.log, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('log', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.warn = function(category, label, content) {\n  if (this.level >= 1) {\n    if (this.builtinEnabled) {\n      this.print(console.warn, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('warn', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.error = function(category, label, content) {\n  if (this.builtinEnabled) {\n    this.print(console.error,category, label, content);\n  }\n\n  if (this.connector) {\n    this.connector('error', category, label, content);\n  }\n};\n\nLoggerFactory.prototype.getLogger = function(category, label) {\n  var logger;\n\n  if (label && this.level === 3) {\n    return new Logger(this, category, label);\n  } else if (this.loggers[category]) {\n    return this.loggers[category];\n  } else {\n    logger = new Logger(this, category);\n    this.loggers[category] = logger;\n    return logger;\n  }\n};\n\nreturn LoggerFactory;\n};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview EventEmitter\n */\n\n/**\n * @augments SIP\n * @class Class creating an event emitter.\n */\nmodule.exports = function (SIP) {\nvar\n  EventEmitter,\n  Event,\n  logger = new SIP.LoggerFactory().getLogger('sip.eventemitter'),\n  C = {\n    MAX_LISTENERS: 10\n  };\n\nEventEmitter = function(){};\nEventEmitter.prototype = {\n  /**\n   * Initialize events dictionaries.\n   * @param {Array} events\n   */\n  initEvents: function(events) {\n    this.events = {};\n\n    return this.initMoreEvents(events);\n  },\n\n  initMoreEvents: function(events) {\n    var idx;\n\n    if (!this.logger) {\n      this.logger = logger;\n    }\n\n    this.maxListeners = C.MAX_LISTENERS;\n\n    for (idx = 0; idx < events.length; idx++) {\n      if (!this.events[events[idx]]) {\n        this.logger.log('adding event '+ events[idx]);\n        this.events[events[idx]] = [];\n      } else {\n        this.logger.log('skipping event '+ events[idx]+ ' - Event exists');\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * Check whether an event exists or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkEvent: function(event) {\n    return !!(this.events && this.events[event]);\n  },\n\n  /**\n  * Check whether an event exists and has at least one listener or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkListener: function(event) {\n    return this.checkEvent(event) && this.events[event].length > 0;\n  },\n\n  /**\n  * Add a listener to the end of the listeners array for the specified event.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  on: function(event, listener, bindTarget) {\n    if (listener === undefined) {\n      return this;\n    } else if (typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to add a listener to a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    var listenerObj = { listener: listener };\n    if (bindTarget) {\n      listenerObj.bindTarget = bindTarget;\n    }\n\n    if (this.events[event].length >= this.maxListeners) {\n      this.logger.warn('max listeners exceeded for event '+ event);\n      return this;\n    }\n\n    this.events[event].push(listenerObj);\n    this.logger.log('new listener added to event '+ event);\n    return this;\n  },\n\n  /**\n  * Add a one time listener for the specified event.\n  * The listener is invoked only the next time the event is fired, then it is removed.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  once: function(event, listener, bindTarget) {\n    var self = this;\n    function listenOnce () {\n      listener.apply(this, arguments);\n      self.off(event, listenOnce, bindTarget);\n    }\n\n    return this.on(event, listenOnce, bindTarget);\n  },\n\n  /**\n  * Remove a listener from the listener array for the specified event.\n  * Note that the order of the array elements will change after removing the listener\n  * @param {String} event\n  * @param {Function} listener\n  */\n  off: function(event, listener, bindTarget) {\n    var events, length,\n      idx = 0;\n\n    if (listener && typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!event) {\n      for (idx in this.events) {\n        this.events[idx] = [];\n      }\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to remove a listener from a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    events = this.events[event];\n    length = events.length;\n\n    while (idx < length) {\n      if (events[idx] &&\n          (!listener || events[idx].listener === listener) &&\n          (!bindTarget || events[idx].bindTarget === bindTarget)) {\n        events.splice(idx,1);\n      } else {\n        idx ++;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * By default EventEmitter will print a warning\n  * if more than C.MAX_LISTENERS listeners are added for a particular event.\n  * This function allows that limit to be modified.\n  * @param {Number} listeners\n  */\n  setMaxListeners: function(listeners) {\n    if (typeof listeners !== 'number' || listeners < 0) {\n      this.logger.error('listeners must be a positive number');\n      return this;\n    }\n\n    this.maxListeners = listeners;\n    return this;\n  },\n\n  /**\n  * Execute each of the listeners in order with the supplied arguments.\n  * @param {String} events\n  * @param {Array} args\n  */\n  emit: function(event) {\n    if (!this.checkEvent(event)) {\n      this.logger.error('unable to emit a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    this.logger.log('emitting event '+ event);\n\n    // Fire event listeners\n    var args = Array.prototype.slice.call(arguments, 1);\n    this.events[event].slice().forEach(function (listener) {\n      try {\n        listener.listener.apply(listener.bindTarget || this, args);\n      } catch(err) {\n        this.logger.error(err.stack);\n      }\n    }, this);\n\n    return this;\n  }\n};\n\nEvent = function(type, sender, data) {\n  this.type = type;\n  this.sender= sender;\n  this.data = data;\n};\n\nEventEmitter.C = C;\n\nSIP.EventEmitter = EventEmitter;\nSIP.Event = Event;\n};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Constants\n */\n\n/**\n * SIP Constants.\n * @augments SIP\n */\n\nmodule.exports = function (name, version) {\nreturn {\n  USER_AGENT: name +'/'+ version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n    DIALOG_ERROR:             'Dialog Error',\n\n    // Session error causes\n    WEBRTC_NOT_SUPPORTED:     'WebRTC Not Supported',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    NO_PRACK:                 'No PRACK',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  supported: {\n    UNSUPPORTED:        'none',\n    SUPPORTED:          'supported',\n    REQUIRED:           'required'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n  REFER:      'REFER',\n  PRACK:      'PRACK',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  }\n};\n};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Exceptions\n */\n\n/**\n * SIP Exceptions.\n * @augments SIP\n */\nmodule.exports = {\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: ' + status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotReadyError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'NOT_READY_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP TIMERS\n */\n\n/**\n * @augments SIP\n */\nvar\n  T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\nmodule.exports = function (timers) {\n  var exports = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0  * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0  * T1,\n    TIMER_J: 0  * T1,\n    TIMER_K: 0  * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n  };\n\n  ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']\n  .forEach(function (name) {\n    // can't just use timers[name].bind(timers) since it bypasses jasmine's\n    // clock-mocking\n    exports[name] = function () {\n      return timers[name].apply(timers, arguments);\n    };\n  });\n\n  return exports;\n};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Transport\n */\n\n/**\n * @augments SIP\n * @class Transport\n * @param {SIP.UA} ua\n * @param {Object} server ws_server Object\n */\nmodule.exports = function (SIP, window) {\nvar Transport,\n  C = {\n    // Transport status codes\n    STATUS_READY:        0,\n    STATUS_DISCONNECTED: 1,\n    STATUS_ERROR:        2\n  };\n\nTransport = function(ua, server) {\n\n  this.logger = ua.getLogger('sip.transport');\n  this.ua = ua;\n  this.ws = null;\n  this.server = server;\n  this.reconnection_attempts = 0;\n  this.closed = false;\n  this.connected = false;\n  this.reconnectTimer = null;\n  this.lastTransportError = {};\n\n  this.ua.transport = this;\n\n  // Connect\n  this.connect();\n};\n\nTransport.prototype = {\n  /**\n   * Send a message.\n   * @param {SIP.OutgoingRequest|String} msg\n   * @returns {Boolean}\n   */\n  send: function(msg) {\n    var message = msg.toString();\n\n    if(this.ws && this.ws.readyState === window.WebSocket.OPEN) {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('sending WebSocket message:\\n\\n' + message + '\\n');\n      }\n      this.ws.send(message);\n      return true;\n    } else {\n      this.logger.warn('unable to send message, WebSocket is not open');\n      return false;\n    }\n  },\n\n  /**\n  * Disconnect socket.\n  */\n  disconnect: function() {\n    if(this.ws) {\n      // Clear reconnectTimer\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n\n      this.closed = true;\n      this.logger.log('closing WebSocket ' + this.server.ws_uri);\n      this.ws.close();\n    }\n\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n      this.ua.emit('disconnected', {\n        transport: this,\n        code: this.lastTransportError.code,\n        reason: this.lastTransportError.reason\n      });\n    }\n  },\n\n  /**\n  * Connect socket.\n  */\n  connect: function() {\n    var transport = this;\n\n    if(this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');\n      return false;\n    }\n\n    if(this.ws) {\n      this.ws.close();\n    }\n\n    this.logger.log('connecting to WebSocket ' + this.server.ws_uri);\n    this.ua.onTransportConnecting(this,\n      (this.reconnection_attempts === 0)?1:this.reconnection_attempts);\n\n    try {\n      this.ws = new window.WebSocket(this.server.ws_uri, 'sip');\n    } catch(e) {\n      this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);\n    }\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen = function() {\n      transport.onOpen();\n    };\n\n    this.ws.onclose = function(e) {\n      transport.onClose(e);\n    };\n\n    this.ws.onmessage = function(e) {\n      transport.onMessage(e);\n    };\n\n    this.ws.onerror = function(e) {\n      transport.onError(e);\n    };\n  },\n\n  // Transport Event Handlers\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onOpen: function() {\n    this.connected = true;\n\n    this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');\n    // Clear reconnectTimer since we are not disconnected\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    // Reset reconnection_attempts\n    this.reconnection_attempts = 0;\n    // Disable closed\n    this.closed = false;\n    // Trigger onTransportConnected callback\n    this.ua.onTransportConnected(this);\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onClose: function(e) {\n    var connected_before = this.connected;\n\n    this.connected = false;\n    this.lastTransportError.code = e.code;\n    this.lastTransportError.reason = e.reason;\n    this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n\n    if(e.wasClean === false) {\n      this.logger.warn('WebSocket abrupt disconnection');\n    }\n    // Transport was connected\n    if(connected_before === true) {\n      this.ua.onTransportClosed(this);\n      // Check whether the user requested to close.\n      if(!this.closed) {\n        this.reConnect();\n      } else {\n        this.ua.emit('disconnected', {\n          transport: this,\n          code: this.lastTransportError.code,\n          reason: this.lastTransportError.reason\n        });\n      }\n    } else {\n      // This is the first connection attempt\n      //Network error\n      this.ua.onTransportError(this);\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onMessage: function(e) {\n    var message, transaction,\n      data = e.data;\n\n    // CRLF Keep Alive response from server. Ignore it.\n    if(data === '\\r\\n') {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket message with CRLF Keep Alive response');\n      }\n      return;\n    }\n\n    // WebSocket binary message.\n    else if (typeof data !== 'string') {\n      try {\n        data = String.fromCharCode.apply(null, new Uint8Array(data));\n      } catch(evt) {\n        this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');\n        return;\n      }\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket binary message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    // WebSocket text message.\n    else {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket text message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    message = SIP.Parser.parseMessage(data, this.ua);\n\n    if (!message) {\n      return;\n    }\n\n    if(this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {\n      return;\n    }\n\n    // Do some sanity check\n    if(SIP.sanityCheck(message, this.ua, this)) {\n      if(message instanceof SIP.IncomingRequest) {\n        message.transport = this;\n        this.ua.receiveRequest(message);\n      } else if(message instanceof SIP.IncomingResponse) {\n        /* Unike stated in 18.1.2, if a response does not match\n        * any transaction, it is discarded here and no passed to the core\n        * in order to be discarded there.\n        */\n        switch(message.method) {\n          case SIP.C.INVITE:\n            transaction = this.ua.transactions.ict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n          case SIP.C.ACK:\n            // Just in case ;-)\n            break;\n          default:\n            transaction = this.ua.transactions.nict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onError: function(e) {\n    this.logger.warn('WebSocket connection error: ' + e);\n  },\n\n  /**\n  * Reconnection attempt logic.\n  * @private\n  */\n  reConnect: function() {\n    var transport = this;\n\n    this.reconnection_attempts += 1;\n\n    if(this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {\n      this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);\n      this.ua.onTransportError(this);\n    } else {\n      this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');\n\n      this.reconnectTimer = SIP.Timers.setTimeout(function() {\n        transport.connect();\n        transport.reconnectTimer = null;\n      }, this.ua.configuration.wsServerReconnectionTimeout * 1000);\n    }\n  }\n};\n\nTransport.C = C;\nSIP.Transport = Transport;\n};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Message Parser\n */\n\n/**\n * Extract and parse every header of a SIP message.\n * @augments SIP\n * @namespace\n */\nmodule.exports = function (SIP) {\nvar Parser;\n\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = SIP.Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('record-route', headerValue.substring(header.position, header.offset));\n        message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = SIP.Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('contact', headerValue.substring(header.position, header.offset));\n        message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIP.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if (parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n/** Parse SIP Message\n * @function\n * @param {String} message SIP message.\n * @param {Object} logger object.\n * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}\n */\nParser = {};\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n'),\n    logger = ua.getLogger('sip.parser');\n\n  if(headerEnd === -1) {\n    logger.warn('no CRLF found, not a SIP message, discarded');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = SIP.Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIP.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIP.IncomingResponse(ua);\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      logger.error('malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      logger.error(parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n\nSIP.Parser = Parser;\n};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Message\n */\n\nmodule.exports = function (SIP) {\nvar\n  OutgoingRequest,\n  IncomingMessage,\n  IncomingRequest,\n  IncomingResponse;\n\n/**\n * @augments SIP\n * @class Class for outgoing SIP request.\n * @param {String} method request method\n * @param {String} ruri request uri\n * @param {SIP.UA} ua\n * @param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set\n * @param {Object} [headers] extra headers\n * @param {String} [body]\n */\nOutgoingRequest = function(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = (extraHeaders || []).slice();\n  this.statusCode = params.status_code;\n  this.reasonPhrase = params.reason_phrase;\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.usePreloadedRoute){\n    this.setHeader('route', ua.transport.server.sip_uri);\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);\n\n  // To\n  to = (params.to_displayName || params.to_displayName === 0) ? '\"' + params.to_displayName + '\" ' : '';\n  to += '<' + (params.to_uri || ruri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new SIP.NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  if (params.from_displayName || params.from_displayName === 0) {\n    from = '\"' + params.from_displayName + '\" ';\n  } else if (ua.configuration.displayName) {\n    from = '\"' + ua.configuration.displayName + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (params.from_uri || ua.configuration.uri) + '>;tag=';\n  from += params.from_tag || SIP.Utils.newTag();\n  this.from = new SIP.NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n};\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * @param {String} name header name\n   * @param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[SIP.Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx, supported = [];\n\n    msg += this.method + ' ' + this.ruri + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    //Supported\n    if (this.method === SIP.C.REGISTER) {\n      supported.push('path', 'gruu');\n    } else if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n      supported.push('gruu');\n    }\n\n    if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n      supported.push('100rel');\n    }\n\n    supported.push('outbound');\n\n    msg += 'Supported: ' +  supported +'\\r\\n';\n    msg += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n    if(this.body) {\n      length = SIP.Utils.str_utf8_length(this.body);\n      msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      msg += this.body;\n    } else {\n      msg += 'Content-Length: 0\\r\\n\\r\\n';\n    }\n\n    return msg;\n  }\n};\n\n/**\n * @augments SIP\n * @class Class for incoming SIP message.\n */\nIncomingMessage = function(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n};\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = SIP.Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    return(this.headers[SIP.Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * @param {String} name header name\n  * @param {Number} [idx=0] header index\n  * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = SIP.Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      this.logger.log('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      this.logger.log('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * @param {String} name header name\n   * @param {Number} [idx=0] header index\n   * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * @example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[SIP.Utils.headerize(name)] = [header];\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP request.\n */\nIncomingRequest = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n};\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n* @param {Object} headers extra headers\n* @param {String} body body\n* @param {Function} [onSuccess] onSuccess callback\n* @param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n  supported = [],\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n  extraHeaders = (extraHeaders || []).slice();\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  if(this.method === SIP.C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  //Supported\n  if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n    supported.push('gruu');\n  }\n\n  if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n    supported.push('100rel');\n  }\n\n  supported.push('outbound');\n\n  response += 'Supported: ' + supported + '\\r\\n';\n\n  if(body) {\n    length = SIP.Utils.str_utf8_length(body);\n    response += 'Content-Type: application/sdp\\r\\n';\n    response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n    response += body;\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n\n  return response;\n};\n\n/**\n* Stateless reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP response.\n */\nIncomingResponse = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n};\nIncomingResponse.prototype = new IncomingMessage();\n\nSIP.OutgoingRequest = OutgoingRequest;\nSIP.IncomingRequest = IncomingRequest;\nSIP.IncomingResponse = IncomingResponse;\n};\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP URI\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP URI.\n *\n * @param {String} [scheme]\n * @param {String} [user]\n * @param {String} host\n * @param {String} [port]\n * @param {Object} [parameters]\n * @param {Object} [headers]\n *\n */\nmodule.exports = function (SIP) {\nvar URI;\n\nURI = function(scheme, user, host, port, parameters, headers) {\n  var param, header;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || SIP.C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  Object.defineProperties(this, {\n    scheme: {\n      get: function(){ return scheme; },\n      set: function(value){\n        scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function(){ return user; },\n      set: function(value){\n        user = value;\n      }\n    },\n\n    host: {\n      get: function(){ return host; },\n      set: function(value){\n        host = value.toLowerCase();\n      }\n    },\n\n    port: {\n      get: function(){ return port; },\n      set: function(value){\n        port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n};\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[SIP.Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = SIP.Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this.scheme,\n      this.user,\n      this.host,\n      this.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toString: function(){\n    var header, parameter, idx, uri,\n      headers = [];\n\n    uri  = this.scheme + ':';\n    // add slashes if it's not a sip(s) URI\n    if (!this.scheme.match(\"^sips?$\")) {\n      uri += \"//\";\n    }\n    if (this.user) {\n      uri += SIP.Utils.escapeUser(this.user) + '@';\n    }\n    uri += this.host;\n    if (this.port || this.port === 0) {\n      uri += ':' + this.port;\n    }\n\n    for (parameter in this.parameters) {\n      uri += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uri += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx in this.headers[header]) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += '?' + headers.join('&');\n    }\n\n    return uri;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.URI instance or undefined if\n  * it is an invalid URI.\n  * @public\n  * @param {String} uri\n  */\nURI.parse = function(uri) {\n  uri = SIP.Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.URI = URI;\n};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\nmodule.exports = function (SIP) {\nvar NameAddrHeader;\n\nNameAddrHeader = function(uri, displayName, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof SIP.URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    displayName: {\n      get: function() { return displayName; },\n      set: function(value) {\n        displayName = (value === 0) ? '0' : value;\n      }\n    }\n  });\n};\nNameAddrHeader.prototype = {\n  setParam: function (key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n  getParam: SIP.URI.prototype.getParam,\n  hasParam: SIP.URI.prototype.hasParam,\n  deleteParam: SIP.URI.prototype.deleteParam,\n  clearParams: SIP.URI.prototype.clearParams,\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.displayName,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.displayName || this.displayName === 0) ? '\"' + this.displayName + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  * @public\n  * @param {String} name_addr_header\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = SIP.Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.NameAddrHeader = NameAddrHeader;\n};\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Transactions\n */\n\n/**\n * SIP Transactions module.\n * @augments SIP\n */\nmodule.exports = function (SIP) {\nvar\n  C = {\n    // Transaction states\n    STATUS_TRYING:     1,\n    STATUS_PROCEEDING: 2,\n    STATUS_CALLING:    3,\n    STATUS_ACCEPTED:   4,\n    STATUS_COMPLETED:  5,\n    STATUS_TERMINATED: 6,\n    STATUS_CONFIRMED:  7,\n\n    // Transaction types\n    NON_INVITE_CLIENT: 'nict',\n    NON_INVITE_SERVER: 'nist',\n    INVITE_CLIENT: 'ict',\n    INVITE_SERVER: 'ist'\n  };\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar NonInviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.F);\n  SIP.Timers.clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        SIP.Timers.clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\n\n/**\n* @augments SIP.Transactions\n* @class Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar InviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    tr = this,\n    events = ['stateChanged'];\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason) {\n    tr.cancel_request(tr, reason);\n  };\n\n  this.initEvents(events);\n};\nInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  SIP.Timers.clearTimeout(this.D);\n  SIP.Timers.clearTimeout(this.M);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    this.request_sender.onTransportError();\n  }\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  this.logger.log('Timer M expired for INVITE client transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    SIP.Timers.clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  this.logger.log('Timer B expired for INVITE client transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  this.logger.log('Timer D expired for INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers['From'].toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n\\r\\n';\n\n  this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason) {\n  var request = tr.request;\n\n  this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.cancel += 'Route: ' + request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers['To'].toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers['From'].toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        if(this.cancel) {\n          this.transport.send(this.cancel);\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\n/**\n * @augments SIP.Transactions\n * @class ACK Client Transaction\n * @param {SIP.RequestSender} request_sender\n * @param {SIP.OutgoingRequest} request\n * @param {SIP.Transport} transport\n */\nvar AckClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n};\nAckClientTransaction.prototype = new SIP.EventEmitter();\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar NonInviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.nist', this.id);\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);\n\n    SIP.Timers.clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n/**\n* @augments SIP.Transactions\n* @class Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar InviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.ist', this.id);\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n\n  this.initEvents(events);\n};\nInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  this.logger.log('Timer H expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  this.logger.log('Timer L expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      SIP.Timers.clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    SIP.Timers.clearTimeout(this.L);\n    SIP.Timers.clearTimeout(this.H);\n    SIP.Timers.clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),\n        SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            if (onFailure) {\n              onFailure();\n            }\n          } else if (onSuccess) {\n            onSuccess();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);\n          if (onSuccess) {\n            onSuccess();\n          }\n        }\n        break;\n    }\n  }\n};\n\n/**\n * @function\n * @param {SIP.UA} ua\n * @param {SIP.IncomingRequest} request\n *\n * @return {boolean}\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nvar checkTransaction = function(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case SIP.C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case SIP.C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.state = C.STATUS_CONFIRMED;\n          tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);\n          return true;\n        }\n      }\n\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case SIP.C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n};\n\nSIP.Transactions = {\n  C: C,\n  checkTransaction: checkTransaction,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction\n};\n\n};\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview In-Dialog Request Sender\n */\n\n/**\n * @augments SIP.Dialog\n * @class Class creating an In-dialog request sender.\n * @param {SIP.Dialog} dialog\n * @param {Object} applicant\n * @param {SIP.OutgoingRequest} request\n */\n/**\n * @fileoverview in-Dialog Request Sender\n */\n\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n};\n\nRequestSender.prototype = {\n  send: function() {\n    var self = this,\n      request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);\n\n      request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n            this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n            this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n          this.off('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n\n          if (self.dialog.uas_pending_reply === false) {\n            self.dialog.owner.onReadyToReinvite();\n          }\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === SIP.C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = SIP.Timers.setTimeout(\n          function() {\n            if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {\n              self.reattempt = true;\n              self.request_sender.send();\n            }\n          },\n          this.getReattemptTimeout()\n        );\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nreturn RequestSender;\n};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview SIP Dialog\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP dialog.\n * @param {SIP.RTCSession} owner\n * @param {SIP.IncomingRequest|SIP.IncomingResponse} message\n * @param {Enum} type UAC / UAS\n * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED\n */\nmodule.exports = function (SIP, RequestSender) {\n\nvar Dialog,\n  C = {\n    // Dialog states\n    STATUS_EARLY:       1,\n    STATUS_CONFIRMED:   2\n  };\n\n// RFC 3261 12.1\nDialog = function(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIP.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.pracked = [];\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n\n    //RENDERBODY\n    if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {\n      this.mediaHandler = owner.mediaHandlerFactory(owner);\n    }\n  }\n\n  this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n};\n\nDialog.prototype = {\n  /**\n   * @param {SIP.IncomingMessage} message\n   * @param {Enum} UAC/UAS\n   */\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    this.logger.log('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    this.logger.log('dialog ' + this.id.toString() + ' deleted');\n    if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {\n      this.mediaHandler.peerConnection.close();\n    }\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  /**\n  * @param {String} method request method\n  * @param {Object} extraHeaders extra headers\n  * @returns {SIP.OutgoingRequest}\n  */\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = (extraHeaders || []).slice();\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;\n\n    request = new SIP.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  * @returns {Boolean}\n  */\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== SIP.C.ACK) {\n          request.reply(500);\n        }\n        if (request.cseq === this.invite_seqnum) {\n          return true;\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    switch(request.method) {\n      // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n      case SIP.C.INVITE:\n        if (this.uac_pending_reply === true) {\n          request.reply(491);\n        } else if (this.uas_pending_reply === true) {\n          var retryAfter = (Math.random() * 10 | 0) + 1;\n          request.reply(500, null, ['Retry-After:' + retryAfter]);\n          return false;\n        } else {\n          this.uas_pending_reply = true;\n          request.server_transaction.on('stateChanged', function stateChanged(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n                this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n                this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n              this.off('stateChanged', stateChanged);\n              self.uas_pending_reply = false;\n\n              if (self.uac_pending_reply === false) {\n                self.owner.onReadyToReinvite();\n              }\n            }\n          });\n        }\n\n        // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n      case SIP.C.NOTIFY:\n        // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body || null,\n      request = this.createRequest(method, extraHeaders, body),\n      request_sender = new RequestSender(this, applicant, request);\n\n    request_sender.send();\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  */\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n\nDialog.C = C;\nSIP.Dialog = Dialog;\n};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview Request Sender\n */\n\n/**\n * @augments SIP\n * @class Class creating a request sender.\n * @param {Object} applicant\n * @param {SIP.UA} ua\n */\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(applicant, ua) {\n  this.logger = ua.getLogger('sip.requestsender');\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.credentials = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {\n    this.onTransportError();\n  }\n};\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case \"INVITE\":\n        this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case \"ACK\":\n        this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n    this.clientTransaction.send();\n\n    return this.clientTransaction;\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  * @param {SIP.IncomingResponse} response\n  */\n  receiveResponse: function(response) {\n    var cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if ((status_code === 401 || status_code === 407) && this.ua.configuration.password !== null) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (! challenge) {\n        this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.credentials) {\n          this.credentials = new SIP.DigestAuthentication(this.ua);\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === SIP.C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog){\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n          this.request.cseq = cseq;\n        }\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.credentials.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nSIP.RequestSender = RequestSender;\n};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\n\nvar RegisterContext;\n\nRegisterContext = function (ua) {\n  var params = {},\n      regId = 1,\n      events = [\n        'registered',\n        'unregistered'\n      ];\n\n  this.registrar = ua.configuration.registrarServer;\n  this.expires = ua.configuration.registerExpires;\n\n\n  // Contact header\n  this.contact = ua.contact.toString();\n\n  if(regId) {\n    this.contact += ';reg-id='+ regId;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ ua.configuration.instanceId+'>\"';\n  }\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = SIP.Utils.createRandomToken(22);\n  this.cseq = 80;\n\n  this.to_uri = ua.configuration.uri;\n\n  params.to_uri = this.to_uri;\n  params.call_id = this.call_id;\n  params.cseq = this.cseq;\n\n  // Extends ClientContext\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, {params: params}]);\n\n  this.registrationTimer = null;\n  this.registrationExpiredTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  this.logger = ua.getLogger('sip.registercontext');\n  this.initMoreEvents(events);\n};\n\nRegisterContext.prototype = {\n  register: function (options) {\n    var self = this, extraHeaders;\n\n    // Handle Options\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);\n    extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(this.ua));\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length,\n        cause;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        SIP.Timers.clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            this.logger.warn('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            this.logger.warn('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = SIP.Timers.setTimeout(function() {\n            self.registrationTimer = null;\n            self.register(options);\n          }, (expires * 1000) - 3000);\n          this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {\n            self.logger.warn('registration expired');\n            if (self.registered) {\n              self.unregistered(null, SIP.C.causes.EXPIRES);\n            }\n          }, expires * 1000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/\"/g,''));\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/\"/g,''));\n          }\n\n          this.registered = true;\n          this.emit('registered', response || null);\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register(options);\n          } else { //This response MUST contain a Min-Expires header field\n            this.logger.warn('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n    this.send();\n  },\n\n  registrationFailure: function (response, cause) {\n    this.emit('failed', response || null, cause || null);\n  },\n\n  onTransportClosed: function() {\n    this.registered_before = this.registered;\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if (this.registrationExpiredTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n      this.registrationExpiredTimer = null;\n    }\n\n    if(this.registered) {\n      this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onTransportConnected: function() {\n    this.register();\n  },\n\n  close: function() {\n    this.registered_before = this.registered;\n    this.unregister();\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    if(!this.registered) {\n      this.logger.warn('already unregistered');\n      return;\n    }\n\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(options.all) {\n      extraHeaders.push('Contact: *');\n      extraHeaders.push('Expires: 0');\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0');\n    }\n\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n          this.unregistered(response);\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.unregistered(response,cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n\n    this.send();\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.emit('unregistered', response || null, cause || null);\n  }\n\n};\n\n\nSIP.RegisterContext = RegisterContext;\n};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nmodule.exports = function (EventEmitter) {\nvar MediaHandler = function(session, options) {\n  // keep jshint happy\n  session = session;\n  options = options;\n};\n\nMediaHandler.prototype = Object.create(EventEmitter.prototype, {\n  isReady: {value: function isReady () {}},\n\n  close: {value: function close () {}},\n\n  /**\n   * @param {Function} onSuccess called with the obtained local media description\n   * @param {Function} onFailure\n   * @param {Object} [mediaHint] A custom object describing the media to be used during this session.\n   */\n  getDescription: {value: function getDescription (onSuccess, onFailure, mediaHint) {\n    // keep jshint happy\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n    mediaHint = mediaHint;\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} description\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {value: function setDescription (description, onSuccess, onFailure) {\n    // keep jshint happy\n    description = description;\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n  }}\n});\n\nreturn MediaHandler;\n};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\nvar ClientContext;\n\nClientContext = function (ua, method, target, options) {\n  var params, extraHeaders,\n      originalTarget = target,\n      events = [\n        'progress',\n        'accepted',\n        'rejected',\n        'failed',\n        'cancel'\n      ];\n\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check target validity\n  target = ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: ' + originalTarget);\n  }\n\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.clientcontext');\n  this.method = method;\n\n  params = options && options.params;\n  extraHeaders = (options && options.extraHeaders || []).slice();\n\n  if (options && options.body) {\n    this.body = options.body;\n  }\n  if (options && options.contentType) {\n    this.contentType = options.contentType;\n    extraHeaders.push('Content-Type: ' + this.contentType);\n  }\n\n  this.request = new SIP.OutgoingRequest(this.method, target, this.ua, params, extraHeaders);\n\n  this.localIdentity = this.request.from;\n  this.remoteIdentity = this.request.to;\n\n  if (this.body) {\n    this.request.body = this.body;\n  }\n\n  this.data = {};\n\n  this.initEvents(events);\n};\nClientContext.prototype = new SIP.EventEmitter();\n\nClientContext.prototype.send = function () {\n  (new SIP.RequestSender(this, this.ua)).send();\n  return this;\n};\n\nClientContext.prototype.cancel = function (options) {\n  options = options || {};\n\n  var\n  status_code = options.status_code,\n  reason_phrase = options.reason_phrase,\n  cancel_reason;\n\n  if (status_code && status_code < 200 || status_code > 699) {\n    throw new TypeError('Invalid status_code: ' + status_code);\n  } else if (status_code) {\n    reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n    cancel_reason = 'SIP ;cause=' + status_code + ' ;text=\"' + reason_phrase + '\"';\n  }\n  this.request.cancel(cancel_reason);\n\n  this.emit('cancel');\n};\n\nClientContext.prototype.receiveResponse = function (response) {\n  var cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      this.emit('progress', response, cause);\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('accepted', response, cause);\n      break;\n\n    default:\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('rejected', response, cause);\n      this.emit('failed', response, cause);\n      break;\n  }\n\n};\n\nClientContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nClientContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ClientContext = ClientContext;\n};\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP) {\nvar ServerContext;\n\nServerContext = function (ua, request) {\n  var events = [\n      'progress',\n      'accepted',\n      'rejected',\n      'failed'\n    ];\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.servercontext');\n  this.request = request;\n  if (request.method === SIP.C.INVITE) {\n    this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n  } else {\n    this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n  }\n\n  if (request.body) {\n    this.body = request.body;\n  }\n  if (request.hasHeader('Content-Type')) {\n    this.contentType = request.getHeader('Content-Type');\n  }\n  this.method = request.method;\n\n  this.data = {};\n\n  this.localIdentity = request.to;\n  this.remoteIdentity = request.from;\n\n  this.initEvents(events);\n};\n\nServerContext.prototype = new SIP.EventEmitter();\n\nServerContext.prototype.progress = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 180,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 100 || statusCode > 199) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('progress', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.accept = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 200,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 200 || statusCode > 299) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('accepted', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reject = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 480,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 300 || statusCode > 699) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('rejected', response, reasonPhrase);\n  this.emit('failed', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reply = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode,\n    reasonPhrase = options.reasonPhrase,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body;\n\n  this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n\n  return this;\n};\n\nServerContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nServerContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ServerContext = ServerContext;\n};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview DTMF\n */\n\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nmodule.exports = function (SIP) {\n\nvar DTMF,\n  C = {\n    MIN_DURATION:            70,\n    MAX_DURATION:            6000,\n    DEFAULT_DURATION:        100,\n    MIN_INTER_TONE_GAP:      50,\n    DEFAULT_INTER_TONE_GAP:  500\n  };\n\nDTMF = function(session, tone, options) {\n  var events = [\n  'succeeded',\n  'failed'\n  ], duration, interToneGap;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);\n  this.owner = session;\n  this.direction = null;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-D#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Check duration\n  if (duration && !SIP.Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = DTMF.C.DEFAULT_DURATION;\n  } else if (duration < DTMF.C.MIN_DURATION) {\n    this.logger.warn('\"duration\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = DTMF.C.MIN_DURATION;\n  } else if (duration > DTMF.C.MAX_DURATION) {\n    this.logger.warn('\"duration\" value is greater than the maximum allowed, setting it to '+ DTMF.C.MAX_DURATION +' milliseconds');\n    duration = DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  this.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {\n    this.logger.warn('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n  this.interToneGap = interToneGap;\n\n  this.initEvents(events);\n};\nDTMF.prototype = new SIP.EventEmitter();\n\n\nDTMF.prototype.send = function(options) {\n  var extraHeaders, body;\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&\n    this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n    throw new SIP.Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n\n  extraHeaders.push('Content-Type: application/dtmf-relay');\n\n  body = \"Signal= \" + this.tone + \"\\r\\n\";\n  body += \"Duration= \" + this.duration;\n\n  this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n\n  this.owner.emit('dtmf', this.request, this);\n};\n\n/**\n * @private\n */\nDTMF.prototype.receiveResponse = function(response) {\n  var cause;\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      cause = SIP.Utils.sipErrorCause(response.status_code);\n      this.emit('failed', response, cause);\n      break;\n  }\n};\n\n/**\n * @private\n */\nDTMF.prototype.onRequestTimeout = function() {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  this.owner.onRequestTimeout();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onTransportError = function() {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  this.owner.onTransportError();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onDialogError = function(response) {\n  this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);\n  this.owner.onDialogError(response);\n};\n\n/**\n * @private\n */\nDTMF.prototype.init_incoming = function(request) {\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (!this.tone || !this.duration) {\n    this.logger.warn('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.emit('dtmf', request, this);\n  }\n};\n\nDTMF.C = C;\nreturn DTMF;\n};\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\nmodule.exports = function (SIP, window, DTMF) {\n\nvar Session, InviteServerContext, InviteClientContext,\n C = {\n    //Session states\n    STATUS_NULL:                        0,\n    STATUS_INVITE_SENT:                 1,\n    STATUS_1XX_RECEIVED:                2,\n    STATUS_INVITE_RECEIVED:             3,\n    STATUS_WAITING_FOR_ANSWER:          4,\n    STATUS_ANSWERED:                    5,\n    STATUS_WAITING_FOR_PRACK:           6,\n    STATUS_WAITING_FOR_ACK:             7,\n    STATUS_CANCELED:                    8,\n    STATUS_TERMINATED:                  9,\n    STATUS_ANSWERED_WAITING_FOR_PRACK: 10,\n    STATUS_EARLY_MEDIA:                11,\n    STATUS_CONFIRMED:                  12\n  };\n\n/*\n * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]\n *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)\n */\nSession = function (mediaHandlerFactory) {\n  var events = [\n  'connecting',\n  'terminated',\n  'dtmf',\n  'invite',\n  'cancel',\n  'refer',\n  'bye',\n  'hold',\n  'unhold',\n  'muted',\n  'unmuted'\n  ];\n\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;\n  // this.mediaHandler gets set by ICC/ISC constructors\n  this.hasOffer = false;\n  this.hasAnswer = false;\n\n  // Session Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null,\n    rel1xxTimer: null,\n    prackTimer: null\n  };\n\n  // Session info\n  this.startTime = null;\n  this.endTime = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  this.pending_actions = {\n    actions: [],\n\n    length: function() {\n      return this.actions.length;\n    },\n\n    isPending: function(name){\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    shift: function() {\n      return this.actions.shift();\n    },\n\n    push: function(name) {\n      this.actions.push({\n        name: name\n      });\n    },\n\n    pop: function(name) {\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          this.actions.splice(idx,1);\n          length --;\n          idx--;\n        }\n      }\n    }\n   };\n\n  this.early_sdp = null;\n  this.rel100 = SIP.C.supported.UNSUPPORTED;\n\n  this.initMoreEvents(events);\n};\n\nSession.prototype = {\n  dtmf: function(tones, options) {\n    var tone, dtmfs = [],\n        self = this;\n\n    options = options || {};\n\n    if (tones === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // Check tones\n    if (!tones || (typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {\n      throw new TypeError('Invalid tones: '+ tones);\n    }\n\n    tones = tones.toString().split('');\n\n    while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }\n\n    if (this.tones) {\n      // Tones are already queued, just add to the queue\n      this.tones =  this.tones.concat(dtmfs);\n      return this;\n    }\n\n    var sendDTMF = function () {\n      var dtmf, timeout;\n\n      if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {\n        // Stop sending DTMF\n        self.tones = null;\n        return this;\n      }\n\n      dtmf = self.tones.shift();\n\n      if (tone === ',') {\n        timeout = 2000;\n      } else {\n        dtmf.on('failed', function(){self.tones = null;});\n        dtmf.send(options);\n        timeout = dtmf.duration + dtmf.interToneGap;\n      }\n\n      // Set timeout for the next tone\n      SIP.Timers.setTimeout(sendDTMF, timeout);\n    };\n\n    this.tones = dtmfs;\n    sendDTMF();\n    return this;\n  },\n\n  bye: function(options) {\n    options = options || {};\n    var statusCode = options.statusCode;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      this.logger.error('Error: Attempted to send BYE in a terminated session.');\n      return this;\n    }\n\n    this.logger.log('terminating Session');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid statusCode: '+ statusCode);\n    }\n\n    options.receiveResponse = function () {};\n\n    return this.\n      sendRequest(SIP.C.BYE, options).\n      terminated();\n  },\n\n  refer: function(target, options) {\n    options = options || {};\n    var extraHeaders = (options.extraHeaders || []).slice(),\n        originalTarget = target;\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    } else if (target instanceof SIP.InviteServerContext || target instanceof SIP.InviteClientContext) {\n      //Attended Transfer\n      // B.transfer(C)\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: <' + target.dialog.remote_target.toString() + '?Replaces=' + target.dialog.id.call_id + '%3Bto-tag%3D' + target.dialog.id.remote_tag + '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>');\n    } else {\n      //Blind Transfer\n\n      // Check Session Status\n      if (this.status !== C.STATUS_CONFIRMED) {\n        throw new SIP.Exceptions.InvalidStateError(this.status);\n      }\n\n      // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n      // so try to make one ahead of time\n      try {\n        target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n      } catch (e) {\n        this.logger.debug(\".refer() cannot parse Refer_To from\", target);\n        this.logger.debug(\"...falling through to normalizeTarget()\");\n      }\n\n      // Check target validity\n      target = this.ua.normalizeTarget(target);\n      if (!target) {\n        throw new TypeError('Invalid target: ' + originalTarget);\n      }\n\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: '+ target);\n    }\n\n    // Send the request\n    this.sendRequest(SIP.C.REFER, {\n      extraHeaders: extraHeaders,\n      body: options.body,\n      receiveResponse: function() {}\n    });\n    // hang up only if we transferred to a SIP address\n    if (target.scheme.match(\"^sips?$\")) {\n      this.terminate();\n    }\n    return this;\n  },\n\n  followRefer: function followRefer (callback) {\n    return function referListener (callback, request) {\n      // window.open non-SIP URIs if possible and keep session open\n      var target = request.parseHeader('refer-to').uri;\n      if (!target.scheme.match(\"^sips?$\")) {\n        var targetString = target.toString();\n        if (typeof window !== \"undefined\" && typeof window.open === \"function\") {\n          window.open(targetString);\n        } else {\n          this.logger.warn(\"referred to non-SIP URI but window.open isn't a function: \" + targetString);\n        }\n        return;\n      }\n\n      SIP.Hacks.Chrome.getsConfusedAboutGUM(this);\n\n      /*\n        Harmless race condition.  Both sides of REFER\n        may send a BYE, but in the end the dialogs are destroyed.\n      */\n      var referSession = this.ua.invite(request.parseHeader('refer-to').uri, {\n        media: this.mediaHint\n      });\n\n      callback.call(this, request, referSession);\n\n      this.terminate();\n    }.bind(this, callback);\n  },\n\n  sendRequest: function(method,options) {\n    options = options || {};\n    var self = this;\n\n    var request = new SIP.OutgoingRequest(\n      method,\n      this.dialog.remote_target,\n      this.ua,\n      {\n        cseq: options.cseq || (this.dialog.local_seqnum += 1),\n        call_id: this.dialog.id.call_id,\n        from_uri: this.dialog.local_uri,\n        from_tag: this.dialog.id.local_tag,\n        to_uri: this.dialog.remote_uri,\n        to_tag: this.dialog.id.remote_tag,\n        route_set: this.dialog.route_set,\n        statusCode: options.statusCode,\n        reasonPhrase: options.reasonPhrase\n      },\n      options.extraHeaders || [],\n      options.body\n    );\n\n    new SIP.RequestSender({\n      request: request,\n      onRequestTimeout: function() {\n        self.onRequestTimeout();\n      },\n      onTransportError: function() {\n        self.onTransportError();\n      },\n      receiveResponse: options.receiveResponse || function(response) {\n        self.receiveNonInviteResponse(response);\n      }\n    }, this.ua).send();\n\n    // Emit the request event\n    if (this.checkEvent(method.toLowerCase())) {\n      this.emit(method.toLowerCase(), request);\n    }\n\n    return this;\n  },\n\n  close: function() {\n    var idx;\n\n    if(this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.logger.log('closing INVITE session ' + this.id);\n\n    // 1st Step. Terminate media.\n    if (this.mediaHandler){\n      this.mediaHandler.close();\n    }\n\n    // 2nd Step. Terminate signaling.\n\n    // Clear session timers\n    for(idx in this.timers) {\n      SIP.Timers.clearTimeout(this.timers[idx]);\n    }\n\n    // Terminate dialogs\n\n    // Terminate confirmed dialog\n    if(this.dialog) {\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n\n    // Terminate early dialogs\n    for(idx in this.earlyDialogs) {\n      this.earlyDialogs[idx].terminate();\n      delete this.earlyDialogs[idx];\n    }\n\n    this.status = C.STATUS_TERMINATED;\n\n    delete this.ua.sessions[this.id];\n    return this;\n  },\n\n  createDialog: function(message, type, early) {\n    var dialog, early_dialog,\n      local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],\n      remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],\n      id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n    // Early Dialog\n    if (early) {\n      if (early_dialog) {\n        return true;\n      } else {\n        early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);\n\n        // Dialog has been successfully created.\n        if(early_dialog.error) {\n          this.logger.error(early_dialog.error);\n          this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n          return false;\n        } else {\n          this.earlyDialogs[id] = early_dialog;\n          return true;\n        }\n      }\n    }\n    // Confirmed Dialog\n    else {\n      // In case the dialog is in _early_ state, update it\n      if (early_dialog) {\n        early_dialog.update(message, type);\n        this.dialog = early_dialog;\n        delete this.earlyDialogs[id];\n        for (var dia in this.earlyDialogs) {\n          this.earlyDialogs[dia].terminate();\n          delete this.earlyDialogs[dia];\n        }\n        return true;\n      }\n\n      // Otherwise, create a _confirmed_ dialog\n      dialog = new SIP.Dialog(this, message, type);\n\n      if(dialog.error) {\n        this.logger.error(dialog.error);\n        this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.to_tag = message.to_tag;\n        this.dialog = dialog;\n        return true;\n      }\n    }\n  },\n\n  /**\n  * Check if Session is ready for a re-INVITE\n  *\n  * @returns {Boolean}\n  */\n  isReadyToReinvite: function() {\n    return this.mediaHandler.isReady() &&\n      !this.dialog.uac_pending_reply &&\n      !this.dialog.uas_pending_reply;\n  },\n\n  /**\n   * Mute\n   */\n  mute: function(options) {\n    var ret = this.mediaHandler.mute(options);\n    if (ret) {\n      this.onmute(ret);\n    }\n  },\n\n  /**\n   * Unmute\n   */\n  unmute: function(options) {\n    var ret = this.mediaHandler.unmute(options);\n    if (ret) {\n      this.onunmute(ret);\n    }\n  },\n\n  /**\n   * Hold\n   */\n  hold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.hold();\n\n    // Check if RTCSession is ready to send a reINVITE\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'unhold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'hold' action, add this one to the queue\n       * Else, if there is already a 'hold' action, skip\n       */\n      if (this.pending_actions.isPending('unhold')) {\n        this.pending_actions.pop('unhold');\n      } else if (!this.pending_actions.isPending('hold')) {\n        this.pending_actions.push('hold');\n      }\n      return;\n    } else if (this.local_hold === true) {\n        return;\n    }\n\n    this.onhold('local');\n\n    this.sendReinvite({\n      mangle: function(body){\n\n        // Don't receive media\n        // TODO - This will break for media streams with different directions.\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(body)) {\n          body = body.replace(/(m=[^\\r]*\\r\\n)/g, '$1a=sendonly\\r\\n');\n        } else {\n          body = body.replace(/a=sendrecv\\r\\n/g, 'a=sendonly\\r\\n');\n          body = body.replace(/a=recvonly\\r\\n/g, 'a=inactive\\r\\n');\n        }\n\n        return body;\n      }\n    });\n  },\n\n  /**\n   * Unhold\n   */\n  unhold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.unhold();\n\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'hold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'unhold' action, add this one to the queue\n       * Else, if there is already a 'unhold' action, skip\n       */\n      if (this.pending_actions.isPending('hold')) {\n        this.pending_actions.pop('hold');\n      } else if (!this.pending_actions.isPending('unhold')) {\n        this.pending_actions.push('unhold');\n      }\n      return;\n    } else if (this.local_hold === false) {\n      return;\n    }\n\n    this.onunhold('local');\n\n    this.sendReinvite();\n  },\n\n  /**\n   * isOnHold\n   */\n  isOnHold: function() {\n    return {\n      local: this.local_hold,\n      remote: this.remote_hold\n    };\n  },\n\n  /**\n   * In dialog INVITE Reception\n   * @private\n   */\n  receiveReinvite: function(request) {\n    var self = this,\n        contentType = request.getHeader('Content-Type'),\n        hold = true;\n\n    if (request.body) {\n      if (contentType !== 'application/sdp') {\n        this.logger.warn('invalid Content-Type');\n        request.reply(415);\n        return;\n      }\n\n      // Are we holding?\n      hold = (/a=(sendonly|inactive)/).test(request.body);\n\n      this.mediaHandler.setDescription(\n        request.body,\n        /*\n         * onSuccess\n         * SDP Offer is valid\n         */\n        function() {\n          self.mediaHandler.getDescription(\n            function(body) {\n              request.reply(200, null, ['Contact: ' + self.contact], body,\n                function() {\n                  self.status = C.STATUS_WAITING_FOR_ACK;\n                  self.setInvite2xxTimer(request, body);\n                  self.setACKTimer();\n\n                  if (self.remote_hold && !hold) {\n                    self.onunhold('remote');\n                  } else if (!self.remote_hold && hold) {\n                    self.onhold('remote');\n                  }\n                });\n            },\n            function() {\n              request.reply(500);\n            },\n            self.mediaHint\n          );\n        },\n        /*\n         * onFailure\n         * Bad media description\n         */\n        function(e) {\n          self.logger.error(e);\n          request.reply(488);\n        }\n      );\n    }\n  },\n\n  sendReinvite: function(options) {\n    options = options || {};\n\n    var\n      self = this,\n       extraHeaders = (options.extraHeaders || []).slice(),\n       eventHandlers = options.eventHandlers || {},\n       mangle = options.mangle || null;\n\n    if (eventHandlers.succeeded) {\n      this.reinviteSucceeded = eventHandlers.succeeded;\n    } else {\n      this.reinviteSucceeded = function(){\n        SIP.Timers.clearTimeout(self.timers.ackTimer);\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.status = C.STATUS_CONFIRMED;\n      };\n    }\n    if (eventHandlers.failed) {\n      this.reinviteFailed = eventHandlers.failed;\n    } else {\n      this.reinviteFailed = function(){};\n    }\n\n    extraHeaders.push('Contact: ' + this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n    extraHeaders.push('Content-Type: application/sdp');\n\n    this.receiveResponse = this.receiveReinviteResponse;\n    //REVISIT\n    this.mediaHandler.getDescription(\n      function(body){\n        if (mangle) {\n          body = mangle(body);\n        }\n\n        self.dialog.sendRequest(self, SIP.C.INVITE, {\n          extraHeaders: extraHeaders,\n          body: body\n        });\n      },\n      function() {\n        if (self.isReadyToReinvite()) {\n          self.onReadyToReinvite();\n        }\n        self.reinviteFailed();\n      },\n      self.mediaHint\n    );\n  },\n\n  receiveRequest: function (request) {\n    switch (request.method) {\n      case SIP.C.BYE:\n        request.reply(200);\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.emit('bye', request);\n          this.terminated(request, SIP.C.causes.BYE);\n        }\n        break;\n      case SIP.C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.logger.log('re-INVITE received');\n          // Switch these two lines to try re-INVITEs:\n          //this.receiveReinvite(request);\n          request.reply(488, null, ['Warning: 399 sipjs \"Cannot update media description\"']);\n        }\n        break;\n      case SIP.C.INFO:\n        if(this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK) {\n          var body, tone, duration,\n              contentType = request.getHeader('content-type'),\n              reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n              reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n          if (contentType) {\n            if (contentType.match(/^application\\/dtmf-relay/i)) {\n              if (request.body) {\n                body = request.body.split('\\r\\n', 2);\n                if (body.length === 2) {\n                  if (reg_tone.test(body[0])) {\n                    tone = body[0].replace(reg_tone,\"$2\");\n                  }\n                  if (reg_duration.test(body[1])) {\n                    duration = parseInt(body[1].replace(reg_duration,\"$2\"), 10);\n                  }\n                }\n              }\n\n              new DTMF(this, tone, {duration: duration}).init_incoming(request);\n            } else {\n              request.reply(415, null, [\"Accept: application/dtmf-relay\"]);\n            }\n          }\n        }\n        break;\n      case SIP.C.REFER:\n        if(this.status ===  C.STATUS_CONFIRMED) {\n          this.logger.log('REFER received');\n          request.reply(202, 'Accepted');\n          var\n            hasReferListener = this.checkListener('refer'),\n            notifyBody = hasReferListener ?\n              'SIP/2.0 100 Trying' :\n              // RFC 3515.2.4.2: 'the UA MAY decline the request.'\n              'SIP/2.0 603 Declined'\n          ;\n\n          this.sendRequest(SIP.C.NOTIFY, {\n            extraHeaders:[\n              'Event: refer',\n              'Subscription-State: terminated',\n              'Content-Type: message/sipfrag'\n            ],\n            body: notifyBody,\n            receiveResponse: function() {}\n          });\n\n          if (hasReferListener) {\n            this.emit('refer', request);\n          }\n        }\n        break;\n    }\n  },\n\n  /**\n   * Reception of Response for in-dialog INVITE\n   * @private\n   */\n  receiveReinviteResponse: function(response) {\n    var self = this,\n        contentType = response.getHeader('Content-Type');\n\n    if (this.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    switch(true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        this.status = C.STATUS_CONFIRMED;\n\n        this.sendRequest(SIP.C.ACK,{cseq:response.cseq});\n\n        if(!response.body) {\n          this.reinviteFailed();\n          break;\n        } else if (contentType !== 'application/sdp') {\n          this.reinviteFailed();\n          break;\n        }\n\n        //REVISIT\n        this.mediaHandler.setDescription(\n          response.body,\n          /*\n           * onSuccess\n           * SDP Answer fits with Offer.\n           */\n          function() {\n            self.reinviteSucceeded();\n          },\n          /*\n           * onFailure\n           * SDP Answer does not fit the Offer.\n           */\n          function() {\n            self.reinviteFailed();\n          }\n        );\n        break;\n      default:\n        this.reinviteFailed();\n    }\n  },\n\n  acceptAndTerminate: function(response, status_code, reason_phrase) {\n    var extraHeaders = [];\n\n    if (status_code) {\n      reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n      extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if (this.dialog || this.createDialog(response, 'UAC')) {\n      this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n      this.sendRequest(SIP.C.BYE, {\n        extraHeaders: extraHeaders\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * RFC3261 13.3.1.4\n   * Response retransmissions cannot be accomplished by transaction layer\n   *  since it is destroyed when receiving the first 2xx answer\n   */\n  setInvite2xxTimer: function(request, body) {\n    var self = this,\n        timeout = SIP.Timers.T1;\n\n    this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {\n      if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n        return;\n      }\n\n      self.logger.log('no ACK received, attempting to retransmit OK');\n\n      request.reply(200, null, ['Contact: ' + self.contact], body);\n\n      timeout = Math.min(timeout * 2, SIP.Timers.T2);\n\n      self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);\n    }, timeout);\n  },\n\n  /**\n   * RFC3261 14.2\n   * If a UAS generates a 2xx response and never receives an ACK,\n   *  it SHOULD generate a BYE to terminate the dialog.\n   */\n  setACKTimer: function() {\n    var self = this;\n\n    this.timers.ackTimer = SIP.Timers.setTimeout(function() {\n      if(self.status === C.STATUS_WAITING_FOR_ACK) {\n        self.logger.log('no ACK received for an extended period of time, terminating the call');\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.sendRequest(SIP.C.BYE);\n        self.terminated(null, SIP.C.causes.NO_ACK);\n      }\n    }, SIP.Timers.TIMER_H);\n  },\n\n  /*\n   * @private\n   */\n  onReadyToReinvite: function() {\n    var action = this.pending_actions.shift();\n\n    if (!action || !this[action.name]) {\n      return;\n    }\n\n    this[action.name]();\n  },\n\n  onTransportError: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.CONNECTION_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  },\n\n  onDialogError: function(response) {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(response, SIP.C.causes.DIALOG_ERROR);\n    }\n  },\n\n  /**\n   * @private\n   */\n  onhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;\n    this.emit('hold', { originator: originator });\n  },\n\n  /**\n   * @private\n   */\n  onunhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;\n    this.emit('unhold', { originator: originator });\n  },\n\n  /*\n   * @private\n   */\n  onmute: function(options) {\n    this.emit('muted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  /*\n   * @private\n   */\n  onunmute: function(options) {\n    this.emit('unmuted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  rejected: function(response, cause) {\n    this.close();\n    return this.emit('rejected',\n      response || null,\n      cause\n    );\n  },\n\n  canceled: function() {\n    this.close();\n    return this.emit('cancel');\n  },\n\n  accepted: function(response, cause) {\n    cause = cause || (response && SIP.C.REASON_PHRASE[response.status_code]) || '';\n\n    this.startTime = new Date();\n\n    return this.emit('accepted', response, cause);\n  },\n\n  terminated: function(message, cause) {\n    this.endTime = new Date();\n\n    this.close();\n    return this.emit('terminated', {\n      message: message || null,\n      cause: cause || null\n    });\n  },\n\n  connecting: function(request) {\n    return this.emit('connecting', { request: request });\n  }\n};\n\nSession.C = C;\nSIP.Session = Session;\n\n\nInviteServerContext = function(ua, request) {\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    contentDisp = request.parseHeader('Content-Disposition');\n\n  // Check body and content type\n  if ((!contentDisp && contentType !== 'application/sdp') || (contentDisp && contentDisp.type === 'render')) {\n    this.renderbody = request.body;\n    this.rendertype = contentType;\n  } else if (contentType !== 'application/sdp' && (contentDisp && contentDisp.type === 'session')) {\n    request.reply(415);\n    //TODO: instead of 415, pass off to the media handler, who can then decide if we can use it\n    return;\n  }\n\n  //TODO: move this into media handler\n  SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n  SIP.Hacks.AllBrowsers.maskDtls(request);\n\n  SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  this.receiveNonInviteResponse = function () {}; // intentional no-op\n\n  this.logger = ua.getLogger('sip.inviteservercontext', this.id);\n\n  //Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  //Get the Expires header value if exists\n  if(request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  //Set 100rel if necessary\n  function set100rel(h,c) {\n    if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {\n      self.rel100 = c;\n    }\n  }\n  set100rel('require', SIP.C.supported.REQUIRED);\n  set100rel('supported', SIP.C.supported.SUPPORTED);\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = SIP.Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if(!this.createDialog(request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: {\"optional\": [{'DtlsSrtpKeyAgreement': 'true'}]}\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  function fireNewSession() {\n    var options = {extraHeaders: ['Contact: ' + self.contact]};\n\n    if (self.rel100 !== SIP.C.supported.REQUIRED) {\n      self.progress(options);\n    }\n    self.status = C.STATUS_WAITING_FOR_ANSWER;\n\n    // Set userNoAnswerTimer\n    self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function() {\n      request.reply(408);\n      self.failed(request, SIP.C.causes.NO_ANSWER);\n    }, self.ua.configuration.noAnswerTimeout);\n\n    /* Set expiresTimer\n     * RFC3261 13.3.1\n     */\n    if (expires) {\n      self.timers.expiresTimer = SIP.Timers.setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          self.failed(request, SIP.C.causes.EXPIRES);\n        }\n      }, expires);\n    }\n\n    self.emit('invite',request);\n  }\n\n  if (!request.body || this.renderbody) {\n    SIP.Timers.setTimeout(fireNewSession, 0);\n  } else {\n    this.hasOffer = true;\n    this.mediaHandler.setDescription(\n      request.body,\n      /*\n       * onSuccess\n       * SDP Offer is valid. Fire UA newRTCSession\n       */\n      fireNewSession,\n      /*\n       * onFailure\n       * Bad media description\n       */\n      function(e) {\n        self.logger.warn('invalid SDP');\n        self.logger.warn(e);\n        request.reply(488);\n      }\n    );\n  }\n};\n\nInviteServerContext.prototype = {\n  reject: function(options) {\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('rejecting RTCSession');\n\n    SIP.ServerContext.prototype.reject.apply(this, [options]);\n    return this.terminated();\n  },\n\n  terminate: function(options) {\n    options = options || {};\n\n    var\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    dialog,\n    self = this;\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK &&\n       this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      dialog = this.dialog;\n\n      this.receiveRequest = function(request) {\n        if (request.method === SIP.C.ACK) {\n          this.request(SIP.C.BYE, {\n            extraHeaders: extraHeaders,\n            body: body\n          });\n          dialog.terminate();\n        }\n      };\n\n      this.request.server_transaction.on('stateChanged', function(){\n        if (this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n          this.request = new SIP.OutgoingRequest(\n            SIP.C.BYE,\n            this.dialog.remote_target,\n            this.ua,\n            {\n              'cseq': this.dialog.local_seqnum+=1,\n              'call_id': this.dialog.id.call_id,\n              'from_uri': this.dialog.local_uri,\n              'from_tag': this.dialog.id.local_tag,\n              'to_uri': this.dialog.remote_uri,\n              'to_tag': this.dialog.id.remote_tag,\n              'route_set': this.dialog.route_set\n            },\n            extraHeaders,\n            body\n          );\n\n          new SIP.RequestSender(\n            {\n              request: this.request,\n              onRequestTimeout: function() {\n                self.onRequestTimeout();\n              },\n              onTransportError: function() {\n                self.onTransportError();\n              },\n              receiveResponse: function() {\n                return;\n              }\n            },\n            this.ua\n          ).send();\n          dialog.terminate();\n        }\n      });\n\n      this.emit('bye', this.request);\n      this.terminated();\n\n      // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n      this.dialog = dialog;\n\n      // Restore the dialog into 'ua' so the ACK can reach 'this' session\n      this.ua.dialogs[dialog.id.toString()] = dialog;\n\n    } else if (this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.reject(options);\n    }\n\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  progress: function (options) {\n    options = options || {};\n    var\n      statusCode = options.statusCode || 180,\n      reasonPhrase = options.reasonPhrase,\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body,\n      response;\n\n    if (statusCode < 100 || statusCode > 199) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    function do100rel() {\n      statusCode = options.statusCode || 183;\n\n      // Set status and add extra headers\n      this.status = C.STATUS_WAITING_FOR_PRACK;\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Require: 100rel');\n      extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));\n\n      // Save media hint for later (referred sessions)\n      this.mediaHint = options.media;\n\n      // Get the session description to add to preaccept with\n      this.mediaHandler.getDescription(\n        // Success\n        function succ(body) {\n          if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n            return;\n          }\n\n          this.early_sdp = body;\n          this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;\n\n          // Retransmit until we get a response or we time out (see prackTimer below)\n          var timeout = SIP.Timers.T1;\n          this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {\n            this.request.reply(statusCode, null, extraHeaders, body);\n            timeout *= 2;\n            this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);\n          }.bind(this), timeout);\n\n          // Timeout and reject INVITE if no response\n          this.timers.prackTimer = SIP.Timers.setTimeout(function () {\n            if (this.status !== C.STATUS_WAITING_FOR_PRACK) {\n              return;\n            }\n\n            this.logger.log('no PRACK received, rejecting the call');\n            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n            this.request.reply(504);\n            this.terminated(null, SIP.C.causes.NO_PRACK);\n          }.bind(this), SIP.Timers.T1 * 64);\n\n          // Send the initial response\n          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n          this.emit('progress', response, reasonPhrase);\n        }.bind(this),\n\n        // Failure\n        function fail() {\n          this.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        }.bind(this),\n\n        // Media hint:\n        options.media);\n    } // end do100rel\n\n    function normalReply() {\n      response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n      this.emit('progress', response, reasonPhrase);\n    }\n\n    if (options.statusCode !== 100 &&\n        (this.rel100 === SIP.C.supported.REQUIRED ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {\n      do100rel.apply(this);\n    } else {\n      normalReply.apply(this);\n    }\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  accept: function(options) {\n    options = options || {};\n    options = SIP.Utils.desugarSessionOptions(options);\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    // commented out now-unused hold-related variables for jshint. See below. JMF 2014-1-21\n    var\n      //idx, length, hasAudio, hasVideo,\n      self = this,\n      request = this.request,\n      extraHeaders = (options.extraHeaders || []).slice(),\n    //mediaStream = options.mediaStream || null,\n      sdpCreationSucceeded = function(body) {\n        var\n          response,\n          // run for reply success callback\n          replySucceeded = function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n\n            self.setInvite2xxTimer(request, body);\n            self.setACKTimer();\n          },\n\n          // run for reply failure callback\n          replyFailed = function() {\n            self.failed(null, SIP.C.causes.CONNECTION_ERROR);\n          };\n\n        // Chrome might call onaddstream before accept() is called, which means\n        // mediaHandler.render() was called without a renderHint, so we need to\n        // re-render now that mediaHint.render has been set.\n        //\n        // Chrome seems to be in the right regarding this, see\n        // http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-onaddstream\n        self.mediaHandler.render();\n\n        extraHeaders.push('Contact: ' + self.contact);\n\n        if(!self.hasOffer) {\n          self.hasOffer = true;\n        } else {\n          self.hasAnswer = true;\n        }\n        response = request.reply(200, null, extraHeaders,\n                      body,\n                      replySucceeded,\n                      replyFailed\n                     );\n        if (self.status !== C.STATUS_TERMINATED) { // Didn't fail\n          self.accepted(response, SIP.C.REASON_PHRASE[200]);\n        }\n      },\n\n      sdpCreationFailed = function() {\n        if (self.status === C.STATUS_TERMINATED) {\n          return;\n        }\n        // TODO - fail out on error\n        //response = request.reply(480);\n        //self.failed(response, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n        self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n      };\n\n    // Check Session Status\n    if (this.status === C.STATUS_WAITING_FOR_PRACK) {\n      this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;\n      return this;\n    } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {\n      this.status = C.STATUS_ANSWERED;\n    } else if (this.status !== C.STATUS_EARLY_MEDIA) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if(!this.createDialog(request, 'UAS')) {\n      request.reply(500, 'Missing Contact header field');\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);\n\n    // this hold-related code breaks FF accepting new calls - JMF 2014-1-21\n    /*\n    length = this.getRemoteStreams().length;\n\n    for (idx = 0; idx < length; idx++) {\n      if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {\n        hasVideo = true;\n      }\n      if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {\n        hasAudio = true;\n      }\n    }\n\n    if (!hasAudio && this.mediaConstraints.audio === true) {\n      this.mediaConstraints.audio = false;\n      if (mediaStream) {\n        length = mediaStream.getAudioTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);\n        }\n      }\n    }\n\n    if (!hasVideo && this.mediaConstraints.video === true) {\n      this.mediaConstraints.video = false;\n      if (mediaStream) {\n        length = mediaStream.getVideoTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);\n        }\n      }\n    }\n    */\n\n    if (this.status === C.STATUS_EARLY_MEDIA) {\n      sdpCreationSucceeded();\n    } else {\n      this.mediaHandler.getDescription(\n        sdpCreationSucceeded,\n        sdpCreationFailed,\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n\n    // ISC RECEIVE REQUEST\n\n    function confirmSession() {\n      var contentType;\n\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      // TODO - this logic assumes Content-Disposition defaults\n      contentType = request.getHeader('Content-Type');\n      if (contentType !== 'application/sdp') {\n        this.renderbody = request.body;\n        this.rendertype = contentType;\n      }\n    }\n\n    switch(request.method) {\n    case SIP.C.CANCEL:\n      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n       * was in progress and that the UAC MAY continue with the session established by\n       * any 2xx response, or MAY terminate with BYE. SIP does continue with the\n       * established session. So the CANCEL is processed only if the session is not yet\n       * established.\n       */\n\n      /*\n       * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the\n       *request opening the session.\n       */\n      if(this.status === C.STATUS_WAITING_FOR_ANSWER ||\n         this.status === C.STATUS_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_EARLY_MEDIA ||\n         this.status === C.STATUS_ANSWERED) {\n\n        this.status = C.STATUS_CANCELED;\n        this.request.reply(487);\n        this.canceled(request);\n        this.rejected(request, SIP.C.causes.CANCELED);\n        this.failed(request, SIP.C.causes.CANCELED);\n      }\n      break;\n    case SIP.C.ACK:\n      if(this.status === C.STATUS_WAITING_FOR_ACK) {\n        if (!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            // ACK contains answer to an INVITE w/o SDP negotiation\n            SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n            SIP.Hacks.AllBrowsers.maskDtls(request);\n\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              confirmSession.bind(this),\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer.  Terminate the call.\n               */\n              function (e) {\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else if (this.early_sdp) {\n            confirmSession.apply(this);\n          } else {\n            //TODO: Pass to mediahandler\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          confirmSession.apply(this);\n        }\n      }\n      break;\n    case SIP.C.PRACK:\n      if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n        //localMedia = session.mediaHandler.localMedia;\n        if(!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function() {\n                SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n                SIP.Timers.clearTimeout(this.timers.prackTimer);\n                request.reply(200);\n                if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                  this.status = C.STATUS_EARLY_MEDIA;\n                  this.accept();\n                }\n                this.status = C.STATUS_EARLY_MEDIA;\n                //REVISIT\n                this.mute();\n              }.bind(this),\n              function (e) {\n                //TODO: Send to media handler\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else {\n            this.terminate({\n              statusCode: '488',\n              reasonPhrase: 'Bad Media Description'\n            });\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n          SIP.Timers.clearTimeout(this.timers.prackTimer);\n          request.reply(200);\n\n          if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.status = C.STATUS_EARLY_MEDIA;\n            this.accept();\n          }\n          this.status = C.STATUS_EARLY_MEDIA;\n          //REVISIT\n          this.mute();\n        }\n      } else if(this.status === C.STATUS_EARLY_MEDIA) {\n        request.reply(200);\n      }\n      break;\n    default:\n      Session.prototype.receiveRequest.apply(this, [request]);\n      break;\n    }\n  }\n};\n\nSIP.InviteServerContext = InviteServerContext;\n\nInviteClientContext = function(ua, target, options) {\n  options = options || {};\n  var requestParams, iceServers,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    isMediaSupported = ua.configuration.mediaHandlerFactory.isSupported;\n\n  // Check WebRTC support\n  if (isMediaSupported && !isMediaSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.RTCConstraints = options.RTCConstraints || {};\n  this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // Custom data to be sent either in INVITE or in ACK\n  this.renderbody = options.renderbody || null;\n  this.rendertype = options.rendertype || 'text/plain';\n\n  requestParams = {from_tag: this.from_tag};\n\n  /* Do not add ;ob in initial forming dialog requests if the registration over\n   *  the current connection got a GRUU URI.\n   */\n  this.contact = ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu\n  });\n\n  if (this.anonymous) {\n    requestParams.from_displayName = 'Anonymous';\n    requestParams.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n  if (!this.inviteWithoutSdp) {\n    extraHeaders.push('Content-Type: application/sdp');\n  } else if (this.renderbody) {\n    extraHeaders.push('Content-Type: ' + this.rendertype);\n    extraHeaders.push('Content-Disposition: render;handling=optional');\n  }\n\n  if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: 100rel');\n  }\n\n  options.extraHeaders = extraHeaders;\n  options.params = requestParams;\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new SIP.Exceptions.InvalidStateError(this.status);\n  }\n\n  // Session parameter initialization\n  this.from_tag = SIP.Utils.newTag();\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n  this.received_100 = false;\n\n  this.method = SIP.C.INVITE;\n\n  this.receiveNonInviteResponse = this.receiveResponse;\n  this.receiveResponse = this.receiveInviteResponse;\n\n  this.logger = ua.getLogger('sip.inviteclientcontext');\n\n  if (stunServers) {\n    iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid stunServers: '+ stunServers);\n    } else {\n      this.stunServers = iceServers;\n    }\n  }\n\n  if (turnServers) {\n    iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid turnServers: '+ turnServers);\n    } else {\n      this.turnServers = iceServers;\n    }\n  }\n\n  ua.applicants[this] = this;\n\n  this.id = this.request.call_id + this.from_tag;\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: this.RTCConstraints,\n    stunServers: this.stunServers,\n    turnServers: this.turnServers\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n};\n\nInviteClientContext.prototype = {\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  invite: function (options) {\n    var self = this;\n    options = options || {};\n\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    //Save the session into the ua sessions collection.\n    //Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n    this.ua.sessions[this.id] = this;\n\n    //Note: due to the way Firefox handles gUM calls, it is recommended to make the gUM call at the app level\n    // and hand sip.js a stream as the mediaHint\n    if (this.inviteWithoutSdp) {\n      //just send an invite with no sdp...\n      this.request.body = self.renderbody;\n      this.status = C.STATUS_INVITE_SENT;\n      this.send();\n    } else {\n      this.mediaHandler.getDescription(\n        function onSuccess(offer) {\n          if (self.isCanceled || self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          self.hasOffer = true;\n          self.request.body = offer;\n          self.status = C.STATUS_INVITE_SENT;\n          self.send();\n        },\n        function onFailure() {\n          if (self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          // TODO...fail out\n          //self.failed(null, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n          //self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        },\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveInviteResponse: function(response) {\n    var cause, //localMedia,\n      session = this,\n      id = response.call_id + response.from_tag + response.to_tag,\n      extraHeaders = [],\n      options = {};\n\n    if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {\n      return;\n    }\n\n    if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {\n      if (id !== this.dialog.id.toString() ) {\n        if (!this.createDialog(response, 'UAC', true)) {\n          return;\n        }\n        this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,\n                                          {\n                                            body: SIP.Utils.generateFakeSDP(response.body)\n                                          });\n        this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);\n\n        /* NOTE: This fails because the forking proxy does not recognize that an unanswerable\n         * leg (due to peerConnection limitations) has been answered first. If your forking\n         * proxy does not hang up all unanswered branches on the first branch answered, remove this.\n         */\n        if(this.status !== C.STATUS_CONFIRMED) {\n          this.failed(response, SIP.C.causes.WEBRTC_ERROR);\n        }\n        return;\n      } else if (this.status === C.STATUS_CONFIRMED) {\n        this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n        return;\n      } else if (!this.hasAnswer) {\n        // invite w/o sdp is waiting for callback\n        //an invite with sdp must go on, and hasAnswer is true\n        return;\n      }\n    }\n\n    if (this.dialog && response.status_code < 200) {\n      /*\n        Early media has been set up with at least one other different branch,\n        but a final 2xx response hasn't been received\n      */\n      if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {\n        return;\n      }\n\n      extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n      this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n\n      this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n        extraHeaders: extraHeaders,\n        body: SIP.Utils.generateFakeSDP(response.body)\n      });\n      return;\n    }\n\n    // Proceed to cancellation if the user requested.\n    if(this.isCanceled) {\n      if(response.status_code >= 100 && response.status_code < 200) {\n        this.request.cancel(this.cancelReason);\n        this.canceled(null);\n      } else if(response.status_code >= 200 && response.status_code < 299) {\n        this.acceptAndTerminate(response);\n        this.emit('bye', this.request);\n      }\n      return;\n    }\n\n    switch(true) {\n      case /^100$/.test(response.status_code):\n        this.received_100 = true;\n        break;\n      case (/^1[0-9]{2}$/.test(response.status_code)):\n        // Do nothing with 1xx responses without To tag.\n        if(!response.to_tag) {\n          this.logger.warn('1xx response received without to tag');\n          break;\n        }\n\n        // Create Early Dialog if 1XX comes with contact\n        if(response.hasHeader('contact')) {\n          // An error on dialog creation will fire 'failed' event\n          if (!this.createDialog(response, 'UAC', true)) {\n            break;\n          }\n        }\n\n        this.status = C.STATUS_1XX_RECEIVED;\n\n        if(response.hasHeader('require') &&\n           response.getHeader('require').indexOf('100rel') !== -1) {\n\n          // Do nothing if this.dialog is already confirmed\n          if (this.dialog || !this.earlyDialogs[id]) {\n            break;\n          }\n\n          if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n              (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n            return;\n          }\n\n          SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n          SIP.Hacks.AllBrowsers.maskDtls(response);\n\n          if (!response.body) {\n            extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n              extraHeaders: extraHeaders\n            });\n            this.emit('progress', response);\n\n          } else if (this.hasOffer) {\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function () {\n                extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                session.dialog.pracked.push(response.getHeader('rseq'));\n\n                session.sendRequest(SIP.C.PRACK, {\n                  extraHeaders: extraHeaders,\n                  receiveResponse: function() {}\n                });\n                session.status = C.STATUS_EARLY_MEDIA;\n                session.mute();\n                session.emit('progress', response);\n                /*\n                if (session.status === C.STATUS_EARLY_MEDIA) {\n                  localMedia = session.mediaHandler.localMedia;\n                  if (localMedia.getAudioTracks().length > 0) {\n                    localMedia.getAudioTracks()[0].enabled = false;\n                  }\n                  if (localMedia.getVideoTracks().length > 0) {\n                    localMedia.getVideoTracks()[0].enabled = false;\n                  }\n                }*/\n              },\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer. Accept the call and Terminate.\n               */\n              function(e) {\n                session.logger.warn(e);\n                session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }\n            );\n          } else {\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.earlyDialogs[id].mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    extraHeaders.push('Content-Type: application/sdp');\n                    extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                    session.earlyDialogs[id].sendRequest(session, SIP.C.PRACK, {\n                      extraHeaders: extraHeaders,\n                      body: sdp\n                    });\n                    session.status = C.STATUS_EARLY_MEDIA;\n                    session.emit('progress', response);\n                  },\n                  function onFailure() {\n                    session.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n                    if (session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n                    // TODO - fail out on error\n                    // session.failed(gum error);\n                    session.failed(null, SIP.C.causes.WEBRTC_ERROR);\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.earlyDialogs[id].pracked.splice(session.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')), 1);\n                // Could not set remote description\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n              }\n            );\n          }\n        } else {\n          this.emit('progress', response);\n        }\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        var cseq = this.request.cseq + ' ' + this.request.method;\n        if (cseq !== response.getHeader('cseq')) {\n          break;\n        }\n\n        if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {\n          this.status = C.STATUS_CONFIRMED;\n          this.unmute();\n          /*localMedia = this.mediaHandler.localMedia;\n          if (localMedia.getAudioTracks().length > 0) {\n            localMedia.getAudioTracks()[0].enabled = true;\n          }\n          if (localMedia.getVideoTracks().length > 0) {\n            localMedia.getVideoTracks()[0].enabled = true;\n          }*/\n          options = {};\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + this.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          options.cseq = response.cseq;\n          this.sendRequest(SIP.C.ACK, options);\n          this.accepted(response);\n          break;\n        }\n        // Do nothing if this.dialog is already confirmed\n        if (this.dialog) {\n          break;\n        }\n\n        SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n        SIP.Hacks.AllBrowsers.maskDtls(response);\n\n        // This is an invite without sdp\n        if (!this.hasOffer) {\n          if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {\n            //REVISIT\n            this.hasOffer = true;\n            this.hasAnswer = true;\n            this.mediaHandler = this.earlyDialogs[id].mediaHandler;\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.status = C.STATUS_CONFIRMED;\n            this.sendRequest(SIP.C.ACK, {cseq:response.cseq});\n\n            this.unmute();\n            /*\n            localMedia = session.mediaHandler.localMedia;\n            if (localMedia.getAudioTracks().length > 0) {\n              localMedia.getAudioTracks()[0].enabled = true;\n            }\n            if (localMedia.getVideoTracks().length > 0) {\n              localMedia.getVideoTracks()[0].enabled = true;\n            }*/\n            this.accepted(response);\n          } else {\n            if(!response.body) {\n              this.acceptAndTerminate(response, 400, 'Missing session description');\n              this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              break;\n            }\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasOffer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    //var localMedia;\n                    if(session.isCanceled || session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n\n                    sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);\n\n                    session.status = C.STATUS_CONFIRMED;\n                    session.hasAnswer = true;\n\n                    session.unmute();\n                    /*localMedia = session.mediaHandler.localMedia;\n                    if (localMedia.getAudioTracks().length > 0) {\n                      localMedia.getAudioTracks()[0].enabled = true;\n                    }\n                    if (localMedia.getVideoTracks().length > 0) {\n                      localMedia.getVideoTracks()[0].enabled = true;\n                    }*/\n                    session.sendRequest(SIP.C.ACK,{\n                      body: sdp,\n                      extraHeaders:['Content-Type: application/sdp'],\n                      cseq:response.cseq\n                    });\n                    session.accepted(response);\n                  },\n                  function onFailure() {\n                    // TODO do something here\n                    session.logger.warn(\"there was a problem\");\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n                response.reply(488);\n              }\n            );\n          }\n        } else if (this.hasAnswer){\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + session.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          this.sendRequest(SIP.C.ACK, options);\n        } else {\n          if(!response.body) {\n            this.acceptAndTerminate(response, 400, 'Missing session description');\n            this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            break;\n          }\n          if (!this.createDialog(response, 'UAC')) {\n            break;\n          }\n          this.hasAnswer = true;\n          this.mediaHandler.setDescription(\n            response.body,\n            /*\n             * onSuccess\n             * SDP Answer fits with Offer. Media will start\n             */\n            function() {\n              var options = {};//,localMedia;\n              session.status = C.STATUS_CONFIRMED;\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              if (session.renderbody) {\n                extraHeaders.push('Content-Type: ' + session.rendertype);\n                options.extraHeaders = extraHeaders;\n                options.body = session.renderbody;\n              }\n              options.cseq = response.cseq;\n              session.sendRequest(SIP.C.ACK, options);\n              session.accepted(response);\n            },\n            /*\n             * onFailure\n             * SDP Answer does not fit the Offer. Accept the call and Terminate.\n             */\n            function(e) {\n              session.logger.warn(e);\n              session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n              session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            }\n          );\n        }\n        break;\n      default:\n        cause = SIP.Utils.sipErrorCause(response.status_code);\n        this.failed(response, cause);\n        this.rejected(response, cause);\n    }\n  },\n\n  cancel: function(options) {\n    options = options || {};\n\n    var\n    statusCode = options.status_code,\n    reasonPhrase = options.reasonPhrase,\n    cancel_reason;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('canceling RTCSession');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid status_code: '+ statusCode);\n    } else if (statusCode) {\n      reasonPhrase = reasonPhrase || SIP.C.REASON_PHRASE[statusCode] || '';\n      cancel_reason = 'SIP ;cause=' + statusCode + ' ;text=\"' + reasonPhrase + '\"';\n    }\n\n    // Check Session Status\n    if (this.status === C.STATUS_NULL ||\n        (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {\n      this.isCanceled = true;\n      this.cancelReason = cancel_reason;\n    } else if (this.status === C.STATUS_INVITE_SENT ||\n               this.status === C.STATUS_1XX_RECEIVED ||\n               this.status === C.STATUS_EARLY_MEDIA) {\n      this.request.cancel(cancel_reason);\n    }\n\n    return this.canceled();\n  },\n\n  terminate: function(options) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.cancel(options);\n    }\n\n    return this.terminated();\n  },\n\n  receiveRequest: function(request) {\n    // ICC RECEIVE REQUEST\n\n    // Reject CANCELs\n    if (request.method === SIP.C.CANCEL) {\n      // TODO; make this a switch when it gets added\n    }\n\n    if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      this.accepted();\n    }\n\n    return Session.prototype.receiveRequest.apply(this, [request]);\n  }\n};\n\nSIP.InviteClientContext = InviteClientContext;\n\n};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP Subscription.\n */\nmodule.exports = function (SIP) {\nSIP.Subscription = function (ua, target, event, options) {\n  var events;\n\n  options = options || {};\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  events = ['notify'];\n  this.id = null;\n  this.state = 'init';\n\n  if (!event) {\n    throw new TypeError('Event necessary to create a subscription.');\n  } else {\n    //TODO: check for valid events here probably make a list in SIP.C; or leave it up to app to check?\n    //The check may need to/should probably occur on the other side,\n    this.event = event;\n  }\n\n  if(typeof options.expires !== 'number'){\n    ua.logger.warn('expires must be a number. Using default of 3600.');\n    this.expires = 3600;\n  } else {\n    this.expires = options.expires;\n  }\n\n  options.extraHeaders.push('Event: ' + this.event);\n  options.extraHeaders.push('Expires: ' + this.expires);\n\n  if (options.body) {\n    this.body = options.body;\n  }\n\n  this.contact = ua.contact.toString();\n\n  options.extraHeaders.push('Contact: '+ this.contact);\n  options.extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);\n\n  this.logger = ua.getLogger('sip.subscription');\n\n  this.dialog = null;\n  this.timers = {N: null, sub_duration: null};\n  this.errorCodes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n\n  this.initMoreEvents(events);\n};\n\nSIP.Subscription.prototype = {\n  subscribe: function() {\n    var sub = this;\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n\n    this.state = 'notify_wait';\n\n    return this;\n  },\n\n  receiveResponse: function(response) {\n    var expires, sub = this,\n        cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n    if (this.errorCodes.indexOf(response.status_code) !== -1) {\n      this.failed(response, null);\n    } else if (/^2[0-9]{2}$/.test(response.status_code)){\n      expires = response.getHeader('Expires');\n      SIP.Timers.clearTimeout(this.timers.N);\n\n      if (this.createConfirmedDialog(response,'UAC')) {\n        this.id = this.dialog.id.toString();\n        this.ua.subscriptions[this.id] = this;\n        this.emit('accepted', response, cause);\n        // UPDATE ROUTE SET TO BE BACKWARDS COMPATIBLE?\n      }\n\n      if (expires && expires <= this.expires) {\n        this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), expires * 1000);\n      } else {\n        if (!expires) {\n          this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n          this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);\n        } else {\n          this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');\n          this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);\n        }\n      }\n    } //Used to just ignore provisional responses; now ignores everything except errorCodes and 2xx\n  },\n\n  unsubscribe: function() {\n    var extraHeaders = [], sub = this;\n\n    this.state = 'terminated';\n\n    extraHeaders.push('Event: ' + this.event);\n    extraHeaders.push('Expires: 0');\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n\n    this.request = new SIP.OutgoingRequest(this.method, this.request.to.uri.toString(), this.ua, null, extraHeaders);\n\n    //MAYBE, may want to see state\n    this.receiveResponse = function(){};\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n  },\n\n  /**\n  * @private\n  */\n  timer_fire: function(){\n    if (this.state === 'terminated') {\n      this.close();\n    } else if (this.state === 'pending' || this.state === 'notify_wait') {\n      this.state = 'terminated';\n      this.close();\n    } else {\n      this.subscribe();\n    }\n  },\n\n  /**\n  * @private\n  */\n  close: function() {\n    if(this.state !== 'terminated') {\n      this.unsubscribe();\n    }\n\n    this.terminateDialog();\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    delete this.ua.subscriptions[this.id];\n  },\n\n  /**\n  * @private\n  */\n  createConfirmedDialog: function(message, type) {\n    var dialog;\n\n    this.terminateDialog();\n    dialog = new SIP.Dialog(this, message, type);\n\n    if(!dialog.error) {\n      this.dialog = dialog;\n      return true;\n    }\n    // Dialog not created due to an error\n    else {\n      return false;\n    }\n  },\n\n  /**\n  * @private\n  */\n  terminateDialog: function() {\n    if(this.dialog) {\n      delete this.ua.subscriptions[this.id];\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n  },\n\n  /**\n  * @private\n  */\n  receiveRequest: function(request) {\n    var sub_state, sub = this;\n\n    function setExpiresTimeout() {\n      if (sub_state.expires) {\n        sub_state.expires = Math.min(sub.expires,\n                                     Math.max(sub_state.expires, 0));\n        sub.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub),\n                                                    sub_state.expires * 1000);\n      }\n    }\n\n    if (!this.matchEvent(request)) { //checks event and subscription_state headers\n      request.reply(489);\n      return;\n    }\n\n    sub_state = request.parseHeader('Subscription-State');\n\n    request.reply(200, SIP.C.REASON_200);\n\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    this.emit('notify', {request: request});\n\n    switch (sub_state.state) {\n      case 'active':\n        this.state = 'active';\n        setExpiresTimeout();\n        break;\n      case 'pending':\n        if (this.state === 'notify_wait') {\n          setExpiresTimeout();\n        }\n        this.state = 'pending';\n        break;\n      case 'terminated':\n        if (sub_state.reason) {\n          this.logger.log('terminating subscription with reason '+ sub_state.reason);\n          switch (sub_state.reason) {\n            case 'deactivated':\n            case 'timeout':\n              this.subscribe();\n              return;\n            case 'probation':\n            case 'giveup':\n              if(sub_state.params && sub_state.params['retry-after']) {\n                this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);\n              } else {\n                this.subscribe();\n              }\n              return;\n            case 'rejected':\n            case 'noresource':\n            case 'invariant':\n              break;\n          }\n        }\n        this.close();\n        break;\n    }\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  /**\n  * @private\n  */\n  matchEvent: function(request) {\n    var event;\n\n    // Check mandatory header Event\n    if (!request.hasHeader('Event')) {\n      this.logger.warn('missing Event header');\n      return false;\n    }\n    // Check mandatory header Subscription-State\n    if (!request.hasHeader('Subscription-State')) {\n      this.logger.warn('missing Subscription-State header');\n      return false;\n    }\n\n    // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n    event = request.parseHeader('event').event;\n\n    if (this.event !== event) {\n      this.logger.warn('event match failed');\n      request.reply(481, 'Event Match Failed');\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]\n *        The MediaStreamManager to acquire/release streams from/to.\n *        If not provided, a default MediaStreamManager will be used.\n */\nmodule.exports = function (SIP) {\n\nvar MediaHandler = function(session, options) {\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed',\n    'iceGathering',\n    'iceCandidate',\n    'iceComplete',\n    'iceFailed',\n    'getDescription',\n    'setDescription',\n    'dataChannel',\n    'addStream'\n  ];\n  options = options || {};\n\n  this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);\n  this.session = session;\n  this.localMedia = null;\n  this.ready = true;\n  this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);\n  this.audioMuted = false;\n  this.videoMuted = false;\n\n  // old init() from here on\n  var idx, length, server,\n    self = this,\n    servers = [],\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    config = this.session.ua.configuration;\n  this.RTCConstraints = options.RTCConstraints || {};\n\n  if (!stunServers) {\n    stunServers = config.stunServers;\n  }\n\n  if(!turnServers) {\n    turnServers = config.turnServers;\n  }\n\n  /* Change 'url' to 'urls' whenever this issue is solved:\n   * https://code.google.com/p/webrtc/issues/detail?id=2096\n   */\n  [].concat(stunServers).forEach(function (server) {\n    servers.push({'url': server});\n  });\n\n  length = turnServers.length;\n  for (idx = 0; idx < length; idx++) {\n    server = turnServers[idx];\n    servers.push({\n      'url': server.urls,\n      'username': server.username,\n      'credential': server.password\n    });\n  }\n\n  this.peerConnection = new SIP.WebRTC.RTCPeerConnection({'iceServers': servers}, this.RTCConstraints);\n\n  this.peerConnection.onaddstream = function(e) {\n    self.logger.log('stream added: '+ e.stream.id);\n    self.render();\n    self.emit('addStream', e);\n  };\n\n  this.peerConnection.onremovestream = function(e) {\n    self.logger.log('stream removed: '+ e.stream.id);\n  };\n\n  this.peerConnection.onicecandidate = function(e) {\n    self.emit('iceCandidate', e);\n    if (e.candidate) {\n      self.logger.log('ICE candidate received: '+ (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n    } else if (self.onIceCompleted !== undefined) {\n      self.onIceCompleted(this);\n    } else {\n      self.callOnIceCompleted = true;\n    }\n  };\n\n  this.peerConnection.onicegatheringstatechange = function () {\n    self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);\n    if (this.iceGatheringState === 'gathering') {\n      self.emit('iceGathering', this);\n    }\n    if (this.iceGatheringState === 'complete') {\n      if (self.onIceCompleted !== undefined) {\n        self.onIceCompleted(this);\n      } else {\n        self.callOnIceCompleted = true;\n      }\n    }\n  };\n\n  this.peerConnection.oniceconnectionstatechange = function() {  //need e for commented out case\n    self.logger.log('ICE connection state changed to \"'+ this.iceConnectionState +'\"');\n\n    if (this.iceConnectionState === 'failed') {\n      self.emit('iceFailed', this);\n    }\n\n    //Bria state changes are always connected -> disconnected -> connected on accept, so session gets terminated\n    //normal calls switch from failed to connected in some cases, so checking for failed and terminated\n    /*if (this.iceConnectionState === 'failed') {\n      self.session.terminate({\n        cause: SIP.C.causes.RTP_TIMEOUT,\n        status_code: 200,\n        reason_phrase: SIP.C.causes.RTP_TIMEOUT\n      });\n    } else if (e.currentTarget.iceGatheringState === 'complete' && this.iceConnectionState !== 'closed') {\n      self.onIceCompleted(this);\n    }*/\n  };\n\n  this.peerConnection.onstatechange = function() {\n    self.logger.log('PeerConnection state changed to \"'+ this.readyState +'\"');\n  };\n\n  this.initEvents(events);\n\n  function selfEmit(mh, event) {\n    if (mh.mediaStreamManager.on &&\n        mh.mediaStreamManager.checkEvent &&\n        mh.mediaStreamManager.checkEvent(event)) {\n      mh.mediaStreamManager.on(event, function () {\n        mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));\n      });\n    }\n  }\n\n  selfEmit(this, 'userMediaRequest');\n  selfEmit(this, 'userMedia');\n  selfEmit(this, 'userMediaFailed');\n};\n\nMediaHandler.defaultFactory = function defaultFactory (session, options) {\n  return new MediaHandler(session, options);\n};\nMediaHandler.defaultFactory.isSupported = function () {\n  return SIP.WebRTC.isSupported();\n};\n\nMediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {\n// Functions the session can use\n  isReady: {writable: true, value: function isReady () {\n    return this.ready;\n  }},\n\n  close: {writable: true, value: function close () {\n    this.logger.log('closing PeerConnection');\n    // have to check signalingState since this.close() gets called multiple times\n    // TODO figure out why that happens\n    if(this.peerConnection && this.peerConnection.signalingState !== 'closed') {\n      this.peerConnection.close();\n\n      if(this.localMedia) {\n        this.mediaStreamManager.release(this.localMedia);\n      }\n    }\n  }},\n\n  /**\n   * @param {Function} onSuccess\n   * @param {Function} onFailure\n   * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]\n   *        the MediaStream (or the constraints describing it) to be used for the session\n   */\n  getDescription: {writable: true, value: function getDescription (onSuccess, onFailure, mediaHint) {\n    var self = this;\n    mediaHint = mediaHint || {};\n    if (mediaHint.dataChannel === true) {\n      mediaHint.dataChannel = {};\n    }\n    this.mediaHint = mediaHint;\n\n    /*\n     * 1. acquire stream (skip if MediaStream passed in)\n     * 2. addStream\n     * 3. createOffer/createAnswer\n     * 4. call onSuccess()\n     */\n\n    /* Last functions first, to quiet JSLint */\n    function streamAdditionSucceeded() {\n      if (self.hasOffer('remote')) {\n        self.peerConnection.ondatachannel = function (evt) {\n          self.dataChannel = evt.channel;\n          self.emit('dataChannel', self.dataChannel);\n        };\n      } else if (mediaHint.dataChannel &&\n                 self.peerConnection.createDataChannel) {\n        self.dataChannel = self.peerConnection.createDataChannel(\n          'sipjs',\n          mediaHint.dataChannel\n        );\n        self.emit('dataChannel', self.dataChannel);\n      }\n\n      self.render();\n      self.createOfferOrAnswer(onSuccess, onFailure, self.RTCConstraints);\n    }\n\n    function acquireSucceeded(stream) {\n      self.logger.log('acquired local media stream');\n      self.localMedia = stream;\n      self.session.connecting();\n      self.addStream(\n        stream,\n        streamAdditionSucceeded,\n        onFailure\n      );\n    }\n\n    if (self.localMedia) {\n      self.logger.log('already have local media');\n      streamAdditionSucceeded();\n      return;\n    }\n\n    self.logger.log('acquiring local media');\n    self.mediaStreamManager.acquire(\n      acquireSucceeded,\n      function acquireFailed(err) {\n        self.logger.error('unable to acquire stream');\n        self.logger.error(err);\n        self.session.connecting();\n        onFailure(err);\n      },\n      mediaHint\n    );\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} sdp\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {writable: true, value: function setDescription (sdp, onSuccess, onFailure) {\n    var rawDescription = {\n      type: this.hasOffer('local') ? 'answer' : 'offer',\n      sdp: sdp\n    };\n\n    this.emit('setDescription', rawDescription);\n\n    var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);\n    this.peerConnection.setRemoteDescription(description, onSuccess, onFailure);\n  }},\n\n// Functions the session can use, but only because it's convenient for the application\n  isMuted: {writable: true, value: function isMuted () {\n    return {\n      audio: this.audioMuted,\n      video: this.videoMuted\n    };\n  }},\n\n  mute: {writable: true, value: function mute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioMuted = false,\n        videoMuted = false;\n\n    if (options.audio && !this.audioMuted) {\n      audioMuted = true;\n      this.audioMuted = true;\n      this.toggleMuteAudio(true);\n    }\n\n    if (options.video && !this.videoMuted) {\n      videoMuted = true;\n      this.videoMuted = true;\n      this.toggleMuteVideo(true);\n    }\n\n    //REVISIT\n    if (audioMuted || videoMuted) {\n      return {\n        audio: audioMuted,\n        video: videoMuted\n      };\n      /*this.session.onmute({\n        audio: audioMuted,\n        video: videoMuted\n      });*/\n    }\n  }},\n\n  unmute: {writable: true, value: function unmute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioUnMuted = false,\n        videoUnMuted = false;\n\n    if (options.audio && this.audioMuted) {\n      audioUnMuted = true;\n      this.audioMuted = false;\n      this.toggleMuteAudio(false);\n    }\n\n    if (options.video && this.videoMuted) {\n      videoUnMuted = true;\n      this.videoMuted = false;\n      this.toggleMuteVideo(false);\n    }\n\n    //REVISIT\n    if (audioUnMuted || videoUnMuted) {\n      return {\n        audio: audioUnMuted,\n        video: videoUnMuted\n      };\n      /*this.session.onunmute({\n        audio: audioUnMuted,\n        video: videoUnMuted\n      });*/\n    }\n  }},\n\n  hold: {writable: true, value: function hold () {\n    this.toggleMuteAudio(true);\n    this.toggleMuteVideo(true);\n  }},\n\n  unhold: {writable: true, value: function unhold () {\n    if (!this.audioMuted) {\n      this.toggleMuteAudio(false);\n    }\n\n    if (!this.videoMuted) {\n      this.toggleMuteVideo(false);\n    }\n  }},\n\n// Functions the application can use, but not the session\n  getLocalStreams: {writable: true, value: function getLocalStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getLocalStreams returning []');\n      return [];\n    }\n    return (pc.getLocalStreams && pc.getLocalStreams()) ||\n      pc.localStreams || [];\n  }},\n\n  getRemoteStreams: {writable: true, value: function getRemoteStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getRemoteStreams returning []');\n      return [];\n    }\n    return(pc.getRemoteStreams && pc.getRemoteStreams()) ||\n      pc.remoteStreams || [];\n  }},\n\n  render: {writable: true, value: function render (renderHint) {\n    renderHint = renderHint || (this.mediaHint && this.mediaHint.render);\n    if (!renderHint) {\n      return false;\n    }\n    var streamGetters = {\n      local: 'getLocalStreams',\n      remote: 'getRemoteStreams'\n    };\n    Object.keys(streamGetters).forEach(function (loc) {\n      var streamGetter = streamGetters[loc];\n      var streams = this[streamGetter]();\n      if (streams.length) {\n        SIP.WebRTC.MediaStreamManager.render(streams[0], renderHint[loc]);\n      }\n    }.bind(this));\n  }},\n\n// Internal functions\n  hasOffer: {writable: true, value: function hasOffer (where) {\n    var offerState = 'have-' + where + '-offer';\n    return this.peerConnection.signalingState === offerState;\n    // TODO consider signalingStates with 'pranswer'?\n  }},\n\n  createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (onSuccess, onFailure, constraints) {\n    var self = this;\n    var methodName;\n\n    function readySuccess () {\n      var sdp = self.peerConnection.localDescription.sdp;\n\n      sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);\n      sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);\n      sdp = SIP.Hacks.Firefox.hasIncompatibleCLineWithSomeSIPEndpoints(sdp);\n\n      var sdpWrapper = {\n        type: methodName === 'createOffer' ? 'offer' : 'answer',\n        sdp: sdp\n      };\n\n      self.emit('getDescription', sdpWrapper);\n\n      self.ready = true;\n      onSuccess(sdpWrapper.sdp);\n    }\n\n    function onSetLocalDescriptionSuccess() {\n      if (self.peerConnection.iceGatheringState === 'complete' && (self.peerConnection.iceConnectionState === 'connected' || self.peerConnection.iceConnectionState === 'completed')) {\n        readySuccess();\n      } else {\n        self.onIceCompleted = function(pc) {\n          self.logger.log('ICE Gathering Completed');\n          self.onIceCompleted = undefined;\n          self.emit('iceComplete', pc);\n          readySuccess();\n        };\n        if (self.callOnIceCompleted) {\n          self.onIceCompleted();\n        }\n      }\n    }\n\n    function methodFailed (methodName, e) {\n      self.logger.error('peerConnection.' + methodName + ' failed');\n      self.logger.error(e);\n      self.ready = true;\n      onFailure(e);\n    }\n\n    self.ready = false;\n\n    methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';\n\n    self.peerConnection[methodName](\n      function(sessionDescription){\n        self.peerConnection.setLocalDescription(\n          sessionDescription,\n          onSetLocalDescriptionSuccess,\n          methodFailed.bind(null, 'setLocalDescription')\n        );\n      },\n      methodFailed.bind(null, methodName),\n      constraints\n    );\n  }},\n\n  addStream: {writable: true, value: function addStream (stream, onSuccess, onFailure) {\n    try {\n      this.peerConnection.addStream(stream);\n    } catch(e) {\n      this.logger.error('error adding stream');\n      this.logger.error(e);\n      onFailure(e);\n      return;\n    }\n\n    onSuccess();\n  }},\n\n  toggleMuteHelper: {writable: true, value: function toggleMuteHelper (trackGetter, mute) {\n    this.getLocalStreams().forEach(function (stream) {\n      stream[trackGetter]().forEach(function (track) {\n        track.enabled = !mute;\n      });\n    });\n  }},\n\n  toggleMuteAudio: {writable: true, value: function toggleMuteAudio (mute) {\n    this.toggleMuteHelper('getAudioTracks', mute);\n  }},\n\n  toggleMuteVideo: {writable: true, value: function toggleMuteVideo (mute) {\n    this.toggleMuteHelper('getVideoTracks', mute);\n  }}\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaHandler;\n};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview MediaStreamManager\n */\n\n/* MediaStreamManager\n * @class Manages the acquisition and release of MediaStreams.\n * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()\n */\nmodule.exports = function (SIP) {\n\n// Default MediaStreamManager provides single-use streams created with getUserMedia\nvar MediaStreamManager = function MediaStreamManager (logger, defaultMediaHint) {\n  if (!SIP.WebRTC.isSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed'\n  ];\n  this.mediaHint = defaultMediaHint || {\n    constraints: {audio: true, video: true}\n  };\n\n  this.logger = logger;\n  this.initEvents(events);\n\n  // map of streams to acquisition manner:\n  // true -> passed in as mediaHint.stream\n  // false -> getUserMedia\n  this.acquisitions = {};\n};\nMediaStreamManager.streamId = function (stream) {\n  return stream.getAudioTracks().concat(stream.getVideoTracks())\n    .map(function trackId (track) {\n      return track.id;\n    })\n    .join('');\n};\n\nMediaStreamManager.render = function render (stream, elements) {\n  if (!elements) {\n    return false;\n  }\n\n  function attachAndPlay (element, stream) {\n    (window.attachMediaStream || attachMediaStream)(element, stream);\n    ensureMediaPlaying(element);\n  }\n\n  function attachMediaStream(element, stream) {\n    if (typeof element.src !== 'undefined') {\n      URL.revokeObjectURL(element.src);\n      element.src = URL.createObjectURL(stream);\n    } else if (typeof (element.srcObject || element.mozSrcObject) !== 'undefined') {\n      element.srcObject = element.mozSrcObject = stream;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ensureMediaPlaying (mediaElement) {\n    var interval = 100;\n    mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {\n      if (mediaElement.paused) {\n        mediaElement.play();\n      }\n      else {\n        SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);\n      }\n    }, interval);\n  }\n\n  if (elements.video) {\n    if (elements.audio) {\n      elements.video.volume = 0;\n    }\n    attachAndPlay(elements.video, stream);\n  }\n  if (elements.audio) {\n    attachAndPlay(elements.audio, stream);\n  }\n};\n\nMediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {\n  'acquire': {value: function acquire (onSuccess, onFailure, mediaHint) {\n    mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;\n\n    var saveSuccess = function (onSuccess, stream, isHintStream) {\n      var streamId = MediaStreamManager.streamId(stream);\n      this.acquisitions[streamId] = !!isHintStream;\n      onSuccess(stream);\n    }.bind(this, onSuccess);\n\n    if (mediaHint.stream) {\n      saveSuccess(mediaHint.stream, true);\n    } else {\n      // Fallback to audio/video enabled if no mediaHint can be found.\n      var constraints = mediaHint.constraints ||\n        (this.mediaHint && this.mediaHint.constraints) ||\n        {audio: true, video: true};\n\n      /*\n       * Make the call asynchronous, so that ICCs have a chance\n       * to define callbacks to `userMediaRequest`\n       */\n      SIP.Timers.setTimeout(function () {\n        this.emit('userMediaRequest', constraints);\n\n        var emitThenCall = function (eventName, callback) {\n          var callbackArgs = Array.prototype.slice.call(arguments, 2);\n          // Emit with all of the arguments from the real callback.\n          var newArgs = [eventName].concat(callbackArgs);\n\n          this.emit.apply(this, newArgs);\n\n          callback.apply(null, callbackArgs);\n        }.bind(this);\n\n        SIP.WebRTC.getUserMedia(\n          constraints,\n          emitThenCall.bind(this, 'userMedia', saveSuccess),\n          emitThenCall.bind(this, 'userMediaFailed', onFailure)\n        );\n      }.bind(this), 0);\n    }\n  }},\n\n  'release': {value: function release (stream) {\n    var streamId = MediaStreamManager.streamId(stream);\n    if (this.acquisitions[streamId] === false) {\n      stream.stop();\n    }\n    delete this.acquisitions[streamId];\n  }},\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaStreamManager;\n};\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview WebRTC\n */\n\nmodule.exports = function (Utils, window, MediaHandler, MediaStreamManager) {\nvar WebRTC;\n\nWebRTC = {};\n\nWebRTC.MediaHandler = MediaHandler;\nWebRTC.MediaStreamManager = MediaStreamManager;\n\nvar _isSupported;\n\nWebRTC.isSupported = function () {\n  if (_isSupported !== undefined) {\n    return _isSupported;\n  }\n\n  WebRTC.MediaStream = Utils.getPrefixedProperty(window, 'MediaStream');\n  WebRTC.getUserMedia = Utils.getPrefixedProperty(window.navigator, 'getUserMedia');\n  WebRTC.RTCPeerConnection = Utils.getPrefixedProperty(window, 'RTCPeerConnection');\n  WebRTC.RTCSessionDescription = Utils.getPrefixedProperty(window, 'RTCSessionDescription');\n\n  if (WebRTC.getUserMedia && WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {\n    WebRTC.getUserMedia = WebRTC.getUserMedia.bind(window.navigator);\n    _isSupported = true;\n  }\n  else {\n    _isSupported = false;\n  }\n  return _isSupported;\n};\n\nreturn WebRTC;\n};\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * @augments SIP\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]\n *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.\n *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.\n *\n * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n */\nmodule.exports = function (SIP) {\nvar UA,\n  C = {\n    // UA status codes\n    STATUS_INIT :                0,\n    STATUS_READY:                1,\n    STATUS_USER_CLOSED:          2,\n    STATUS_NOT_READY:            3,\n\n    // UA error codes\n    CONFIGURATION_ERROR:  1,\n    NETWORK_ERROR:        2,\n\n    /* UA events and corresponding SIP Methods.\n     * Dynamically added to 'Allow' header field if the\n     * corresponding event handler is set.\n     */\n    EVENT_METHODS: {\n      'invite': 'INVITE',\n      'message': 'MESSAGE'\n    },\n\n    ALLOWED_METHODS: [\n      'ACK',\n      'CANCEL',\n      'BYE',\n      'OPTIONS',\n      'INFO',\n      'NOTIFY'\n    ],\n\n    ACCEPTED_BODY_TYPES: [\n      'application/sdp',\n      'application/dtmf-relay'\n    ],\n\n    MAX_FORWARDS: 70,\n    TAG_LENGTH: 10\n  };\n\nUA = function(configuration) {\n  var self = this,\n  events = [\n    'connecting',\n    'connected',\n    'disconnected',\n    'newTransaction',\n    'transactionDestroyed',\n    'registered',\n    'unregistered',\n    'registrationFailed',\n    'invite',\n    'newSession',\n    'message'\n  ], i, len;\n\n  // Helper function for forwarding events\n  function selfEmit(type) {\n    //registrationFailed handler is invoked with two arguments. Allow event handlers to be invoked with a variable no. of arguments\n    return self.emit.bind(self, type);\n  }\n\n  for (i = 0, len = C.ALLOWED_METHODS.length; i < len; i++) {\n    events.push(C.ALLOWED_METHODS[i].toLowerCase());\n  }\n\n  // Set Accepted Body Types\n  C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();\n\n  this.log = new SIP.LoggerFactory();\n  this.logger = this.getLogger('sip.ua');\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.data = {};\n  this.sessions = {};\n  this.subscriptions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  this.transportRecoverAttempts = 0;\n  this.transportRecoveryTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nict']).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nist']).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ict']).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ist']).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   *\n   * @throws {SIP.Exceptions.ConfigurationError}\n   * @throws {TypeError}\n   */\n\n  if(configuration === undefined) {\n    configuration = {};\n  } else if (typeof configuration === 'string' || configuration instanceof String) {\n    configuration = {\n      uri: configuration\n    };\n  }\n\n  // Apply log configuration if present\n  if (configuration.log) {\n    if (configuration.log.hasOwnProperty('builtinEnabled')) {\n      this.log.builtinEnabled = configuration.log.builtinEnabled;\n    }\n\n    if (configuration.log.hasOwnProperty('level')) {\n      this.log.level = configuration.log.level;\n    }\n\n    if (configuration.log.hasOwnProperty('connector')) {\n      this.log.connector = configuration.log.connector;\n    }\n  }\n\n  try {\n    this.loadConfig(configuration);\n    this.initEvents(events);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registerContext\n  this.registerContext = new SIP.RegisterContext(this);\n  this.registerContext.on('failed', selfEmit('registrationFailed'));\n  this.registerContext.on('registered', selfEmit('registered'));\n  this.registerContext.on('unregistered', selfEmit('unregistered'));\n\n  if(this.configuration.autostart) {\n    this.start();\n  }\n\n  if (typeof global.addEventListener === 'function') {\n    global.addEventListener('unload', this.stop.bind(this));\n  }\n};\nUA.prototype = new SIP.EventEmitter();\n\n//=================\n//  High Level API\n//=================\n\nUA.prototype.register = function(options) {\n  this.configuration.register = true;\n  this.registerContext.register(options);\n\n  return this;\n};\n\n/**\n * Unregister.\n *\n * @param {Boolean} [all] unregister all user bindings.\n *\n */\nUA.prototype.unregister = function(options) {\n  this.configuration.register = false;\n  this.registerContext.unregister(options);\n\n  return this;\n};\n\nUA.prototype.isRegistered = function() {\n  return this.registerContext.registered;\n};\n\n/**\n * Connection state.\n * @param {Boolean}\n */\nUA.prototype.isConnected = function() {\n  return this.transport ? this.transport.connected : false;\n};\n\n/**\n * Make an outgoing call.\n *\n * @param {String} target\n * @param {Object} views\n * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.invite = function(target, options) {\n  options = options || {};\n  options = SIP.Utils.desugarSessionOptions(options);\n  SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger);\n\n  var context = new SIP.InviteClientContext(this, target, options);\n\n  if (this.isConnected()) {\n    context.invite({media: options.media});\n  } else {\n    this.once('connected', function() {\n      context.invite({media: options.media});\n    });\n  }\n  return context;\n};\n\nUA.prototype.subscribe = function(target, event, options) {\n  var sub = new SIP.Subscription(this, target, event, options);\n\n  if (this.isConnected()) {\n    sub.subscribe();\n  } else {\n    this.once('connected', function() {\n      sub.subscribe();\n    });\n  }\n  return sub;\n};\n\n/**\n * Send a message.\n *\n * @param {String} target\n * @param {String} body\n * @param {Object} [options]\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.message = function(target, body, options) {\n  if (body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  options = options || {};\n  options.contentType = options.contentType || 'text/plain';\n  options.body = body;\n\n  var mes = new SIP.ClientContext(this, SIP.C.MESSAGE, target, options);\n\n  if (this.isConnected()) {\n    mes.send();\n  } else {\n    this.once('connected', function() {\n      mes.send();\n    });\n  }\n\n  return mes;\n};\n\nUA.prototype.request = function (method, target, options) {\n  var req = new SIP.ClientContext(this, method, target, options);\n\n  if (this.isConnected()) {\n    req.send();\n  } else {\n    this.once('connected', function() {\n      req.send();\n    });\n  }\n\n  return req;\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  var session, subscription, applicant,\n    ua = this;\n\n  function transactionsListener() {\n    if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {\n        ua.off('transactionDestroyed', transactionsListener);\n        ua.transport.disconnect();\n    }\n  }\n\n  this.logger.log('user requested closure...');\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.warn('UA already closed');\n    return this;\n  }\n\n  // Clear transportRecoveryTimer\n  SIP.Timers.clearTimeout(this.transportRecoveryTimer);\n\n  // Close registerContext\n  this.logger.log('closing registerContext');\n  this.registerContext.close();\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    this.logger.log('closing session ' + session);\n    this.sessions[session].terminate();\n  }\n\n  //Run _close_ on every Subscription\n  for(subscription in this.subscriptions) {\n    this.logger.log('unsubscribing from subscription ' + subscription);\n    this.subscriptions[subscription].close();\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    this.applicants[applicant].close();\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  /*\n   * If the remaining transactions are all INVITE transactions, there is no need to\n   * wait anymore because every session has already been closed by this method.\n   * - locally originated sessions where terminated (CANCEL or BYE)\n   * - remotely originated sessions where rejected (4XX) or terminated (BYE)\n   * Remaining INVITE transactions belong tho sessions that where answered. This are in\n   * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]\n   */\n  if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {\n    this.transport.disconnect();\n  } else {\n    this.on('transactionDestroyed', transactionsListener);\n  }\n\n  return this;\n};\n\n/**\n * Connect to the WS server if status = STATUS_INIT.\n * Resume UA after being closed.\n *\n */\nUA.prototype.start = function() {\n  var server;\n\n  this.logger.log('user requested startup...');\n  if (this.status === C.STATUS_INIT) {\n    server = this.getNextWsServer();\n    new SIP.Transport(this, server);\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.log('resuming');\n    this.status = C.STATUS_READY;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_READY) {\n    this.logger.log('UA is in READY status, not resuming');\n  } else {\n    this.logger.error('Connection is down. Auto-Recovery system is trying to connect');\n  }\n\n  return this;\n};\n\n/**\n * Normalize a string into a valid SIP request URI\n *\n * @param {String} target\n *\n * @returns {SIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\nUA.prototype.saveCredentials = function(credentials) {\n  this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n  this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n\n  return this;\n};\n\nUA.prototype.getCredentials = function(request) {\n  var realm, credentials;\n\n  realm = request.ruri.host;\n\n  if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n    credentials = this.cache.credentials[realm][request.ruri];\n    credentials.method = request.method;\n  }\n\n  return credentials;\n};\n\nUA.prototype.getLogger = function(category, label) {\n  return this.log.getLogger(category, label);\n};\n\n\n//==============================\n// Event Handlers\n//==============================\n\n/**\n * Transport Close event\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportClosed = function(transport) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n    client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_DISCONNECTED);\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  // Close sessions if GRUU is not being used\n  if (!this.contact.pub_gruu) {\n    this.closeSessionsOnTransportError();\n  }\n\n};\n\n/**\n * Unrecoverable transport event.\n * Connection reattempt logic has been done and didn't success.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportError = function(transport) {\n  var server;\n\n  this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to '+ SIP.Transport.C.STATUS_ERROR);\n\n  // Close sessions.\n  //Mark this transport as 'down'\n  transport.server.status = SIP.Transport.C.STATUS_ERROR;\n\n  this.emit('disconnected', {\n    transport: transport\n  });\n\n  // try the next transport if the UA isn't closed\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  server = this.getNextWsServer();\n\n  if(server) {\n    new SIP.Transport(this, server);\n  }else {\n    this.closeSessionsOnTransportError();\n    if (!this.error || this.error !== C.NETWORK_ERROR) {\n      this.status = C.STATUS_NOT_READY;\n      this.error = C.NETWORK_ERROR;\n    }\n    // Transport Recovery process\n    this.recoverTransport();\n  }\n};\n\n/**\n * Transport connection event.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportConnected = function(transport) {\n  this.transport = transport;\n\n  // Reset transport recovery counter\n  this.transportRecoverAttempts = 0;\n\n  transport.server.status = SIP.Transport.C.STATUS_READY;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_READY);\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  if(this.configuration.register) {\n    this.registerContext.onTransportConnected();\n  }\n\n  this.emit('connected', {\n    transport: transport\n  });\n};\n\n\n/**\n * Transport connecting event\n * @private\n * @param {SIP.Transport} transport.\n * #param {Integer} attempts.\n */\n  UA.prototype.onTransportConnecting = function(transport, attempts) {\n    this.emit('connecting', {\n      transport: transport,\n      attempts: attempts\n    });\n  };\n\n\n/**\n * new Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n  this.emit('newTransaction', {transaction: transaction});\n};\n\n\n/**\n * destroy Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n  this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n * @private\n * @param {SIP.IncomingRequest} request.\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message,\n    method = request.method,\n    transaction,\n    methodLower = request.method.toLowerCase(),\n    self = this;\n\n  function ruriMatches (uri) {\n    return uri && uri.user === request.ruri.user;\n  }\n\n  // Check that request URI points to us\n  if(!(ruriMatches(this.configuration.uri) ||\n       ruriMatches(this.contact.uri) ||\n       ruriMatches(this.contact.pub_gruu) ||\n       ruriMatches(this.contact.temp_gruu))) {\n    this.logger.warn('Request-URI does not point to us');\n    if (request.method !== SIP.C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n  }\n\n  // Check request URI scheme\n  if(request.ruri.scheme === SIP.C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(SIP.Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === SIP.C.OPTIONS) {\n    new SIP.Transactions.NonInviteServerTransaction(request, this);\n    request.reply(200, null, [\n      'Allow: '+ SIP.Utils.getAllowedMethods(this),\n      'Accept: '+ C.ACCEPTED_BODY_TYPES\n    ]);\n  } else if (method === SIP.C.MESSAGE) {\n    if (!this.checkListener(methodLower)) {\n      // UA is not listening for this.  Reject immediately.\n      new SIP.Transactions.NonInviteServerTransaction(request, this);\n      request.reply(405, null, ['Allow: '+ SIP.Utils.getAllowedMethods(this)]);\n      return;\n    }\n    message = new SIP.ServerContext(this, request);\n    message.body = request.body;\n    message.content_type = request.getHeader('Content-Type') || 'text/plain';\n\n    request.reply(200, null);\n    this.emit('message', message);\n  } else if (method !== SIP.C.INVITE &&\n             method !== SIP.C.ACK) {\n    // Let those methods pass through to normal processing for now.\n    transaction = new SIP.ServerContext(this, request);\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case SIP.C.INVITE:\n        var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;\n        if(!isMediaSupported || isMediaSupported()) {\n          session = new SIP.InviteServerContext(this, request)\n            .on('invite', function() {\n              self.emit('invite', this);\n            });\n        } else {\n          this.logger.warn('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case SIP.C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n      case SIP.C.CANCEL:\n        session = this.findSession(request);\n        if(session) {\n          session.receiveRequest(request);\n        } else {\n          this.logger.warn('received CANCEL request for a non existent session');\n        }\n        break;\n      case SIP.C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n      default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request);\n\n    if(dialog) {\n      if (method === SIP.C.INVITE) {\n        new SIP.Transactions.InviteServerTransaction(request, this);\n      }\n      dialog.receiveRequest(request);\n    } else if (method === SIP.C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        this.logger.warn('received NOTIFY request for a non existent session');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== SIP.C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest} request.\n * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}\n */\nUA.prototype.findSession = function(request) {\n  return this.sessions[request.call_id + request.from_tag] ||\n          this.sessions[request.call_id + request.to_tag] ||\n          null;\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest}\n * @returns {SIP.Dialog|null}\n */\nUA.prototype.findDialog = function(request) {\n  return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||\n          this.dialogs[request.call_id + request.to_tag + request.from_tag] ||\n          null;\n};\n\n/**\n * Retrieve the next server to which connect.\n * @private\n * @returns {Object} ws_server\n */\nUA.prototype.getNextWsServer = function() {\n  // Order servers by weight\n  var idx, length, ws_server,\n    candidates = [];\n\n  length = this.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ws_server = this.configuration.wsServers[idx];\n\n    if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {\n      continue;\n    } else if (candidates.length === 0) {\n      candidates.push(ws_server);\n    } else if (ws_server.weight > candidates[0].weight) {\n      candidates = [ws_server];\n    } else if (ws_server.weight === candidates[0].weight) {\n      candidates.push(ws_server);\n    }\n  }\n\n  idx = Math.floor(Math.random() * candidates.length);\n\n  return candidates[idx];\n};\n\n/**\n * Close all sessions on transport error.\n * @private\n */\nUA.prototype.closeSessionsOnTransportError = function() {\n  var idx;\n\n  // Run _transportError_ for every Session\n  for(idx in this.sessions) {\n    this.sessions[idx].onTransportError();\n  }\n  // Call registerContext _onTransportClosed_\n  this.registerContext.onTransportClosed();\n};\n\nUA.prototype.recoverTransport = function(ua) {\n  var idx, length, k, nextRetry, count, server;\n\n  ua = ua || this;\n  count = ua.transportRecoverAttempts;\n\n  length = ua.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ua.configuration.wsServers[idx].status = 0;\n  }\n\n  server = ua.getNextWsServer();\n\n  k = Math.floor((Math.random() * Math.pow(2,count)) +1);\n  nextRetry = k * ua.configuration.connectionRecoveryMinInterval;\n\n  if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {\n    this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');\n    nextRetry = ua.configuration.connectionRecoveryMinInterval;\n    count = 0;\n  }\n\n  this.logger.log('next connection attempt in '+ nextRetry +' seconds');\n\n  this.transportRecoveryTimer = SIP.Timers.setTimeout(\n    function(){\n      ua.transportRecoverAttempts = count + 1;\n      new SIP.Transport(ua, server);\n    }, nextRetry * 1000);\n};\n\n/**\n * Configuration load.\n * @private\n * returns {Boolean}\n */\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostportParams, registrarServer,\n    settings = {\n      /* Host address\n      * Value to be set in Via sent_by and host part of Contact FQDN\n      */\n      viaHost: SIP.Utils.createRandomToken(12) + '.invalid',\n\n      uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),\n      wsServers: [{\n        scheme: 'WSS',\n        sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',\n        status: 0,\n        weight: 0,\n        ws_uri: 'wss://edge.sip.onsip.com'\n      }],\n\n      // Password\n      password: null,\n\n      // Registration parameters\n      registerExpires: 600,\n      register: true,\n      registrarServer: null,\n\n      // Transport related parameters\n      wsServerMaxReconnection: 3,\n      wsServerReconnectionTimeout: 4,\n\n      connectionRecoveryMinInterval: 2,\n      connectionRecoveryMaxInterval: 30,\n\n      usePreloadedRoute: false,\n\n      //string to be inserted into User-Agent request header\n      userAgentString: SIP.C.USER_AGENT,\n\n      // Session parameters\n      noAnswerTimeout: 60,\n      stunServers: ['stun:stun.l.google.com:19302'],\n      turnServers: [],\n\n      // Logging parameters\n      traceSip: false,\n\n      // Hacks\n      hackViaTcp: false,\n      hackIpInContact: false,\n      hackWssInTransport: false,\n\n      //autostarting\n      autostart: true,\n\n      //Reliable Provisional Responses\n      rel100: SIP.C.supported.UNSUPPORTED,\n\n      mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory\n    };\n\n  // Pre-Configuration\n  function aliasUnderscored (parameter, logger) {\n    var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {\n      return m[0] + '_' + m[1].toLowerCase();\n    });\n\n    if (parameter === underscored) {\n      return;\n    }\n\n    var hasParameter = configuration.hasOwnProperty(parameter);\n    if (configuration.hasOwnProperty(underscored)) {\n      logger.warn(underscored + ' is deprecated, please use ' + parameter);\n      if (hasParameter) {\n        logger.warn(parameter + ' overriding ' + underscored);\n      }\n    }\n\n    configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];\n  }\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    aliasUnderscored(parameter, this.logger);\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new SIP.Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);\n\n  var emptyArraysAllowed = ['stunServers', 'turnServers'];\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    aliasUnderscored(parameter, this.logger);\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      // If the parameter value is an empty array, but shouldn't be, apply its default value.\n      if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }\n\n      // If the parameter value is null, empty string, or undefined then apply its default value.\n      if(value === null || value === \"\" || value === undefined) { continue; }\n      // If it's a number with NaN value then also apply its default value.\n      // NOTE: JS does not allow \"value === NaN\", the following does the work:\n      else if(typeof(value) === 'number' && isNaN(value)) { continue; }\n\n      checked_value = UA.configuration_check.optional[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Sanity Checks\n\n  // Connection recovery intervals\n  if(settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {\n    throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as displayName.\n  if (settings.displayName === 0) {\n    settings.displayName = '0';\n  }\n\n  // Instance-id for GRUU\n  if (!settings.instanceId) {\n    settings.instanceId = SIP.Utils.newUUID();\n  }\n\n  // sipjsId instance parameter. Static random tag of length 5\n  settings.sipjsId = SIP.Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostportParams = settings.uri.clone();\n  hostportParams.user = null;\n  settings.hostportParams = hostportParams.toString().replace(/^sip:/i, '');\n\n  /* Check whether authorizationUser is explicitly defined.\n   * Take 'settings.uri.user' value if not.\n   */\n  if (!settings.authorizationUser) {\n    settings.authorizationUser = settings.uri.user;\n  }\n\n  /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n  if (!settings.registrarServer) {\n    registrarServer = settings.uri.clone();\n    registrarServer.user = null;\n    settings.registrarServer = registrarServer;\n  }\n\n  // User noAnswerTimeout\n  settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n\n  // Via Host\n  if (settings.hackIpInContact) {\n    settings.viaHost = SIP.Utils.getRandomTestNetIP();\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, {transport: ((settings.hackWssInTransport)?'wss':'ws')}),\n    toString: function(options){\n      options = options || {};\n\n      var\n        anonymous = options.anonymous || null,\n        outbound = options.outbound || null,\n        contact = '<';\n\n      if (anonymous) {\n        contact += (this.temp_gruu || ( true?'wss':'ws')).toString();\n      } else {\n        contact += (this.pub_gruu || this.uri).toString();\n      }\n\n      if (outbound) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // media overrides mediaConstraints\n  SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  this.logger.log('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrarServer':\n      case 'mediaHandlerFactory':\n        this.logger.log('· ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n        this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n * @private\n */\nUA.configuration_skeleton = (function() {\n  var idx,  parameter,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      \"sipjsId\",\n      \"hostportParams\",\n\n      // Optional user configurable parameters\n      \"uri\",\n      \"wsServers\",\n      \"authorizationUser\",\n      \"connectionRecoveryMaxInterval\",\n      \"connectionRecoveryMinInterval\",\n      \"displayName\",\n      \"hackViaTcp\", // false.\n      \"hackIpInContact\", //false\n      \"hackWssInTransport\", //false\n      \"instanceId\",\n      \"noAnswerTimeout\", // 30 seconds.\n      \"password\",\n      \"registerExpires\", // 600 seconds.\n      \"registrarServer\",\n      \"reliable\",\n      \"rel100\",\n      \"userAgentString\", //SIP.C.USER_AGENT\n      \"autostart\",\n      \"stunServers\",\n      \"traceSip\",\n      \"turnServers\",\n      \"usePreloadedRoute\",\n      \"wsServerMaxReconnection\",\n      \"wsServerReconnectionTimeout\",\n      \"mediaHandlerFactory\",\n      \"media\",\n      \"mediaConstraints\",\n\n      // Post-configuration generated parameters\n      \"via_core_value\",\n      \"viaHost\"\n    ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n    skeleton[parameter] = {\n      value: '',\n      writable: false,\n      configurable: false\n    };\n  }\n\n  skeleton['register'] = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n * @private\n * @return {Boolean}\n */\nUA.configuration_check = {\n  mandatory: {\n  },\n\n  optional: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!(/^sip:/i).test(uri)) {\n        uri = SIP.C.SIP + ':' + uri;\n      }\n      parsed = SIP.URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    //Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n    wsServers: function(wsServers) {\n      var idx, length, url;\n\n      /* Allow defining wsServers parameter as:\n       *  String: \"host\"\n       *  Array of Strings: [\"host1\", \"host2\"]\n       *  Array of Objects: [{ws_uri:\"host1\", weight:1}, {ws_uri:\"host2\", weight:0}]\n       *  Array of Objects and Strings: [{ws_uri:\"host1\"}, \"host2\"]\n       */\n      if (typeof wsServers === 'string') {\n        wsServers = [{ws_uri: wsServers}];\n      } else if (wsServers instanceof Array) {\n        length = wsServers.length;\n        for (idx = 0; idx < length; idx++) {\n          if (typeof wsServers[idx] === 'string'){\n            wsServers[idx] = {ws_uri: wsServers[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      if (wsServers.length === 0) {\n        return false;\n      }\n\n      length = wsServers.length;\n      for (idx = 0; idx < length; idx++) {\n        if (!wsServers[idx].ws_uri) {\n          return;\n        }\n        if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {\n          return;\n        }\n\n        url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');\n\n        if(url === -1) {\n          return;\n        } else if(url.scheme !== 'wss' && url.scheme !== 'ws') {\n          return;\n        } else {\n          wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=ws;lr>';\n\n          if (!wsServers[idx].weight) {\n            wsServers[idx].weight = 0;\n          }\n\n          wsServers[idx].status = 0;\n          wsServers[idx].scheme = url.scheme.toUpperCase();\n        }\n      }\n      return wsServers;\n    },\n\n    authorizationUser: function(authorizationUser) {\n      if(SIP.Grammar.parse('\"'+ authorizationUser +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorizationUser;\n      }\n    },\n\n    connectionRecoveryMaxInterval: function(connectionRecoveryMaxInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {\n        value = Number(connectionRecoveryMaxInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connectionRecoveryMinInterval: function(connectionRecoveryMinInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {\n        value = Number(connectionRecoveryMinInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    displayName: function(displayName) {\n      if(SIP.Grammar.parse('\"' + displayName + '\"', 'displayName') === -1) {\n        return;\n      } else {\n        return displayName;\n      }\n    },\n\n    hackViaTcp: function(hackViaTcp) {\n      if (typeof hackViaTcp === 'boolean') {\n        return hackViaTcp;\n      }\n    },\n\n    hackIpInContact: function(hackIpInContact) {\n      if (typeof hackIpInContact === 'boolean') {\n        return hackIpInContact;\n      }\n    },\n\n    hackWssInTransport: function(hackWssInTransport) {\n      if (typeof hackWssInTransport === 'boolean') {\n        return hackWssInTransport;\n      }\n    },\n\n    instanceId: function(instanceId) {\n      if(typeof instanceId !== 'string') {\n        return;\n      }\n\n      if ((/^uuid:/i.test(instanceId))) {\n        instanceId = instanceId.substr(5);\n      }\n\n      if(SIP.Grammar.parse(instanceId, 'uuid') === -1) {\n        return;\n      } else {\n        return instanceId;\n      }\n    },\n\n    noAnswerTimeout: function(noAnswerTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(noAnswerTimeout)) {\n        value = Number(noAnswerTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    rel100: function(rel100) {\n      if(rel100 === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (rel100 === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    registerExpires: function(registerExpires) {\n      var value;\n      if (SIP.Utils.isDecimal(registerExpires)) {\n        value = Number(registerExpires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrarServer: function(registrarServer) {\n      var parsed;\n\n      if(typeof registrarServer !== 'string') {\n        return;\n      }\n\n      if (!/^sip:/i.test(registrarServer)) {\n        registrarServer = SIP.C.SIP + ':' + registrarServer;\n      }\n      parsed = SIP.URI.parse(registrarServer);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    stunServers: function(stunServers) {\n      var idx, length, stun_server;\n\n      if (typeof stunServers === 'string') {\n        stunServers = [stunServers];\n      } else if (!(stunServers instanceof Array)) {\n        return;\n      }\n\n      length = stunServers.length;\n      for (idx = 0; idx < length; idx++) {\n        stun_server = stunServers[idx];\n        if (!(/^stuns?:/.test(stun_server))) {\n          stun_server = 'stun:' + stun_server;\n        }\n\n        if(SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {\n          return;\n        } else {\n          stunServers[idx] = stun_server;\n        }\n      }\n      return stunServers;\n    },\n\n    traceSip: function(traceSip) {\n      if (typeof traceSip === 'boolean') {\n        return traceSip;\n      }\n    },\n\n    turnServers: function(turnServers) {\n      var idx, length, turn_server, url;\n\n      if (turnServers instanceof Array) {\n        // Do nothing\n      } else {\n        turnServers = [turnServers];\n      }\n\n      length = turnServers.length;\n      for (idx = 0; idx < length; idx++) {\n        turn_server = turnServers[idx];\n        //Backwards compatibility: Allow defining the turn_server url with the 'server' property.\n        if (turn_server.server) {\n          turn_server.urls = [turn_server.server];\n        }\n\n        if (!turn_server.urls || !turn_server.username || !turn_server.password) {\n          return;\n        }\n\n        if (!(turn_server.urls instanceof Array)) {\n          turn_server.urls = [turn_server.urls];\n        }\n\n        length = turn_server.urls.length;\n        for (idx = 0; idx < length; idx++) {\n          url = turn_server.urls[idx];\n\n          if (!(/^turns?:/.test(url))) {\n            url = 'turn:' + url;\n          }\n\n          if(SIP.Grammar.parse(url, 'turn_URI') === -1) {\n            return;\n          }\n        }\n      }\n      return turnServers;\n    },\n\n    userAgentString: function(userAgentString) {\n      if (typeof userAgentString === 'string') {\n        return userAgentString;\n      }\n    },\n\n    usePreloadedRoute: function(usePreloadedRoute) {\n      if (typeof usePreloadedRoute === 'boolean') {\n        return usePreloadedRoute;\n      }\n    },\n\n    wsServerMaxReconnection: function(wsServerMaxReconnection) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {\n        value = Number(wsServerMaxReconnection);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    wsServerReconnectionTimeout: function(wsServerReconnectionTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {\n        value = Number(wsServerReconnectionTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    autostart: function(autostart) {\n      if (typeof autostart === 'boolean') {\n        return autostart;\n      }\n    },\n\n    mediaHandlerFactory: function(mediaHandlerFactory) {\n      if (mediaHandlerFactory instanceof Function) {\n        return mediaHandlerFactory;\n      }\n    }\n  }\n};\n\nUA.C = C;\nSIP.UA = UA;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\nvar Hacks = {\n  AllBrowsers: {\n    maskDtls: function (message) {\n      if (message.body) {\n        message.body = message.body.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n      }\n    },\n    unmaskDtls: function (sdp) {\n      /**\n       * Chrome does not handle DTLS correctly (Canaray does, but not production)\n       * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n       *\n       * UPDATE: May 21, 2014\n       * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n       *\n       * UPDATE: 2014-09-24\n       * Opera now supports DTLS by default as well.\n       *\n       **/\n      return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n    }\n  },\n  Firefox: {\n    /* Condition to detect if hacks are applicable */\n    isFirefox: function () {\n      return window.mozRTCPeerConnection !== undefined;\n    },\n\n    cannotHandleExtraWhitespace: function (message) {\n      if (this.isFirefox() && message.body) {\n        message.body = message.body.replace(/ \\r\\n/g, \"\\r\\n\");\n      }\n    },\n\n    hasMissingCLineInSDP: function (sdp) {\n      /*\n       * This is a Firefox hack to insert valid sdp when getDescription is\n       * called with the constraint offerToReceiveVideo = false.\n       * We search for either a c-line at the top of the sdp above all\n       * m-lines. If that does not exist then we search for a c-line\n       * beneath each m-line. If it is missing a c-line, we insert\n       * a fake c-line with the ip address 0.0.0.0. This is then valid\n       * sdp and no media will be sent for that m-line.\n       *\n       * Valid SDP is:\n       * m=\n       * i=\n       * c=\n       */\n      var insertAt, mlines;\n      if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n\n        // Find all m= lines\n        mlines = sdp.match(/m=.*\\r\\n.*/g);\n        for (var i=0; i<mlines.length; i++) {\n\n          // If it has an i= line, check if the next line is the c= line\n          if (mlines[i].toString().search(/i=.*/) >= 0) {\n            insertAt = sdp.indexOf(mlines[i].toString())+mlines[i].toString().length;\n            if (sdp.substr(insertAt,2)!=='c=') {\n              sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n\n          // else add the C line if it's missing\n          } else if (mlines[i].toString().search(/c=.*/) < 0) {\n            insertAt = sdp.indexOf(mlines[i].toString().match(/.*/))+mlines[i].toString().match(/.*/).toString().length;\n            sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n          }\n        }\n      }\n      return sdp;\n    },\n\n    hasIncompatibleCLineWithSomeSIPEndpoints: function(sdp) {\n      /*\n       * Firefox appears to be following https://tools.ietf.org/html/rfc5245#section-9.1.1.1\n       * and using a c line IP address of 0.0.0.0. This is completely valid, however it is\n       * causing some endpoints (such as FreeSWITCH) to interpret the SDP as being on hold\n       * https://freeswitch.org/jira/browse/FS-6955. To get around this issue we pull the\n       * replace the c line with 1.1.1.1 which SIP clients do not interpret as hold.\n       * This makes the other endpoint believe that the call is not on hold and audio flows\n       * because ICE determines the media pathway (not the c line).\n       */\n      return sdp.replace(/(0\\.0\\.0\\.0)/gmi, SIP.Utils.getRandomTestNetIP());\n    }\n  },\n\n  Chrome: {\n    needsExplicitlyInactiveSDP: function (sdp) {\n      var sub, index;\n\n      if (Hacks.Firefox.isFirefox()) { // Fix this in Firefox before sending\n        index = sdp.indexOf('m=video 0');\n        if (index !== -1) {\n          sub = sdp.substr(index);\n          sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/,\n                            '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n          return sdp.substr(0, index) + sub;\n        }\n      }\n      return sdp;\n    },\n\n    getsConfusedAboutGUM: function (session) {\n      if (session.mediaHandler) {\n        session.mediaHandler.close();\n      }\n    }\n  }\n};\n\nreturn Hacks;\n};\n\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n/**\n * @fileoverview Incoming SIP Message Sanity Check\n */\n\n/**\n * SIP message sanity check.\n * @augments SIP\n * @function\n * @param {SIP.IncomingMessage} message\n * @param {SIP.UA} ua\n * @param {SIP.Transport} transport\n * @returns {Boolean}\n */\nmodule.exports = function (SIP) {\nvar sanityCheck,\n logger,\n message, ua, transport,\n requests = [],\n responses = [],\n all = [];\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at sipjsId, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_1_2_ sent-by mismatch\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1() {\n  if(!message.ruri || message.ruri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.sipjsId) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  var len = SIP.Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  if(!message.to_tag) {\n    if(message.method === SIP.C.INVITE) {\n      tr = ua.transactions.ist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.ist) {\n          tr = ua.transactions.ist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    } else {\n      tr = ua.transactions.nist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.nist) {\n          tr = ua.transactions.nist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3() {\n  if(message.getHeaders('via').length > 1) {\n    logger.warn('More than one Via header field present in the response. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_1_2() {\n  var viaHost = ua.configuration.viaHost;\n  if(message.via.host !== viaHost || message.via.port !== undefined) {\n    logger.warn('Via sent-by in the response does not match UA Via host value. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  var\n    len = SIP.Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      logger.warn('Message body length is lower than the value in Content-Length header field. Dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders() {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      logger.warn('Missing mandatory header field : '+ mandatoryHeaders[idx] +'. Dropping the response');\n      return false;\n    }\n  }\n}\n\n// Reply\nfunction reply(status_code) {\n  var to,\n    response = \"SIP/2.0 \" + status_code + \" \" + SIP.C.REASON_PHRASE[status_code] + \"\\r\\n\",\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += \"Via: \" + vias[idx] + \"\\r\\n\";\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + SIP.Utils.newTag();\n  }\n\n  response += \"To: \" + to + \"\\r\\n\";\n  response += \"From: \" + message.getHeader('From') + \"\\r\\n\";\n  response += \"Call-ID: \" + message.call_id + \"\\r\\n\";\n  response += \"CSeq: \" + message.cseq + \" \" + message.method + \"\\r\\n\";\n  response += \"\\r\\n\";\n\n  transport.send(response);\n}\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\nresponses.push(rfc3261_18_1_2);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\nsanityCheck = function(m, u, t) {\n  var len, pass;\n\n  message = m;\n  ua = u;\n  transport = t;\n\n  logger = ua.getLogger('sip.sanitycheck');\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIP.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIP.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n};\n\nSIP.sanityCheck = sanityCheck;\n};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\n/**\n * @fileoverview SIP Digest Authentication\n */\n\n/**\n * SIP Digest Authentication.\n * @augments SIP.\n * @function Digest Authentication\n * @param {SIP.UA} ua\n */\nmodule.exports = function (Utils) {\nvar DigestAuthentication;\n\nDigestAuthentication = function(ua) {\n  this.logger = ua.getLogger('sipjs.digestauthentication');\n  this.username = ua.configuration.authorizationUser;\n  this.password = ua.configuration.password;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.response = null;\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if credentials were successfully generated, false otherwise.\n*\n* @param {SIP.OutgoingRequest} request\n* @param {Object} challenge\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  // Inspect and validate the challenge.\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      this.logger.warn('challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (! this.realm) {\n    this.logger.warn('challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  if (! this.nonce) {\n    this.logger.warn('challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      this.logger.warn('challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  this.updateNcHex();\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n  this.calculateResponse();\n\n  return true;\n};\n\n\n/**\n* Generate Digest 'response' value.\n* @private\n*/\nDigestAuthentication.prototype.calculateResponse = function() {\n  var ha1, ha2;\n\n  // HA1 = MD5(A1) = MD5(username:realm:password)\n  ha1 = Utils.calculateMD5(this.username + \":\" + this.realm + \":\" + this.password);\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri + \":\" + Utils.calculateMD5(this.body ? this.body : \"\"));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n  }\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (! this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n\n\n/**\n* Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n* @private\n*/\nDigestAuthentication.prototype.updateNcHex = function() {\n  var hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n};\n\nreturn DigestAuthentication;\n};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n/* jshint ignore:start */\nmodule.exports = function(SIP) {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 182, Via: 190, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, stun_URI: 209, To: 188, turn_URI: 216, uuid: 219, WWW_Authenticate: 205, challenge: 157 },\n        peg$startRuleIndex   = 118,\n\n        peg$consts = [\n          \"\\r\\n\",\n          { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n          /^[0-9]/,\n          { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n          /^[a-zA-Z]/,\n          { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n          /^[0-9a-fA-F]/,\n          { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n          /^[\\0-\\xFF]/,\n          { type: \"class\", value: \"[\\\\0-\\\\xFF]\", description: \"[\\\\0-\\\\xFF]\" },\n          /^[\"]/,\n          { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\n          \" \",\n          { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n          \"\\t\",\n          { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n          /^[a-zA-Z0-9]/,\n          { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n          \";\",\n          { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n          \"/\",\n          { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n          \"?\",\n          { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          \"@\",\n          { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n          \"&\",\n          { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n          \"=\",\n          { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n          \"+\",\n          { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n          \"$\",\n          { type: \"literal\", value: \"$\", description: \"\\\"$\\\"\" },\n          \",\",\n          { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n          \"-\",\n          { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n          \"_\",\n          { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n          \".\",\n          { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n          \"!\",\n          { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n          \"~\",\n          { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n          \"*\",\n          { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n          \"'\",\n          { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n          \"(\",\n          { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n          \")\",\n          { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n          peg$FAILED,\n          \"%\",\n          { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n          function(escaped) {return escaped.join(''); },\n          null,\n          [],\n          function() {return \" \"; },\n          function() {return ':'; },\n          function() {\n                              return text(); },\n          /^[!-~]/,\n          { type: \"class\", value: \"[!-~]\", description: \"[!-~]\" },\n          /^[\\x80-\\uFFFF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\uFFFF]\", description: \"[\\\\x80-\\\\uFFFF]\" },\n          /^[\\x80-\\xBF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\xBF]\", description: \"[\\\\x80-\\\\xBF]\" },\n          /^[a-f]/,\n          { type: \"class\", value: \"[a-f]\", description: \"[a-f]\" },\n          \"`\",\n          { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n          function() {\n                            return text(); },\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          \"\\\\\",\n          { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n          \"[\",\n          { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n          \"]\",\n          { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function() {return \"*\"; },\n          function() {return \"/\"; },\n          function() {return \"=\"; },\n          function() {return \"(\"; },\n          function() {return \")\"; },\n          function() {return \">\"; },\n          function() {return \"<\"; },\n          function() {return \",\"; },\n          function() {return \";\"; },\n          function() {return \":\"; },\n          function() {return \"\\\"\"; },\n          /^[!-']/,\n          { type: \"class\", value: \"[!-']\", description: \"[!-']\" },\n          /^[*-[]/,\n          { type: \"class\", value: \"[*-[]\", description: \"[*-[]\" },\n          /^[\\]-~]/,\n          { type: \"class\", value: \"[\\\\]-~]\", description: \"[\\\\]-~]\" },\n          function(contents) {\n                                  return contents; },\n          /^[#-[]/,\n          { type: \"class\", value: \"[#-[]\", description: \"[#-[]\" },\n          /^[\\0-\\t]/,\n          { type: \"class\", value: \"[\\\\0-\\\\t]\", description: \"[\\\\0-\\\\t]\" },\n          /^[\\x0B-\\f]/,\n          { type: \"class\", value: \"[\\\\x0B-\\\\f]\", description: \"[\\\\x0B-\\\\f]\" },\n          /^[\\x0E-]/,\n          { type: \"class\", value: \"[\\\\x0E-]\", description: \"[\\\\x0E-]\" },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n\n                                  if (options.startRule === 'SIP_URI') { data = data.uri;}\n                                },\n          \"sips\",\n          { type: \"literal\", value: \"sips\", description: \"\\\"sips\\\"\" },\n          \"sip\",\n          { type: \"literal\", value: \"sip\", description: \"\\\"sip\\\"\" },\n          function(uri_scheme) {\n                              data.scheme = uri_scheme.toLowerCase(); },\n          function() {\n                              data.user = decodeURIComponent(text().slice(0, -1));},\n          function() {\n                              data.password = text(); },\n          function() {\n                              data.host = text().toLowerCase();\n                              return data.host; },\n          function() {\n                            data.host_type = 'domain';\n                            return text(); },\n          /^[a-zA-Z0-9_\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n          /^[a-zA-Z0-9\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n          function() {\n                              data.host_type = 'IPv6';\n                              return text(); },\n          \"::\",\n          { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n          function() {\n                            data.host_type = 'IPv6';\n                            return text(); },\n          function() {\n                              data.host_type = 'IPv4';\n                              return text(); },\n          \"25\",\n          { type: \"literal\", value: \"25\", description: \"\\\"25\\\"\" },\n          /^[0-5]/,\n          { type: \"class\", value: \"[0-5]\", description: \"[0-5]\" },\n          \"2\",\n          { type: \"literal\", value: \"2\", description: \"\\\"2\\\"\" },\n          /^[0-4]/,\n          { type: \"class\", value: \"[0-4]\", description: \"[0-4]\" },\n          \"1\",\n          { type: \"literal\", value: \"1\", description: \"\\\"1\\\"\" },\n          /^[1-9]/,\n          { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n          function(port) {\n                              port = parseInt(port.join(''));\n                              data.port = port;\n                              return port; },\n          \"transport=\",\n          { type: \"literal\", value: \"transport=\", description: \"\\\"transport=\\\"\" },\n          \"udp\",\n          { type: \"literal\", value: \"udp\", description: \"\\\"udp\\\"\" },\n          \"tcp\",\n          { type: \"literal\", value: \"tcp\", description: \"\\\"tcp\\\"\" },\n          \"sctp\",\n          { type: \"literal\", value: \"sctp\", description: \"\\\"sctp\\\"\" },\n          \"tls\",\n          { type: \"literal\", value: \"tls\", description: \"\\\"tls\\\"\" },\n          function(transport) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['transport'] = transport.toLowerCase(); },\n          \"user=\",\n          { type: \"literal\", value: \"user=\", description: \"\\\"user=\\\"\" },\n          \"phone\",\n          { type: \"literal\", value: \"phone\", description: \"\\\"phone\\\"\" },\n          \"ip\",\n          { type: \"literal\", value: \"ip\", description: \"\\\"ip\\\"\" },\n          function(user) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['user'] = user.toLowerCase(); },\n          \"method=\",\n          { type: \"literal\", value: \"method=\", description: \"\\\"method=\\\"\" },\n          function(method) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['method'] = method; },\n          \"ttl=\",\n          { type: \"literal\", value: \"ttl=\", description: \"\\\"ttl=\\\"\" },\n          function(ttl) {\n                                if(!data.params) data.params={};\n                                data.params['ttl'] = ttl; },\n          \"maddr=\",\n          { type: \"literal\", value: \"maddr=\", description: \"\\\"maddr=\\\"\" },\n          function(maddr) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['maddr'] = maddr; },\n          \"lr\",\n          { type: \"literal\", value: \"lr\", description: \"\\\"lr\\\"\" },\n          function() {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['lr'] = undefined; },\n          function(param, value) {\n                                if(!data.uri_params) data.uri_params = {};\n                                if (value === null){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                data.uri_params[param.toLowerCase()] = value && value.toLowerCase();},\n          function(pname) {return pname.join(''); },\n          function(pvalue) {return pvalue.join(''); },\n          function(hname, hvalue) {\n                                hname = hname.join('').toLowerCase();\n                                hvalue = hvalue.join('');\n                                if(!data.uri_headers) data.uri_headers = {};\n                                if (!data.uri_headers[hname]) {\n                                  data.uri_headers[hname] = [hvalue];\n                                } else {\n                                  data.uri_headers[hname].push(hvalue);\n                                }},\n          function() {\n                                // lots of tests fail if this isn't guarded...\n                                if (options.startRule === 'Refer_To') {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n                                }\n                              },\n          \"//\",\n          { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n          function() {\n                              data.scheme= text(); },\n          { type: \"literal\", value: \"SIP\", description: \"\\\"SIP\\\"\" },\n          function() {\n                              data.sip_version = text(); },\n          \"INVITE\",\n          { type: \"literal\", value: \"INVITE\", description: \"\\\"INVITE\\\"\" },\n          \"ACK\",\n          { type: \"literal\", value: \"ACK\", description: \"\\\"ACK\\\"\" },\n          \"VXACH\",\n          { type: \"literal\", value: \"VXACH\", description: \"\\\"VXACH\\\"\" },\n          \"OPTIONS\",\n          { type: \"literal\", value: \"OPTIONS\", description: \"\\\"OPTIONS\\\"\" },\n          \"BYE\",\n          { type: \"literal\", value: \"BYE\", description: \"\\\"BYE\\\"\" },\n          \"CANCEL\",\n          { type: \"literal\", value: \"CANCEL\", description: \"\\\"CANCEL\\\"\" },\n          \"REGISTER\",\n          { type: \"literal\", value: \"REGISTER\", description: \"\\\"REGISTER\\\"\" },\n          \"SUBSCRIBE\",\n          { type: \"literal\", value: \"SUBSCRIBE\", description: \"\\\"SUBSCRIBE\\\"\" },\n          \"NOTIFY\",\n          { type: \"literal\", value: \"NOTIFY\", description: \"\\\"NOTIFY\\\"\" },\n          \"REFER\",\n          { type: \"literal\", value: \"REFER\", description: \"\\\"REFER\\\"\" },\n          function() {\n\n                              data.method = text();\n                              return data.method; },\n          function(status_code) {\n                            data.status_code = parseInt(status_code.join('')); },\n          function() {\n                            data.reason_phrase = text(); },\n          function() {\n                        data = text(); },\n          function() {\n                                  var idx, length;\n                                  length = data.multi_header.length;\n                                  for (idx = 0; idx < length; idx++) {\n                                    if (data.multi_header[idx].parsed === null) {\n                                      data = null;\n                                      break;\n                                    }\n                                  }\n                                  if (data !== null) {\n                                    data = data.multi_header;\n                                  } else {\n                                    data = -1;\n                                  }},\n          function() {\n                                  var header;\n                                  if(!data.multi_header) data.multi_header = [];\n                                  try {\n                                    header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                    delete data.uri;\n                                    delete data.displayName;\n                                    delete data.params;\n                                  } catch(e) {\n                                    header = null;\n                                  }\n                                  data.multi_header.push( { 'position': peg$currPos,\n                                                            'offset': offset(),\n                                                            'parsed': header\n                                                          });},\n          function(displayName) {\n                                  displayName = text().trim();\n                                  if (displayName[0] === '\\\"') {\n                                    displayName = displayName.substring(1, displayName.length-1);\n                                  }\n                                  data.displayName = displayName; },\n          \"q\",\n          { type: \"literal\", value: \"q\", description: \"\\\"q\\\"\" },\n          function(q) {\n                                  if(!data.params) data.params = {};\n                                  data.params['q'] = q; },\n          \"expires\",\n          { type: \"literal\", value: \"expires\", description: \"\\\"expires\\\"\" },\n          function(expires) {\n                                  if(!data.params) data.params = {};\n                                  data.params['expires'] = expires; },\n          function(delta_seconds) {\n                                  return parseInt(delta_seconds.join('')); },\n          \"0\",\n          { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n          function() {\n                                  return parseFloat(text()); },\n          function(param, value) {\n                                  if(!data.params) data.params = {};\n                                  if (value === null){\n                                    value = undefined;\n                                  }\n                                  else {\n                                    value = value[1];\n                                  }\n                                  data.params[param.toLowerCase()] = value;},\n          \"render\",\n          { type: \"literal\", value: \"render\", description: \"\\\"render\\\"\" },\n          \"session\",\n          { type: \"literal\", value: \"session\", description: \"\\\"session\\\"\" },\n          \"icon\",\n          { type: \"literal\", value: \"icon\", description: \"\\\"icon\\\"\" },\n          \"alert\",\n          { type: \"literal\", value: \"alert\", description: \"\\\"alert\\\"\" },\n          function() {\n                                      if (options.startRule === 'Content_Disposition') {\n                                        data.type = text().toLowerCase();\n                                      }\n                                    },\n          \"handling\",\n          { type: \"literal\", value: \"handling\", description: \"\\\"handling\\\"\" },\n          \"optional\",\n          { type: \"literal\", value: \"optional\", description: \"\\\"optional\\\"\" },\n          \"required\",\n          { type: \"literal\", value: \"required\", description: \"\\\"required\\\"\" },\n          function(length) {\n                                  data = parseInt(length.join('')); },\n          function() {\n                                  data = text(); },\n          \"text\",\n          { type: \"literal\", value: \"text\", description: \"\\\"text\\\"\" },\n          \"image\",\n          { type: \"literal\", value: \"image\", description: \"\\\"image\\\"\" },\n          \"audio\",\n          { type: \"literal\", value: \"audio\", description: \"\\\"audio\\\"\" },\n          \"video\",\n          { type: \"literal\", value: \"video\", description: \"\\\"video\\\"\" },\n          \"application\",\n          { type: \"literal\", value: \"application\", description: \"\\\"application\\\"\" },\n          \"message\",\n          { type: \"literal\", value: \"message\", description: \"\\\"message\\\"\" },\n          \"multipart\",\n          { type: \"literal\", value: \"multipart\", description: \"\\\"multipart\\\"\" },\n          \"x-\",\n          { type: \"literal\", value: \"x-\", description: \"\\\"x-\\\"\" },\n          function(cseq_value) {\n                            data.value=parseInt(cseq_value.join('')); },\n          function(expires) {data = expires; },\n          function(event_type) {\n                                 data.event = event_type.toLowerCase(); },\n          function() {\n                          var tag = data.tag;\n                            data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                            if (tag) {data.setParam('tag',tag)}\n                          },\n          \"tag\",\n          { type: \"literal\", value: \"tag\", description: \"\\\"tag\\\"\" },\n          function(tag) {data.tag = tag; },\n          function(forwards) {\n                            data = parseInt(forwards.join('')); },\n          function(min_expires) {data = min_expires; },\n          function() {\n                                  data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                },\n          \"digest\",\n          { type: \"literal\", value: \"Digest\", description: \"\\\"Digest\\\"\" },\n          \"realm\",\n          { type: \"literal\", value: \"realm\", description: \"\\\"realm\\\"\" },\n          function(realm) { data.realm = realm; },\n          \"domain\",\n          { type: \"literal\", value: \"domain\", description: \"\\\"domain\\\"\" },\n          \"nonce\",\n          { type: \"literal\", value: \"nonce\", description: \"\\\"nonce\\\"\" },\n          function(nonce) { data.nonce=nonce; },\n          \"opaque\",\n          { type: \"literal\", value: \"opaque\", description: \"\\\"opaque\\\"\" },\n          function(opaque) { data.opaque=opaque; },\n          \"stale\",\n          { type: \"literal\", value: \"stale\", description: \"\\\"stale\\\"\" },\n          \"true\",\n          { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n          function() { data.stale=true; },\n          \"false\",\n          { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n          function() { data.stale=false; },\n          \"algorithm\",\n          { type: \"literal\", value: \"algorithm\", description: \"\\\"algorithm\\\"\" },\n          \"md5\",\n          { type: \"literal\", value: \"MD5\", description: \"\\\"MD5\\\"\" },\n          \"md5-sess\",\n          { type: \"literal\", value: \"MD5-sess\", description: \"\\\"MD5-sess\\\"\" },\n          function(algorithm) {\n                                data.algorithm=algorithm.toUpperCase(); },\n          \"qop\",\n          { type: \"literal\", value: \"qop\", description: \"\\\"qop\\\"\" },\n          \"auth-int\",\n          { type: \"literal\", value: \"auth-int\", description: \"\\\"auth-int\\\"\" },\n          \"auth\",\n          { type: \"literal\", value: \"auth\", description: \"\\\"auth\\\"\" },\n          function(qop_value) {\n                                  data.qop || (data.qop=[]);\n                                  data.qop.push(qop_value.toLowerCase()); },\n          function(rack_value) {\n                            data.value=parseInt(rack_value.join('')); },\n          function() {\n                            var idx, length;\n                            length = data.multi_header.length;\n                            for (idx = 0; idx < length; idx++) {\n                              if (data.multi_header[idx].parsed === null) {\n                                data = null;\n                                break;\n                              }\n                            }\n                            if (data !== null) {\n                              data = data.multi_header;\n                            } else {\n                              data = -1;\n                            }},\n          function() {\n                            var header;\n                            if(!data.multi_header) data.multi_header = [];\n                            try {\n                              header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                              delete data.uri;\n                              delete data.displayName;\n                              delete data.params;\n                            } catch(e) {\n                              header = null;\n                            }\n                            data.multi_header.push( { 'position': peg$currPos,\n                                                      'offset': offset(),\n                                                      'parsed': header\n                                                    });},\n          function() {\n                        data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                      },\n          function(rseq_value) {\n                            data.value=parseInt(rseq_value.join('')); },\n          \"active\",\n          { type: \"literal\", value: \"active\", description: \"\\\"active\\\"\" },\n          \"pending\",\n          { type: \"literal\", value: \"pending\", description: \"\\\"pending\\\"\" },\n          \"terminated\",\n          { type: \"literal\", value: \"terminated\", description: \"\\\"terminated\\\"\" },\n          function() {\n                                  data.state = text(); },\n          \"reason\",\n          { type: \"literal\", value: \"reason\", description: \"\\\"reason\\\"\" },\n          function(reason) {\n                                  if (typeof reason !== 'undefined') data.reason = reason; },\n          function(expires) {\n                                  if (typeof expires !== 'undefined') data.expires = expires; },\n          \"retry_after\",\n          { type: \"literal\", value: \"retry_after\", description: \"\\\"retry_after\\\"\" },\n          function(retry_after) {\n                                  if (typeof retry_after !== 'undefined') data.retry_after = retry_after; },\n          \"deactivated\",\n          { type: \"literal\", value: \"deactivated\", description: \"\\\"deactivated\\\"\" },\n          \"probation\",\n          { type: \"literal\", value: \"probation\", description: \"\\\"probation\\\"\" },\n          \"rejected\",\n          { type: \"literal\", value: \"rejected\", description: \"\\\"rejected\\\"\" },\n          \"timeout\",\n          { type: \"literal\", value: \"timeout\", description: \"\\\"timeout\\\"\" },\n          \"giveup\",\n          { type: \"literal\", value: \"giveup\", description: \"\\\"giveup\\\"\" },\n          \"noresource\",\n          { type: \"literal\", value: \"noresource\", description: \"\\\"noresource\\\"\" },\n          \"invariant\",\n          { type: \"literal\", value: \"invariant\", description: \"\\\"invariant\\\"\" },\n          function() {\n                        var tag = data.tag;\n                          data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                          if (tag) {data.setParam('tag',tag)}\n                        },\n          \"ttl\",\n          { type: \"literal\", value: \"ttl\", description: \"\\\"ttl\\\"\" },\n          function(via_ttl_value) {\n                                data.ttl = via_ttl_value; },\n          \"maddr\",\n          { type: \"literal\", value: \"maddr\", description: \"\\\"maddr\\\"\" },\n          function(via_maddr) {\n                                data.maddr = via_maddr; },\n          \"received\",\n          { type: \"literal\", value: \"received\", description: \"\\\"received\\\"\" },\n          function(via_received) {\n                                data.received = via_received; },\n          \"branch\",\n          { type: \"literal\", value: \"branch\", description: \"\\\"branch\\\"\" },\n          function(via_branch) {\n                                data.branch = via_branch; },\n          \"rport\",\n          { type: \"literal\", value: \"rport\", description: \"\\\"rport\\\"\" },\n          function() {\n                                if(typeof response_port !== 'undefined')\n                                  data.rport = response_port.join(''); },\n          function(via_protocol) {\n                                data.protocol = via_protocol; },\n          { type: \"literal\", value: \"UDP\", description: \"\\\"UDP\\\"\" },\n          { type: \"literal\", value: \"TCP\", description: \"\\\"TCP\\\"\" },\n          { type: \"literal\", value: \"TLS\", description: \"\\\"TLS\\\"\" },\n          { type: \"literal\", value: \"SCTP\", description: \"\\\"SCTP\\\"\" },\n          function(via_transport) {\n                                data.transport = via_transport; },\n          function() {\n                                data.host = text(); },\n          function(via_sent_by_port) {\n                                data.port = parseInt(via_sent_by_port.join('')); },\n          function(ttl) {\n                                return parseInt(ttl.join('')); },\n          \"stuns\",\n          { type: \"literal\", value: \"stuns\", description: \"\\\"stuns\\\"\" },\n          \"stun\",\n          { type: \"literal\", value: \"stun\", description: \"\\\"stun\\\"\" },\n          function(scheme) {\n                                data.scheme = scheme; },\n          function(host) {\n                                data.host = host; },\n          function() {\n                                return text(); },\n          \"?transport=\",\n          { type: \"literal\", value: \"?transport=\", description: \"\\\"?transport=\\\"\" },\n          \"turns\",\n          { type: \"literal\", value: \"turns\", description: \"\\\"turns\\\"\" },\n          \"turn\",\n          { type: \"literal\", value: \"turn\", description: \"\\\"turn\\\"\" },\n          function() {\n                                data.transport = transport; },\n          function() {\n                            data = text(); }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\". \\\"\\\"2 3!\"),\n          peg$decode(\"0\\\"\\\"\\\"1!3#\"),\n          peg$decode(\"0$\\\"\\\"1!3%\"),\n          peg$decode(\"0&\\\"\\\"1!3'\"),\n          peg$decode(\"7'*# \\\"7(\"),\n          peg$decode(\"0(\\\"\\\"1!3)\"),\n          peg$decode(\"0*\\\"\\\"1!3+\"),\n          peg$decode(\".,\\\"\\\"2,3-\"),\n          peg$decode(\"..\\\"\\\"2.3/\"),\n          peg$decode(\"00\\\"\\\"1!31\"),\n          peg$decode(\".2\\\"\\\"2233*\\x89 \\\".4\\\"\\\"2435*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"7)*# \\\"7,\"),\n          peg$decode(\".F\\\"\\\"2F3G*} \\\".H\\\"\\\"2H3I*q \\\".J\\\"\\\"2J3K*e \\\".L\\\"\\\"2L3M*Y \\\".N\\\"\\\"2N3O*M \\\".P\\\"\\\"2P3Q*A \\\".R\\\"\\\"2R3S*5 \\\".T\\\"\\\"2T3U*) \\\".V\\\"\\\"2V3W\"),\n          peg$decode(\"!!.Y\\\"\\\"2Y3Z+7$7#+-%7#+#%'#%$## X$\\\"# X\\\"# X+' 4!6[!! %\"),\n          peg$decode(\"!! ]7$,#&7$\\\"+-$7 +#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+@$ ]7$+&$,#&7$\\\"\\\"\\\" X+'%4\\\"6^\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*# \\\" \\\\\"),\n          peg$decode(\"! ]7'*# \\\"7(,)&7'*# \\\"7(\\\"+A$.8\\\"\\\"2839+1%7/+'%4#6_# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]72+&$,#&72\\\"\\\"\\\" X+s$ ]! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X,@&! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6`\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"0a\\\"\\\"1!3b*# \\\"73\"),\n          peg$decode(\"0c\\\"\\\"1!3d\"),\n          peg$decode(\"0e\\\"\\\"1!3f\"),\n          peg$decode(\"7!*) \\\"0g\\\"\\\"1!3h\"),\n          peg$decode(\"! ]7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x9E$,\\x9B&7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"! ]7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x92$,\\x8F&7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\".T\\\"\\\"2T3U*\\xE3 \\\".V\\\"\\\"2V3W*\\xD7 \\\".l\\\"\\\"2l3m*\\xCB \\\".n\\\"\\\"2n3o*\\xBF \\\".:\\\"\\\"2:3;*\\xB3 \\\".D\\\"\\\"2D3E*\\xA7 \\\".2\\\"\\\"2233*\\x9B \\\".8\\\"\\\"2839*\\x8F \\\".p\\\"\\\"2p3q*\\x83 \\\"7&*} \\\".4\\\"\\\"2435*q \\\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".6\\\"\\\"2637*M \\\".>\\\"\\\"2>3?*A \\\".v\\\"\\\"2v3w*5 \\\".x\\\"\\\"2x3y*) \\\"7'*# \\\"7(\"),\n          peg$decode(\"! ]7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y+\\u0134$,\\u0131&7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"!7/+A$.P\\\"\\\"2P3Q+1%7/+'%4#6z# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.4\\\"\\\"2435+1%7/+'%4#6{# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.>\\\"\\\"2>3?+1%7/+'%4#6|# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.T\\\"\\\"2T3U+1%7/+'%4#6}# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.V\\\"\\\"2V3W+1%7/+'%4#6~# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.n\\\"\\\"2n3o+1$7/+'%4\\\"6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+7$.l\\\"\\\"2l3m+'%4\\\"6\\x80\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.D\\\"\\\"2D3E+1%7/+'%4#6\\x81# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.2\\\"\\\"2233+1%7/+'%4#6\\x82# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.8\\\"\\\"2839+1%7/+'%4#6\\x83# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+1$7&+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7&+1$7/+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7=+W$ ]7G*) \\\"7K*# \\\"7F,/&7G*) \\\"7K*# \\\"7F\\\"+-%7>+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"0\\x85\\\"\\\"1!3\\x86*A \\\"0\\x87\\\"\\\"1!3\\x88*5 \\\"0\\x89\\\"\\\"1!3\\x8A*) \\\"73*# \\\"7.\"),\n          peg$decode(\"!7/+Y$7&+O% ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+1%7&+'%4$6k$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+`$7&+V%! ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+! (%+2%7&+(%4$6\\x8B$!!%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*G \\\".L\\\"\\\"2L3M*; \\\"0\\x8C\\\"\\\"1!3\\x8D*/ \\\"0\\x89\\\"\\\"1!3\\x8A*# \\\"73\"),\n          peg$decode(\"!.p\\\"\\\"2p3q+K$0\\x8E\\\"\\\"1!3\\x8F*5 \\\"0\\x90\\\"\\\"1!3\\x91*) \\\"0\\x92\\\"\\\"1!3\\x93+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+Q$.8\\\"\\\"2839+A%7O*# \\\" \\\\+1%7S+'%4$6\\x94$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+k$.8\\\"\\\"2839+[%7O*# \\\" \\\\+K%7S+A%7_+7%7l*# \\\" \\\\+'%4&6\\x95& %$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x96\\\"\\\"1$3\\x97*) \\\"/\\x98\\\"\\\"1#3\\x99+' 4!6\\x9A!! %\"),\n          peg$decode(\"!7P+b$!.8\\\"\\\"2839+-$7R+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+7%.:\\\"\\\"2:3;+'%4#6\\x9B# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7+*) \\\"7-*# \\\"7Q+2$,/&7+*) \\\"7-*# \\\"7Q\\\"\\\"\\\" X\"),\n          peg$decode(\".<\\\"\\\"2<3=*q \\\".>\\\"\\\"2>3?*e \\\".@\\\"\\\"2@3A*Y \\\".B\\\"\\\"2B3C*M \\\".D\\\"\\\"2D3E*A \\\".2\\\"\\\"2233*5 \\\".6\\\"\\\"2637*) \\\".4\\\"\\\"2435\"),\n          peg$decode(\"! ]7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E,e&7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\\\"+& 4!6\\x9C! %\"),\n          peg$decode(\"!7T+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\x9D! %\"),\n          peg$decode(\"! ]!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X,>&!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X\\\"+G$7W+=%.J\\\"\\\"2J3K*# \\\" \\\\+'%4#6\\x9E# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]0\\x9F\\\"\\\"1!3\\xA0+,$,)&0\\x9F\\\"\\\"1!3\\xA0\\\"\\\"\\\" X\"),\n          peg$decode(\"!0$\\\"\\\"1!3%+A$ ]0\\xA1\\\"\\\"1!3\\xA2,)&0\\xA1\\\"\\\"1!3\\xA2\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.r\\\"\\\"2r3s+A$7Y+7%.t\\\"\\\"2t3u+'%4#6\\xA3# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!7Z+\\xBF$.8\\\"\\\"2839+\\xAF%7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0838 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\xAF$7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0795 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95$7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u070C \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+{$7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u069D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+a$7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0648 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+G$7Z+=%.8\\\"\\\"2839+-%7[+#%'$%$$# X$## X$\\\"# X\\\"# X*\\u060D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7[+#%'\\\"%$\\\"# X\\\"# X*\\u05EC \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7Z+#%'\\\"%$\\\"# X\\\"# X*\\u05CB \\\"!7Z+\\xA5$.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0538 \\\"!7Z+\\xB6$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x8B%.\\xA4\\\"\\\"2\\xA43\\xA5+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0494 \\\"!7Z+\\xC7$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x9C%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+q%.\\xA4\\\"\\\"2\\xA43\\xA5+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u03DF \\\"!7Z+\\xD8$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xAD%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x82%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+W%.\\xA4\\\"\\\"2\\xA43\\xA5+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0319 \\\"!7Z+\\xE9$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0242 \\\"!7Z+\\u0114$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xE9%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0140 \\\"!7Z+\\u0135$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\u010A%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xDF%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xB4%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x89%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+^%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+3%.\\xA4\\\"\\\"2\\xA43\\xA5+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X+& 4!6\\xA6! %\"),\n          peg$decode(\"!7#+S$7#*# \\\" \\\\+C%7#*# \\\" \\\\+3%7#*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7Z+=$.8\\\"\\\"2839+-%7Z+#%'#%$## X$\\\"# X\\\"# X*# \\\"7\\\\\"),\n          peg$decode(\"!7]+u$.J\\\"\\\"2J3K+e%7]+[%.J\\\"\\\"2J3K+K%7]+A%.J\\\"\\\"2J3K+1%7]+'%4'6\\xA7' %$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xA8\\\"\\\"2\\xA83\\xA9+3$0\\xAA\\\"\\\"1!3\\xAB+#%'\\\"%$\\\"# X\\\"# X*\\xA0 \\\"!.\\xAC\\\"\\\"2\\xAC3\\xAD+=$0\\xAE\\\"\\\"1!3\\xAF+-%7!+#%'#%$## X$\\\"# X\\\"# X*o \\\"!.\\xB0\\\"\\\"2\\xB03\\xB1+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X*D \\\"!0\\xB2\\\"\\\"1!3\\xB3+-$7!+#%'\\\"%$\\\"# X\\\"# X*# \\\"7!\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\xB4!! %\"),\n          peg$decode(\" ]!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X\\\"\"),\n          peg$decode(\"7a*A \\\"7b*; \\\"7c*5 \\\"7d*/ \\\"7e*) \\\"7f*# \\\"7g\"),\n          peg$decode(\"!/\\xB5\\\"\\\"1*3\\xB6+b$/\\xB7\\\"\\\"1#3\\xB8*G \\\"/\\xB9\\\"\\\"1#3\\xBA*; \\\"/\\xBB\\\"\\\"1$3\\xBC*/ \\\"/\\xBD\\\"\\\"1#3\\xBE*# \\\"76+(%4\\\"6\\xBF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC0\\\"\\\"1%3\\xC1+J$/\\xC2\\\"\\\"1%3\\xC3*/ \\\"/\\xC4\\\"\\\"1\\\"3\\xC5*# \\\"76+(%4\\\"6\\xC6\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC7\\\"\\\"1'3\\xC8+2$7\\x8F+(%4\\\"6\\xC9\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCA\\\"\\\"1$3\\xCB+2$7\\xEC+(%4\\\"6\\xCC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCD\\\"\\\"1&3\\xCE+2$7T+(%4\\\"6\\xCF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xD0\\\"\\\"1\\\"3\\xD1+R$!.>\\\"\\\"2>3?+-$76+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xD2\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7h+T$!.>\\\"\\\"2>3?+-$7i+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\xD3\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD4!! %\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD5!! %\"),\n          peg$decode(\"7k*) \\\"7+*# \\\"7-\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".8\\\"\\\"2839*A \\\".<\\\"\\\"2<3=*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"!.6\\\"\\\"2637+u$7m+k% ]!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X,>&!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7n+C$.>\\\"\\\"2>3?+3%7o+)%4#6\\xD6#\\\"\\\" %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-+2$,/&7p*) \\\"7+*# \\\"7-\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-,/&7p*) \\\"7+*# \\\"7-\\\"\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".6\\\"\\\"2637*A \\\".8\\\"\\\"2839*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"7\\x90*# \\\"7r\"),\n          peg$decode(\"!7\\x8F+K$7'+A%7s+7%7'+-%7\\x84+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7M*# \\\"7t\"),\n          peg$decode(\"!7+G$.8\\\"\\\"2839+7%7u*# \\\"7x+'%4#6\\xD7# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7v*# \\\"7w+N$!.6\\\"\\\"2637+-$7\\x83+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xD8\\\"\\\"2\\xD83\\xD9+=$7\\x80+3%7w*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.4\\\"\\\"2435+-$7{+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7z+5$ ]7y,#&7y\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7**) \\\"7+*# \\\"7-\"),\n          peg$decode(\"7+*\\x8F \\\"7-*\\x89 \\\".2\\\"\\\"2233*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7|+k$ ]!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X,>&!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7~,#&7~\\\"+k$ ]!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7~,#&7~\\\"\"),\n          peg$decode(\"7+*w \\\"7-*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7\\\"+\\x8D$ ]7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K,M&7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K\\\"+'%4\\\"6\\xDA\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\x81*# \\\"7\\x82\"),\n          peg$decode(\"!!7O+3$.:\\\"\\\"2:3;+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+-$7S+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\" ]7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A+\\x8C$,\\x89&7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7y,#&7y\\\"\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB+y$.4\\\"\\\"2435+i% ]7!+&$,#&7!\\\"\\\"\\\" X+P%.J\\\"\\\"2J3K+@% ]7!+&$,#&7!\\\"\\\"\\\" X+'%4%6\\xDC% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\".\\xDD\\\"\\\"2\\xDD3\\xDE\"),\n          peg$decode(\".\\xDF\\\"\\\"2\\xDF3\\xE0\"),\n          peg$decode(\".\\xE1\\\"\\\"2\\xE13\\xE2\"),\n          peg$decode(\".\\xE3\\\"\\\"2\\xE33\\xE4\"),\n          peg$decode(\".\\xE5\\\"\\\"2\\xE53\\xE6\"),\n          peg$decode(\".\\xE7\\\"\\\"2\\xE73\\xE8\"),\n          peg$decode(\".\\xE9\\\"\\\"2\\xE93\\xEA\"),\n          peg$decode(\".\\xEB\\\"\\\"2\\xEB3\\xEC\"),\n          peg$decode(\".\\xED\\\"\\\"2\\xED3\\xEE\"),\n          peg$decode(\".\\xEF\\\"\\\"2\\xEF3\\xF0\"),\n          peg$decode(\"!7\\x85*S \\\"7\\x86*M \\\"7\\x88*G \\\"7\\x89*A \\\"7\\x8A*; \\\"7\\x8B*5 \\\"7\\x8C*/ \\\"7\\x8D*) \\\"7\\x8E*# \\\"76+& 4!6\\xF1! %\"),\n          peg$decode(\"!7\\x84+K$7'+A%7\\x91+7%7'+-%7\\x93+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x92+' 4!6\\xF2!! %\"),\n          peg$decode(\"!7!+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(,G&7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(\\\"+& 4!6\\xF3! %\"),\n          peg$decode(\"!7\\xB5+_$ ]!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!79+R$!.:\\\"\\\"2:3;+-$79+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xF4\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7:*j \\\"!7\\x97+_$ ]!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+& 4!6\\xF5! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\xF6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x99*# \\\" \\\\+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!76+_$ ]!7.+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7.+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\"7H+' 4!6\\xF7!! %\"),\n          peg$decode(\"7\\x9B*) \\\"7\\x9C*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\xF8\\\"\\\"1!3\\xF9+<$7<+2%7\\x9E+(%4#6\\xFA#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\xFD#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\xFE!! %\"),\n          peg$decode(\"!.\\xFF\\\"\\\"2\\xFF3\\u0100+x$!.J\\\"\\\"2J3K+S$7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0101\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+N$!7<+-$7\\xA0+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\u0102\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"76*) \\\"7T*# \\\"7H\"),\n          peg$decode(\"!7\\xA2+_$ ]!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0103\\\"\\\"1&3\\u0104*G \\\"/\\u0105\\\"\\\"1'3\\u0106*; \\\"/\\u0107\\\"\\\"1$3\\u0108*/ \\\"/\\u0109\\\"\\\"1%3\\u010A*# \\\"76+& 4!6\\u010B! %\"),\n          peg$decode(\"7\\xA4*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u010C\\\"\\\"1(3\\u010D+O$7<+E%/\\u010E\\\"\\\"1(3\\u010F*/ \\\"/\\u0110\\\"\\\"1(3\\u0111*# \\\"76+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0112!! %\"),\n          peg$decode(\"!7\\xA8+& 4!6\\u0113! %\"),\n          peg$decode(\"!7\\xA9+s$7;+i%7\\xAE+_% ]!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAA*# \\\"7\\xAB\"),\n          peg$decode(\"/\\u0114\\\"\\\"1$3\\u0115*S \\\"/\\u0116\\\"\\\"1%3\\u0117*G \\\"/\\u0118\\\"\\\"1%3\\u0119*; \\\"/\\u011A\\\"\\\"1%3\\u011B*/ \\\"/\\u011C\\\"\\\"1+3\\u011D*# \\\"7\\xAC\"),\n          peg$decode(\"/\\u011E\\\"\\\"1'3\\u011F*/ \\\"/\\u0120\\\"\\\"1)3\\u0121*# \\\"7\\xAC\"),\n          peg$decode(\"76*# \\\"7\\xAD\"),\n          peg$decode(\"!/\\u0122\\\"\\\"1\\\"3\\u0123+-$76+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAC*# \\\"76\"),\n          peg$decode(\"!76+7$7<+-%7\\xB0+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"76*# \\\"7H\"),\n          peg$decode(\"!7\\xB2+7$7.+-%7\\x8F+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0124!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0125!! %\"),\n          peg$decode(\"!7\\xB5+d$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0126\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!!77+k$ ]!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X,>&!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0127\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0128\\\"\\\"1#3\\u0129+<$7<+2%76+(%4#6\\u012A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u012B!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u012C!! %\"),\n          peg$decode(\"! ]7\\x99,#&7\\x99\\\"+\\x81$7@+w%7M+m%7?+c% ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4%6\\u012D% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!/\\u012E\\\"\\\"1&3\\u012F+s$7.+i%7\\xC0+_% ]!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\"7\\xBE\"),\n          peg$decode(\"!76+s$7.+i%7\\xBF+_% ]!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+=$7<+3%76*# \\\"7H+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xC1*G \\\"7\\xC3*A \\\"7\\xC5*; \\\"7\\xC7*5 \\\"7\\xC8*/ \\\"7\\xC9*) \\\"7\\xCA*# \\\"7\\xBF\"),\n          peg$decode(\"!/\\u0130\\\"\\\"1%3\\u0131+7$7<+-%7\\xC2+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0132!! %\"),\n          peg$decode(\"!/\\u0133\\\"\\\"1&3\\u0134+\\xA5$7<+\\x9B%7D+\\x91%7\\xC4+\\x87% ]! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X,G&! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X\\\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7t*# \\\"7w\"),\n          peg$decode(\"!/\\u0135\\\"\\\"1%3\\u0136+7$7<+-%7\\xC6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0137!! %\"),\n          peg$decode(\"!/\\u0138\\\"\\\"1&3\\u0139+<$7<+2%7I+(%4#6\\u013A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u013B\\\"\\\"1%3\\u013C+_$7<+U%!/\\u013D\\\"\\\"1$3\\u013E+& 4!6\\u013F! %*4 \\\"!/\\u0140\\\"\\\"1%3\\u0141+& 4!6\\u0142! %+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0143\\\"\\\"1)3\\u0144+T$7<+J%/\\u0145\\\"\\\"1#3\\u0146*/ \\\"/\\u0147\\\"\\\"1(3\\u0148*# \\\"76+(%4#6\\u0149#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014A\\\"\\\"1#3\\u014B+\\x9E$7<+\\x94%7D+\\x8A%!7\\xCB+k$ ]!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X,>&!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+-%7E+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014C\\\"\\\"1(3\\u014D*/ \\\"/\\u014E\\\"\\\"1$3\\u014F*# \\\"76+' 4!6\\u0150!! %\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xCE+K$7.+A%7\\xCE+7%7.+-%7\\x8F+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0151!! %\"),\n          peg$decode(\"!7\\xD0+c$ ]!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0152\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0153\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7L*) \\\"7\\x98*# \\\"7t+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0154\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xD4+_$ ]!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+_$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0155!! %\"),\n          peg$decode(\"!7\\xD7+_$ ]!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0156\\\"\\\"1&3\\u0157*; \\\"/\\u0158\\\"\\\"1'3\\u0159*/ \\\"/\\u015A\\\"\\\"1*3\\u015B*# \\\"76+& 4!6\\u015C! %\"),\n          peg$decode(\"!/\\u015D\\\"\\\"1&3\\u015E+<$7<+2%7\\xD9+(%4#6\\u015F#! %$## X$\\\"# X\\\"# X*\\x83 \\\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\u0160#! %$## X$\\\"# X\\\"# X*S \\\"!/\\u0161\\\"\\\"1+3\\u0162+<$7<+2%7\\x9D+(%4#6\\u0163#! %$## X$\\\"# X\\\"# X*# \\\"7\\x9F\"),\n          peg$decode(\"/\\u0164\\\"\\\"1+3\\u0165*k \\\"/\\u0166\\\"\\\"1)3\\u0167*_ \\\"/\\u0168\\\"\\\"1(3\\u0169*S \\\"/\\u016A\\\"\\\"1'3\\u016B*G \\\"/\\u016C\\\"\\\"1&3\\u016D*; \\\"/\\u016E\\\"\\\"1*3\\u016F*/ \\\"/\\u0170\\\"\\\"1)3\\u0171*# \\\"76\"),\n          peg$decode(\"71*# \\\" \\\\\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0172\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!7\\xDF+_$ ]!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE6+s$7.+i%7\\xE9+_% ]!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xE1*; \\\"7\\xE2*5 \\\"7\\xE3*/ \\\"7\\xE4*) \\\"7\\xE5*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0173\\\"\\\"1#3\\u0174+<$7<+2%7\\xEC+(%4#6\\u0175#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0176\\\"\\\"1%3\\u0177+<$7<+2%7T+(%4#6\\u0178#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0179\\\"\\\"1(3\\u017A+B$7<+8%7\\\\*# \\\"7Y+(%4#6\\u017B#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017C\\\"\\\"1&3\\u017D+<$7<+2%76+(%4#6\\u017E#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017F\\\"\\\"1%3\\u0180+T$!7<+5$ ]7!,#&7!\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0181\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE7+K$7;+A%76+7%7;+-%7\\xE8+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB*# \\\"76+' 4!6\\u0182!! %\"),\n          peg$decode(\"!/\\xB7\\\"\\\"1#3\\u0183*G \\\"/\\xB9\\\"\\\"1#3\\u0184*; \\\"/\\xBD\\\"\\\"1#3\\u0185*/ \\\"/\\xBB\\\"\\\"1$3\\u0186*# \\\"76+' 4!6\\u0187!! %\"),\n          peg$decode(\"!7\\xEA+H$!7C+-$7\\xEB+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\u0188! %\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\u0189!! %\"),\n          peg$decode(\"!!7!+C$7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X+' 4!6\\u018A!! %\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!76+7$70+-%7\\xEF+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]72*) \\\"74*# \\\"7.,/&72*) \\\"74*# \\\"7.\\\"\"),\n          peg$decode(\" ]7%,#&7%\\\"\"),\n          peg$decode(\"!7\\xF2+=$.8\\\"\\\"2839+-%7\\xF3+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u018B\\\"\\\"1%3\\u018C*) \\\"/\\u018D\\\"\\\"1$3\\u018E+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xF4+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\\\*) \\\"7X*# \\\"7\\x82+' 4!6\\u0190!! %\"),\n          peg$decode(\"! ]7\\xF6*) \\\"7-*# \\\"7\\xF7,/&7\\xF6*) \\\"7-*# \\\"7\\xF7\\\"+& 4!6\\u0191! %\"),\n          peg$decode(\"7\\\"*S \\\"7!*M \\\".F\\\"\\\"2F3G*A \\\".J\\\"\\\"2J3K*5 \\\".H\\\"\\\"2H3I*) \\\".N\\\"\\\"2N3O\"),\n          peg$decode(\".L\\\"\\\"2L3M*\\x95 \\\".B\\\"\\\"2B3C*\\x89 \\\".<\\\"\\\"2<3=*} \\\".R\\\"\\\"2R3S*q \\\".T\\\"\\\"2T3U*e \\\".V\\\"\\\"2V3W*Y \\\".P\\\"\\\"2P3Q*M \\\".@\\\"\\\"2@3A*A \\\".D\\\"\\\"2D3E*5 \\\".2\\\"\\\"2233*) \\\".>\\\"\\\"2>3?\"),\n          peg$decode(\"!7\\xF9+h$.8\\\"\\\"2839+X%7\\xF3+N%!.\\u0192\\\"\\\"2\\u01923\\u0193+-$7\\xE8+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0194\\\"\\\"1%3\\u0195*) \\\"/\\u0196\\\"\\\"1$3\\u0197+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xE8+Q$/\\xB7\\\"\\\"1#3\\xB8*7 \\\"/\\xB9\\\"\\\"1#3\\xBA*+ \\\" ]7+,#&7+\\\"+'%4\\\"6\\u0198\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFD+\\x8F$.F\\\"\\\"2F3G+%7\\xFC+u%.F\\\"\\\"2F3G+e%7\\xFC+[%.F\\\"\\\"2F3G+K%7\\xFC+A%.F\\\"\\\"2F3G+1%7\\xFE+'%4)6\\u0199) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+-$7\\xFC+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+7$7\\xFC+-%7\\xFC+#%'#%$## X$\\\"# X\\\"# X\")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n    var data = {};\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return data;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      return -1;\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       function (input, startRule) {return parse(input, {startRule: startRule});}\n  };\n};\n/* jshint ignore:end */\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\nvar EventEmitter = function() {\n    this.handlers = {};\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.emit = function(name /*, args */) {\n    var self = this, args = Array.prototype.slice.call(arguments, 1);\n    if (name in this.handlers) {\n        var list = this.handlers[name];\n        for (var i = 0; i < list.length; i++) {\n            setTimeout(executeListener(list[i]), 0);\n        }\n    }\n    function executeListener(listener) {\n        return function() {\n            listener.apply(self, args);\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.on = function(name, listener) {\n    if (!Array.isArray(name)) name = [name];\n    for (var i = 0; i < name.length; i++) {\n        this.handlers[name[i]] = this.handlers[name[i]] || [];\n        var list = this.handlers[name[i]];\n        list.push(listener);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.off = function(name, listener) {\n    this.handlers[name] = this.handlers[name] || [];\n    var index = this.handlers[name].indexOf(listener);\n    if (index !== -1) {\n        this.handlers[name].splice(index, 1);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nEventEmitter.prototype.once = function(name, listener) {\n    var self = this;\n\n    function listenOnce() {\n        listener.apply(this, arguments);\n        self.off(name, listenOnce);\n    }\n\n    self.on(name, listenOnce);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME Remove Angular-specific\n//monkey patching emit for assuring that $apply is called\nvar __emit = EventEmitter.prototype.emit;\nEventEmitter.prototype.emit = function() {\n    var self = this, args = arguments;\n    setTimeout(function() {\n        __emit.apply(self, args);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = EventEmitter;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar EventEmitter = __webpack_require__(35);\nvar PhoneLine = __webpack_require__(37);\nvar utils = __webpack_require__(38);\n\nvar extend = utils.extend;\nvar uuid = utils.uuid;\n\nvar EVENT_NAMES = __webpack_require__(39);\nvar DomAudio = __webpack_require__(40);\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param options\n * @constructor\n */\nvar UserAgent = function(options) {\n    this.eventEmitter = new EventEmitter();\n    this.sipConfig = options ? (options.sipConfig || {}) : ({});\n    this.lines = {};\n    this.userAgent = undefined;\n    this.getUserMedia = undefined;\n    this.RTCPeerConnection = undefined;\n    this.RTCSessionDescription = undefined;\n    this.dom = new DomAudio();\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.checkConfig = function() {\n    // set mootools expands to non-enumerables under ES5\n    if (typeof this.sipConfig.wsServers === 'string') {\n        this.sipConfig.wsServers = [\n            {ws_uri: this.sipConfig.wsServers}\n        ];\n    }\n    var key, enums = {enumerable: false};\n    for (key in this.sipConfig.wsServers) this.sipConfig.wsServers.hasOwnProperty(key) || Object.defineProperty(Array.prototype, key, enums);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.setSIPConfig = function(config) {\n    var wsServers = config.wsServers,\n        useSecureConnection = (document.location.protocol == 'https:');\n\n    for (var i = 0; i < wsServers.length; i++) {\n        if (\n            (useSecureConnection && /^wss:/.test(wsServers[i]))\n            ||\n            (!useSecureConnection && /^ws:/.test(wsServers[i]))\n        ) {\n            config.wsServers = [wsServers[i]];\n            break;\n        }\n    }\n\n    this.sipConfig = config;\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__createLine = function(session, type) {\n    var self = this;\n    session.data.id = uuid();\n    self.eventEmitter.emit(EVENT_NAMES.sipRTCSession, session);\n    var line = new PhoneLine({\n        session: session,\n        userAgent: self,\n        instanceId: self.sipConfig.authorizationUser,\n        eventEmitter: self.eventEmitter,\n        type: type\n    });\n    self.__clearInactiveLines();\n    self.lines[session.data.id] = line;\n    window.line = line;\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLines = function() {\n    this.__clearInactiveLines();\n    return this.lines;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLinesArray = function() {\n    var lines = this.getActiveLines();\n    var arr = [];\n    for (var id in lines) {\n        if (lines.hasOwnProperty(id)) {\n            arr.push(lines[id]);\n        }\n    }\n    return arr;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getIncomingLinesArray = function() {\n    return this.getActiveLinesArray().filter(function(el) {\n        return el.isIncoming();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__clearInactiveLines = function() {\n    for (var id in this.lines) {\n        if (this.lines.hasOwnProperty(id)) {\n            if (this.lines[id].isClosed()) {\n                delete this.lines[id];\n            }\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nvar __disconnectCount = 0;\n\n\nUserAgent.prototype.start = function(options) {\n    var self = this;\n\n    self.stop();\n    if (self.userAgent instanceof SIP.UA) {\n        self.userAgent.loadConfig(self.sipConfig);\n        self.userAgent.traceSip = true;\n    }\n    else {\n        self.userAgent = new SIP.UA(self.sipConfig);\n        self.__registerExtraOptions = options || {};\n        self.userAgent.on('connected', function(e) {\n            __disconnectCount = 0;\n            self.eventEmitter.emit(EVENT_NAMES.sipConnected, e);\n            self.userAgent.register({\n                extraHeaders: options.extraHeaders || []\n            });\n        });\n        self.userAgent.on('disconnected', function(e) {\n            if (++__disconnectCount >= (self.sipConfig.retryCount || 3)) {\n                __disconnectCount = 0;\n                self.stop();\n                self.eventEmitter.emit(EVENT_NAMES.sipConnectionFailed, new Error(\"Unable to connect to the WS server: exceeded number of attempts\"));\n            }\n            self.eventEmitter.emit(EVENT_NAMES.sipDisconnected, e);\n        });\n        self.userAgent.on('registered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistered, e);\n        });\n        self.userAgent.on('unregistered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipUnRegistered, e);\n        });\n        self.userAgent.on('registrationFailed', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistrationFailed, e);\n        });\n        //happens when call is incoming\n        self.userAgent.on('invite', function(session) {\n            var newLine;\n\n            if (session && session.request && session.request.hasHeader('replaces')) {\n                var replaces = session.request.getHeader('replaces').split(';'),\n                    callId = replaces[0],\n                    lines = self.getActiveLinesArray(),\n                    foundLine = null;\n                for (var i = 0; i < lines.length; i++) {\n                    if (lines[i].session.request.call_id) {\n                        if (callId === lines[i].session.request.call_id) {\n                            foundLine = lines[i];\n                            break;\n                        }\n                    }\n                }\n\n                if (foundLine) {\n                    var originalSessionId = foundLine.getId();\n                    newLine = self.__createLine(session, PhoneLine.types.incoming);\n                    newLine.answer().then(function() {\n                        self.eventEmitter.emit(EVENT_NAMES.callReplaced, newLine, foundLine);\n                        foundLine.cancel();\n                    });\n                }\n            }\n            else {\n                newLine = self.__createLine(session, PhoneLine.types.incoming);\n                self.eventEmitter.emit(EVENT_NAMES.sipIncomingCall, newLine);\n            }\n        });\n    }\n    //noop on transport connected (this will cause unwanted REGISTER)\n    self.userAgent.registerContext.onTransportConnected = function() {};\n    self.userAgent.start();\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.reregister = function(options, reconnect) {\n    var self = this, reconnect = !!reconnect;\n    options = extend(self.__registerExtraOptions, options);\n    if (!self.userAgent) {\n        self.start(options);\n    }\n    if (!reconnect) {\n        self.userAgent.register(options);\n    }\n    else {\n        if (!self.isConnected()) {\n            self.stop();\n            self.start(options);\n        }\n        else {\n            //This will be treated as abrupt disconnection and SIP.js will try to reconnect the WS\n            self.userAgent.transport.ws.close();\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.stop = function() {\n    if (this.userAgent instanceof SIP.UA) {\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.call = function(number, inviteOptions) {\n    var self = this;\n    var options = {\n        media: {\n            constraints: {audio: true, video: false},\n            render: {\n                local: {\n                    audio: self.dom.localAudio\n                },\n                remote: {\n                    audio: self.dom.remoteAudio\n                }\n            }\n        },\n        RTCConstraints: {\n            \"optional\": [\n                {'DtlsSrtpKeyAgreement': 'true'}\n            ]\n        }\n    };\n    var fromNumber = inviteOptions.fromNumber;\n    var country = inviteOptions.country;\n\n    var headers = [];\n    if (fromNumber) {\n        headers.push('P-Asserted-Identity: sip:' + fromNumber + '@' + this.sipConfig.domain);\n    }\n    if (country) {\n        headers.push('P-rc-country-id: ' + country);\n    }\n    extend(options, {\n        extraHeaders: headers\n    });\n    var session = this.userAgent.invite('' + number, options);\n    var line = self.__createLine(session, PhoneLine.types.outgoing);\n    this.eventEmitter.emit(EVENT_NAMES.outgoingCall, line);\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.answer = function(line) {\n    return line && line.answer();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nUserAgent.prototype.hangup = function(line) {\n    if (line) {\n        line.cancel();\n        delete this.lines[line.getId()];\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.on = function(eventName, cb) {\n    this.eventEmitter.on(eventName, cb);\n    return this;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnected = function() {\n    return !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.connected);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnecting = function() {\n    //websocket.readyState === CONNECTING (0)\n    return !this.isConnected() && !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.ws && this.userAgent.transport.ws.readyState === 0);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.forceDisconnect = function() {\n    console.warn(this.isConnecting(), this.isConnected())\n    if (this.isConnecting() || this.isConnected()) {\n        this.userAgent.transport.disconnect();\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\nmodule.exports = UserAgent;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar SIP = __webpack_require__(2);\nvar utils = __webpack_require__(38);\nvar EVENT_NAMES = __webpack_require__(39);\n\nvar delay = utils.delay;\nvar extend = utils.extend;\n\nvar index = 0;\n\n/**\n * @param options\n * @constructor\n */\nvar PhoneLine = function(options) {\n\n    var self = this;\n    this.index = index++;\n\n    this.session = options.session;\n    this.userAgent = options.userAgent;\n    this.eventEmitter = options.eventEmitter;\n    this.instanceId = options.instanceId;\n    this.sessionId = this.session && this.session.id;\n\n    this.onCall = false;\n    this.onRecord = false;\n    this.contact = {};\n    this.muted = false;\n    this.bothMuted = false;\n    this.onHold = false;\n    this.timeCallStarted = null;\n\n    this.accepted = false;\n    this.type = options.type;\n\n    this.responseTimeout = 10000;\n\n    this.controlSender = {\n        messages: {\n            park: {reqid: 1, command: 'callpark'},\n            startRecord: {reqid: 2, command: 'startcallrecord'},\n            stopRecord: {reqid: 3, command: 'stopcallrecord'},\n            flip: {reqid: 3, command: 'callflip', target: ''},\n            monitor: {reqid: 4, command: 'monitor'},\n            barge: {reqid: 5, command: 'barge'},\n            whisper: {reqid: 6, command: 'whisper'},\n            takeover: {reqid: 7, command: 'takeover'}\n        },\n        send: function(command, options) {\n\n            options = options || {};\n            extend(command, options);\n\n            var cseq = null;\n\n            return new Promise(function(resolve, reject){\n                self.session.sendRequest(SIP.C.INFO, {\n                    body: JSON.stringify({\n                        request: command\n                    }),\n                    extraHeaders: [\n                        \"Content-Type: application/json;charset=utf-8\"\n                    ],\n                    receiveResponse: function(response) {\n                        var timeout = null;\n                        if (response.status_code === 200) {\n                            cseq = response.cseq;\n                            function onInfo(request) {\n                                if (response.cseq === cseq) {\n                                    var body = request && request.body || '{}';\n                                    var obj;\n\n                                    try {\n                                        obj = JSON.parse(body);\n                                    }\n                                    catch (e) {\n                                        obj = {};\n                                    }\n\n                                    if (obj.response && obj.response.command === command.command) {\n                                        if (obj.response.result) {\n                                            if (obj.response.result.code == 0) {\n                                                resolve(obj.response.result);\n                                            }\n                                            else {\n                                                reject(obj.response.result);\n                                            }\n                                        }\n                                    }\n                                    timeout && clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_INFO', onInfo);\n                                    resolve(); //FIXME What to resolve\n                                }\n                            }\n\n                            timeout = setTimeout(function() {\n                                reject(new Error('Timeout: no reply'));\n                                self.eventEmitter.off('SIP_INFO', onInfo);\n                            }, self.responseTimeout);\n                            self.eventEmitter.on('SIP_INFO', onInfo);\n                        }\n                        else {\n                            reject(new Error('The INFO response status code is: ' + response.status_code + ' (waiting for 200)'));\n                        }\n                    }\n                });\n\n            });\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __receiveRequest = this.session.receiveRequest;\n    this.session.receiveRequest = function(request) {\n        switch (request.method) {\n            case SIP.C.INFO:\n                self.eventEmitter.emit('SIP_INFO', request);\n                //SIP.js does not support application/json content type, so we monkey override its behaviour in this case\n                if (this.status === SIP.Session.C.STATUS_CONFIRMED || this.status === SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n                    var contentType = request.getHeader('content-type');\n                    if (contentType.match(/^application\\/json/i)) {\n                        request.reply(200);\n                        return this;\n                    }\n                }\n                break;\n            //Refresh invite should not be rejected with 488\n            case SIP.C.INVITE:\n                var session = this;\n                if (session.status === SIP.Session.C.STATUS_CONFIRMED) {\n                    if (request.call_id && session.dialog && session.dialog.id && request.call_id == session.dialog.id.call_id) {\n                        //TODO: check that SDP did not change\n                        session.logger.log('re-INVITE received');\n                        var localSDP = session.mediaHandler.peerConnection.localDescription.sdp;\n                        request.reply(200, null, ['Contact: ' + self.contact], localSDP, function() {\n                            session.status = SIP.Session.C.STATUS_WAITING_FOR_ACK;\n                            session.setInvite2xxTimer(request, localSDP);\n                            session.setACKTimer();\n                        });\n                        return session;\n                    }\n                    //else will be rejected with 488 by SIP.js\n                }\n                break;\n            //We need to analize NOTIFY messages sometimes, so we fire an event\n            case SIP.C.NOTIFY:\n                self.eventEmitter.emit('SIP_NOTIFY', request);\n                break;\n        }\n        return __receiveRequest.apply(self.session, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when ICE is starting to negotiate between the peers.\n    this.session.on('connecting', function(e) {\n        self.eventEmitter.emit(EVENT_NAMES.callConnecting, self, e);\n        setTimeout(function() {\n            if (self.session.mediaHandler.onIceCompleted !== undefined) {\n                self.session.mediaHandler.onIceCompleted(self.session);\n            }\n            else {\n                self.session.mediaHandler.callOnIceCompleted = true;\n            }\n        }, self.userAgent.sipConfig['iceGatheringTimeout'] || 3000);\n    });\n\n    this.__hasEarlyMedia = false;\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n\n    //Monkey patching for handling early media and to delay ACKs\n    var __receiveInviteReponse = this.session.receiveInviteResponse,\n        __waitingForIce = false;\n    this.session.receiveResponse = this.session.receiveInviteResponse = function(response) {\n        var sessionSelf = this, args = arguments;\n        switch (true) {\n            case (/^1[0-9]{2}$/.test(response.status_code)):\n                //Let's not allow the library to send PRACK\n                if (self.hasEarlyMedia()) {\n                    this.emit('progress', response);\n                    return;\n                }\n                break;\n            case /^(2[0-9]{2})|(4\\d{2})$/.test(response.status_code):\n                if (!self.hasEarlyMedia()) break;\n\n                //Let's check the ICE connection state\n                if (self.session.mediaHandler.peerConnection.iceConnectionState === 'completed' && !__waitingForIce) {\n                    __waitingForIce = false;\n                    //if ICE is connected, then let the library to handle the ACK\n                    break;\n                }\n                else {\n                    //If ICE is not connected, then we should send ACK after it has been connected\n                    if (!__waitingForIce) {\n                        self.eventEmitter.once(EVENT_NAMES.ICECompleted, function() {\n                            //let the library handle the ACK after ICE connection is completed\n                            __waitingForIce = false;\n                            __receiveInviteReponse.apply(sessionSelf, args);\n                        });\n\n                        self.eventEmitter.once(EVENT_NAMES.ICEFailed, function() {\n                            //handle the ICE Failed situation\n                            __waitingForIce = false;\n                            self.session.acceptAndTerminate(response, null, 'ICE Connection Failed');\n                        });\n\n                        __waitingForIce = true;\n                    }\n                    return;\n                }\n                break;\n        }\n        return __receiveInviteReponse.apply(sessionSelf, args);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a provisional (100-199) response is received.\n    this.session.on('progress', function(e) {\n        self.onCall = true;\n\n        //Early media is supported by SIP.js library\n        //But in case it is sent without 100rel support we play it manually\n        //STATUS_EARLY_MEDIA === 11, it will be set by SIP.js if 100rel is supported\n        if (self.session.status !== SIP.Session.C.STATUS_EARLY_MEDIA && e.status_code === 183 && typeof(e.body) === 'string' && e.body.indexOf('\\n') !== -1) {\n            var session = self.session,\n                response = e;\n\n            if (session.hasOffer) {\n                if (!session.createDialog(response, 'UAC')) {\n                    return;\n                }\n                session.hasAnswer = true;\n                session.mediaHandler.setDescription(\n                    response.body,\n                    function() {\n                        session.dialog.pracked.push(response.getHeader('rseq'));\n                        session.status = SIP.Session.C.STATUS_EARLY_MEDIA;\n                        session.mute();\n                        self.__hasEarlyMedia = true;\n                        self.eventEmitter.emit(EVENT_NAMES.callProgress, self, e);\n                    },\n                    function(e) {\n                        session.logger.warn(e);\n                        session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                        session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                    }\n                );\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a successful final (200-299) response is received.\n    this.session.on('accepted', function(e) {\n        if (self.accepted === true) return;\n        self.onCall = true;\n        self.accepted = true;\n        self.timeCallStarted = new Date();\n        self.eventEmitter.emit(EVENT_NAMES.callStarted, self, e);\n    });\n\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function onEnd() {\n        self.onCall = false;\n        self.timeCallStarted = null;\n        self.accepted = true;\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n    //Fired each time an unsuccessful final (300-699) response is\n    //this will emit failed event\n    this.session.on('rejected', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callRejected, self, e);\n        //terminated is not called by SIP.js when the call is rejected\n        //self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the session was canceled by the client\n    this.session.on('cancel', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when a BYE is sent\n    this.session.on('bye', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the request fails, whether due to an unsuccessful final response or due to timeout, transport, or other error\n    this.session.on('failed', function(response, cause) {\n        this.terminated(null, cause);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, response, cause);\n        //SIP.js 0.6.x does not call terminated event sometimes, so we call it ourselves\n        if (cause === SIP.C.causes.REQUEST_TIMEOUT) {\n            //this === session\n            if (this.status !== SIP.Session.C.STATUS_CONFIRMED) {\n                this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    this.session.on('terminated', function(response, cause) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, response, cause);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function terminateCallOnDisconnected(reason) {\n        self.session.terminated(null, reason || SIP.C.causes.CONNECTION_ERROR);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, null, 'Connection error');\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n//FIXME: Explore if it can be replaced with ref: http://sipjs.com/api/0.7.0/mediaHandler/\n\n    //Monkey patching oniceconnectionstatechange because SIP.js 0.6.x does not have this event\n    var onStateChange = this.session.mediaHandler.peerConnection.oniceconnectionstatechange || function(){},\n        __doubleCompleted = false;\n    this.session.mediaHandler.peerConnection.oniceconnectionstatechange = function() {\n        //this === peerConnection\n        var state = this.iceConnectionState;\n        onStateChange.apply(this, arguments);\n\n        switch (state) {\n            case 'connected':\n                self.eventEmitter.emit(EVENT_NAMES.ICEConnected, self);\n                break;\n            case 'completed':\n                //this may be called twice, see: https://code.google.com/p/chromium/issues/detail?id=371804\n                if (!__doubleCompleted) {\n                    self.eventEmitter.emit(EVENT_NAMES.ICECompleted, self);\n                    __doubleCompleted = true;\n                }\n                break;\n            case 'disconnected':\n                terminateCallOnDisconnected();\n                self.eventEmitter.emit(EVENT_NAMES.ICEDisconnected, self);\n                break;\n            case 'failed':\n                self.eventEmitter.emit(EVENT_NAMES.ICEFailed, self);\n                break;\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __ignoreReinviteDuplicates = false;\n\n    //Monkey patching sendReinvite for better Hold handling\n    var __sendReinvite = this.session.sendReinvite;\n    this.session.sendReinvite = function() {\n        __ignoreReinviteDuplicates = false;\n        var res = __sendReinvite.apply(this, arguments);\n        var __reinviteSucceeded = this.reinviteSucceeded,\n            __reinviteFailed = this.reinviteFailed;\n        this.reinviteSucceeded = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteSucceeded, self);\n            return __reinviteSucceeded.apply(this, []);\n        };\n        this.reinviteFailed = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteFailed, self);\n            return __reinviteFailed.apply(this, []);\n        };\n        return res;\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Monkey patching receiveReinviteResponse to ignore duplicates which may break Hold/Unhold\n    var __receiveReinviteResponse = this.session.receiveReinviteResponse;\n    this.session.receiveReinviteResponse = function(response) {\n        switch (true) {\n            case /^2[0-9]{2}$/.test(response.status_code):\n                if (__ignoreReinviteDuplicates) {\n                    this.sendRequest(SIP.C.ACK, {cseq: response.cseq});\n                    return;\n                }\n                __ignoreReinviteDuplicates = true;\n                break;\n        }\n        return __receiveReinviteResponse.apply(this, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //defining if the session is incoming or outgoing\n    if (this.type === PhoneLine.types.incoming) {\n        this.contact.name = this.session.request.from.uri.displayName;\n        this.contact.number = this.session.request.from.uri.user;\n\n    } else {\n        if (this.type === PhoneLine.types.outgoing) {\n            this.contact.name = this.session.request.to.uri.displayName;\n            this.contact.number = this.session.request.to.uri.user;\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.types = {\n    incoming: 'incoming',\n    outgoing: 'outgoing'\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getId = function() {\n    return this.session.data.id;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getSession = function() {\n    return this.session;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.cancel = function() {\n    var session = this.getSession();\n    return new Promise(function(resolve, reject) {\n        session.terminate({statusCode: 486});\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.record = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            var message = !!val\n                ? self.controlSender.messages.startRecord\n                : self.controlSender.messages.stopRecord;\n\n            if ((self.onRecord && !val) || (!self.onRecord && val)) {\n                return self.controlSender.send(message)\n                    .then(function(data) {\n                        self.onRecord = !!val;\n                        return data;\n                    });\n            }\n        }\n        else {\n         throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.flip = function(target) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        if (!target) return;\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.flip, {\n                target: target\n            });\n        }\n        else {\n           throw new Error('No line or no active line');\n        }\n    });\n};\n\nPhoneLine.prototype.park = function() {\n\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.park);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n// Explore ref: http://sipjs.com/api/0.6.0/session/#dtmftone-options\n\n//PhoneLine.prototype.sendDTMF = function(value, duration) {\n//    duration = parseInt(duration) || 1000;\n//    var peer = this.session.mediaHandler.peerConnection;\n//    var stream = this.session.getLocalStreams()[0];\n//    var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n//    if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n//        dtmfSender.insertDTMF(value, duration);\n//    }\n//    return Promise.resolve(null);\n//};\n\nPhoneLine.prototype.sendDTMF = function(value, duration) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if(self.onCall) {\n            duration = parseInt(duration) || 1000;\n            var peer = self.session.mediaHandler.peerConnection;\n            var stream = self.session.getLocalStreams()[0];\n            var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n            if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n                dtmfSender.insertDTMF(value, duration);\n            }\n            return null;\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n\n\nPhoneLine.prototype.sendInfoDTMF = function(value, duration) {\n\n    var session = this.session;\n    return new Promise(function(resolve, reject) {\n        duration = parseInt(duration) || 1000;\n        session.dtmf(value.toString(), {\n            duration: duration\n        });\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.blindTransfer = function(target, options) {\n\n    var session = this.session;\n    var self = this;\n    var extraHeaders = [];\n    var originalTarget = target;\n    options = options || {};\n\n    return new Promise(function(resolve, reject){\n        //Blind Transfer is taken from SIP.js source\n\n        // Check Session Status\n        if (session.status !== SIP.Session.C.STATUS_CONFIRMED) {\n            throw new SIP.Exceptions.InvalidStateError(session.status);\n        }\n\n        // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n        // so try to make one ahead of time\n        try {\n            target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n        } catch (e) {\n            session.logger.debug(\".refer() cannot parse Refer_To from\", target);\n            session.logger.debug(\"...falling through to normalizeTarget()\");\n        }\n\n        // Check target validity\n        target = session.ua.normalizeTarget(target);\n        if (!target) {\n            throw new TypeError('Invalid target: ' + originalTarget);\n        }\n\n        extraHeaders.push('Contact: ' + session.contact);\n        extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(session.ua));\n        extraHeaders.push('Refer-To: ' + target);\n\n        // Send the request\n        session.sendRequest(SIP.C.REFER, {\n            extraHeaders: extraHeaders,\n            body: options.body,\n            receiveResponse: function(response) {\n                var timeout = null;\n                if (response.status_code === 202) {\n                    var callId = response.call_id;\n\n                    function onNotify(request) {\n                        if (request.call_id === callId) {\n                            var body = request && request.body || '';\n                            switch (true) {\n                                case /1[0-9]{2}/.test(body):\n                                    request.reply(200);\n                                    break;\n                                case /2[0-9]{2}/.test(body):\n                                    self.session.terminate();\n                                    clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                                    resolve();\n                                    break;\n                                default:\n                                    reject(body);\n                                    break;\n                            }\n                        }\n                    }\n\n                    timeout = setTimeout(function() {\n                        reject(new Error('Timeout: no reply'));\n                        self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                    }, self.responseTimeout);\n                    self.eventEmitter.on('SIP_NOTIFY', onNotify);\n                }\n                else {\n                    reject(new Error('The response status code is: ' + response.status_code + ' (waiting for 202)'));\n                }\n            }\n        });\n\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.transfer = function(target, options) {\n    var self = this;\n    return (self.onHold ? Promise.resolve(null) : self.setHold(true)).then(function(){ return delay(300); }).then(function() {\n        return self.blindTransfer(target, options);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.forward = function(target, options) {\n    var self = this, interval = null;\n    return self.answer().then(function() {\n        return new Promise(function(resolve, reject){\n            interval = setInterval(function() {\n                if (self.session.status === 12) {\n                    clearInterval(interval);\n                    self.setMute(true);\n                    setTimeout(function() {\n                        self.transfer(target, options);\n                        resolve();\n                    }, 700);\n                }\n            }, 50);\n        });\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n//ref: http://sipjs.com/api/0.6.0/session/#acceptoptions\n//make var option = {}\n\nPhoneLine.prototype.answer = function() {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n\n        function onAnswered() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        function onFail(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        self.eventEmitter.on(EVENT_NAMES.callStarted, onAnswered);\n        self.eventEmitter.on(EVENT_NAMES.callFailed, onFail);\n\n        console.warn('emitting callProgress');\n        self.eventEmitter.emit(EVENT_NAMES.callProgress, self);\n\n        self.session.accept({\n            media: {\n                constraints: {audio: true, video: false},\n                render: {\n                    local: {\n                        audio: self.userAgent.dom.localAudio\n                    },\n                    remote: {\n                        audio: self.userAgent.dom.remoteAudio\n                    }\n                }\n            }\n        });\n\n    });\n\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMute = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.muted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nfunction setStreamMute(stream, val) {\n    var tracks = stream.getAudioTracks();\n    for (var i = 0; i < tracks.length; i++) {\n        tracks[i].enabled = !val;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n////FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMuteBoth = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.bothMuted = !!val;\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.bothMuted);\n            setStreamMute(self.session.getRemoteStreams()[0], self.bothMuted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Explore send() ref: http://sipjs.com/api/0.7.0/transport/#sendmsg\n\n/* This is a direct and very tightly coupled code. Please, try to avoid using this method if possible */\nPhoneLine.prototype.sendRequest = function(method, body, options) {\n    var self = this;\n    options = options || {};\n\n    if (!this.session.dialog) return;\n\n    var request = new SIP.OutgoingRequest(\n        method,\n        self.session.dialog.remote_target,\n        self.session.ua,\n        {\n            cseq: options.cseq || (self.session.dialog.local_seqnum += 1),\n            call_id: self.session.dialog.id.call_id,\n            from_uri: self.session.dialog.local_uri,\n            from_tag: self.session.dialog.id.local_tag,\n            to_uri: self.session.dialog.remote_uri,\n            to_tag: self.session.dialog.id.remote_tag,\n            route_set: self.session.dialog.route_set,\n            statusCode: options.statusCode,\n            reasonPhrase: options.reasonPhrase\n        },\n        options.extraHeaders || [],\n        body || undefined\n    );\n\n    new SIP.RequestSender({\n        request: request,\n        onRequestTimeout: function() {\n            self.session.onRequestTimeout();\n        },\n        onTransportError: function() {\n            self.session.onTransportError();\n        },\n        receiveResponse: options.receiveResponse || function(response) {\n        }\n    }, self.session.ua).send();\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: should be replaced with __hold()\n//This can be removed\n//Legacy hold uses direct in-dialog messages to trick SIP.js, try to avoid using this method if possible\nPhoneLine.prototype.__legacyHold = function(val) {\n    var self = this;\n    self.onHold = !!val;\n    return new Promise(function(resolve, reject){\n        if (self.onCall && self.session.dialog) {\n            var body = self.session.mediaHandler.peerConnection.localDescription.sdp;\n            if (self.onHold) {\n                //body = body.replace(/c=IN IP4 \\d+\\.\\d+.\\d+.\\d+/, \"c=IN IP4 0.0.0.0\");\n                body = body.replace(/a=sendrecv/, \"a=sendonly\");\n                self.session.mediaHandler.hold();\n                self.session.onhold('local');\n            }\n            else {\n                self.session.mediaHandler.unhold();\n                self.session.onunhold('local');\n            }\n\n            self.sendRequest(SIP.C.INVITE, body, {\n                extraHeaders: [\n                    \"Content-Type: application/sdp\",\n                    \"Contact: \" + self.session.contact\n                ],\n                receiveResponse: function(response) {\n                    switch (true) {\n                        case /^1[0-9]{2}$/.test(response.status_code):\n                            break;\n                        case /^2[0-9]{2}$/.test(response.status_code):\n                            resolve();\n                            self.sendRequest(SIP.C.ACK, null, {\n                                cseq: response.cseq\n                            });\n                            break;\n                        default:\n                            reject('Status code is: ' + response.status_code);\n                            self.onHold = !self.onHold;\n                            break;\n                    }\n                }\n            });\n        }\n        else {\n            throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nPhoneLine.prototype.__hold = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        function onSucceeded() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callReinviteFailed, onFailed);\n        }\n\n        function onFailed(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        }\n\n        self.eventEmitter.once(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        self.eventEmitter.once(EVENT_NAMES.callReinviteFailed, onFailed);\n\n        val ? self.session.hold() : self.session.unhold();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.setHold = function(val) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        self.onHold = !!val;\n        if (self.onCall) {\n            promise = self.__hold(val).then(function() {\n                val ? self.eventEmitter.emit(EVENT_NAMES.callHold, self) : self.eventEmitter.emit(EVENT_NAMES.callUnhold, self);\n            }, function(e) {\n                self.onHold = !self.onHold;\n            });\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnHold = function() {\n    return this.onHold;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnMute = function() {\n    return this.muted || this.bothMuted;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnRecord = function() {\n    return this.onRecord;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getContact = function() {\n    return this.contact;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getCallDuration = function() {\n    if (this.timeCallStarted) {\n        return (new Date()).getTime() - this.timeCallStarted.getTime();\n    }\n    else {\n        return 0;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isIncoming = function() {\n    return this.session.mediaHandler.peerConnection.signalingState !== \"closed\"\n        && !this.session.startTime;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isClosed = function() {\n    return this.session.status === SIP.Session.C.STATUS_CANCELED || this.session.status === SIP.Session.C.STATUS_TERMINATED;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.hasEarlyMedia = function() {\n    return this.__hasEarlyMedia;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = PhoneLine;\n\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n\n    delay: function delay(ms) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    },\n\n    defer: function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function(resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n\n    extend: function extend(dst, src) {\n        src = src || {};\n        dst = dst || {};\n        Object.keys(src).forEach(function(k) {\n            dst[k] = src[k];\n        });\n        return dst;\n    },\n\n    copy: function(src){\n        return this.extend({}, src);\n    },\n\n    uuid: function uuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n};\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\nmodule.exports = {\n    'message': 'message',\n    'sipConnecting': 'sipConnecting',\n    'sipConnected': 'sipConnected',\n    'sipDisconnected': 'sipDisconnected',\n    'sipRegistered': 'sipRegistered',\n    'sipUnRegistered': 'sipUnregistered',\n    'sipRegistrationFailed': 'sipRegistrationFailed',\n    'incomingCall': 'incomingCall',                     //when incoming call is received\n    'sipIncomingCall': 'sipIncomingCall',               //same as incomingCall\n    'outgoingCall': 'outgoingCall',                     //when the outbound call is initiated\n    'callConnecting': 'callConnecting',                 //when ICE gathering is started\n    'callProgress': 'callProgress',                     //when 1xx provisional message is received (outbound only) or call is accepted, but ACK is still not sent (inbound only)\n    'callStarted': 'callStarted',                       //when ACK is sent\n    'callRejected': 'callRejected',                     //when the call is rejected by its party\n    'callEnded': 'callEnded',                           //when the call had ended without errors (BYE)\n    'callTerminated': 'callTerminated',                 //when the media is terminated, UNSTABLE in SIP.js 0.6.x\n    'callFailed': 'callFailed',                         //when the call is failed because of many different reasons (connection issues, 4xx errors, etc.)\n    'callHold': 'callHold',                             //when the call is put on hold\n    'callUnhold': 'callUnhold',                         //when the call is unholded\n    'callMute': 'callMute',                             //when the call is muted\n    'callUnmute': 'callUnmute',                         //when the call is unmuted\n    'callReplaced': 'callReplaced',                     //when the call has been replaced by an incoming invite\n    'sipRTCSession': 'sipRTCSession',\n    'sipConnectionFailed': 'sipConnectionFailed',\n    'ICEConnected': 'ICEConnected',\n    'ICECompleted': 'ICECompleted',\n    'ICEFailed': 'ICEFailed',\n    'ICEChecking': 'ICEChecking',\n    'ICEClosed': 'ICEClosed',\n    'ICEDisconnected': 'ICEDisconnected',\n    'callReinviteSucceeded': 'callReinviteSucceeded',\n    'callReinviteFailed': 'callReinviteFailed'\n};\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar uuid = __webpack_require__(38).uuid;\n\nfunction DomAudio(){\n\n    /*\n     * We create audio containers here\n     * Sorry for DOM manipulations inside a service, but it is for the good :)\n     */\n    var LOCAL_AUDIO = document.createElement('video'),\n        REMOTE_AUDIO = document.createElement('video'),\n        LOCAL_AUDIO_ID = 'local_' + uuid(),\n        REMOTE_AUDIO_ID = 'remote_' + uuid();\n\n    LOCAL_AUDIO.setAttribute('id', LOCAL_AUDIO_ID);\n    LOCAL_AUDIO.setAttribute('autoplay', 'true');\n    LOCAL_AUDIO.setAttribute('hidden', 'true');\n    LOCAL_AUDIO.setAttribute('muted', '');\n\n    REMOTE_AUDIO.setAttribute('id', REMOTE_AUDIO_ID);\n    REMOTE_AUDIO.setAttribute('autoplay', 'true');\n    REMOTE_AUDIO.setAttribute('hidden', 'true');\n\n    document.body.appendChild(LOCAL_AUDIO);\n    document.body.appendChild(REMOTE_AUDIO);\n\n    LOCAL_AUDIO.volume = 0;\n\n    this.localAudio = LOCAL_AUDIO;\n    this.remoteAudio = REMOTE_AUDIO;\n    this.localAudioId = LOCAL_AUDIO_ID;\n    this.remoteAudioId = REMOTE_AUDIO_ID;\n\n}\n\nmodule.exports = DomAudio;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n'use strict';\n\nvar audio = __webpack_require__(42);\n\n/**\n * @param {WebPhone} rcSIPUA\n * @param options\n * @constructor\n */\nfunction AudioHelper(rcSIPUA, options) {\n\n    var self = this;\n\n    options = options || {};\n\n    this._rcSIPUA = rcSIPUA;\n    this._incoming = options.incoming || 'audio/incoming.ogg';\n    this._outgoing = options.outgoing || 'audio/outgoing.ogg';\n    this._audio = {};\n\n    rcSIPUA.on(rcSIPUA.events.incomingCall, function() {\n        self.playIncoming(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.outgoingCall, function() {\n        self.playOutgoing(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.callProgress, function(session) {\n        if (session.hasEarlyMedia()) {\n            self.playOutgoing(false);\n        }\n    });\n\n    rcSIPUA.on([rcSIPUA.events.callStarted, rcSIPUA.events.callRejected, rcSIPUA.events.callEnded, rcSIPUA.events.callFailed], function() {\n        self.playIncoming(false);\n        self.playOutgoing(false);\n    });\n\n}\n\nAudioHelper.prototype._playSound = function(url, val, volume) {\n\n    if (!this._audio[url]) {\n        if (val) {\n            volume !== undefined && (audio.volume = volume);\n            this._audio[url] = audio.play(url, {loop: true});\n        }\n    } else {\n        if (val) {\n            this._audio[url].reset();\n        }\n        else {\n            this._audio[url].stop();\n        }\n    }\n\n};\n\nAudioHelper.prototype.playIncoming = function(val) {\n    this._playSound(this._incoming, val, 0.5);\n};\n\nAudioHelper.prototype.playOutgoing = function(val) {\n    this._playSound(this._outgoing, val, 1);\n};\n\nmodule.exports = AudioHelper;\n\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar error = console.error;\nvar EventEmitter = __webpack_require__(35);\n\nmodule.exports = {\n\n    play: function(url, options) {\n\n        var emitter = new EventEmitter();\n\n        var audio = new Audio();\n\n        audio.volume = 1;\n\n        audio.addEventListener(\"timeupdate\", function(event) {\n            emitter.emit('progress', {\n                duration: audio.duration,\n                progress: audio.currentTime / audio.duration\n            });\n        });\n\n        audio.addEventListener(\"seeked\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"ended\", function(event) {\n            emitter.emit('ended');\n        });\n        audio.addEventListener(\"pause\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    paused: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"play\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    resumed: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"error\", function() {\n            console.log(\"error\", audio.error); //FIXME\n            emitter.emit('error', audio.error);\n        });\n\n        emitter.stop = audio.pause.bind(audio);\n        emitter.pause = audio.pause.bind(audio);\n        emitter.resume = audio.play.bind(audio);\n        emitter.reset = function() {\n            audio.currentTime = 0;\n            audio.play();\n        };\n\n        emitter.duration = function() {\n            return Math.ceil(audio.duration);\n        };\n\n        audio.src = url;\n        audio.load(url);\n\n        if (options) { //FIXME angular.isObject\n            for (var prop in options) {\n                if (prop in audio) {\n                    audio[prop] = options[prop];\n                }\n            }\n        }\n\n        audio.play();\n\n        return emitter;\n\n    }\n};\n\n/***/ }\n/******/ ])\n});\n;\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 38749ea47466bbecd147\n **/","var SIP = require('sip.js');\nvar EventEmitter = require('./emitter');\nvar UserAgent = require('./userAgent');\nvar PhoneLine = require('./phoneLine');\nvar AudioHelper = require('./audioHelper');\nvar defer = require('./utils').defer;\nvar uuid = require('./utils').uuid;\nvar extend = require('./utils').extend;\nvar EVENT_NAMES = require('./eventNames');\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//Patching proto because of https://developers.google.com/web/updates/2015/07/mediastream-deprecations\nvar mediaStreamManagerProto = Object.create(SIP.WebRTC.MediaStreamManager.prototype, {\n    'release': {\n        value: function release(stream) {\n            var streamId = SIP.WebRTC.MediaStreamManager.streamId(stream);\n            if (this.acquisitions[streamId] === false) {\n                //MediaStream.stop removed in M47\n                if (typeof (stream.stop) === 'function') {\n                    stream.stop();\n                }\n                else {\n                    stream.getTracks().forEach(function(track) {\n                        track.stop()\n                    });\n                }\n            }\n            delete this.acquisitions[streamId];\n        }\n    }\n});\n\nSIP.WebRTC.MediaStreamManager.prototype = mediaStreamManagerProto;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @namespace RingCentral\n * @param {boolean} [options.audioHelper] Automatically create audio helper\n * @param {string} [options.uuid] Instance ID\n * @constructor\n */\nfunction WebPhone(options) {\n\n    options = options || {};\n\n    var service = this;\n\n    this.__registerDeferred = undefined;\n    this.__unregisterDeferred = undefined;\n    this.__callDeferred = undefined;\n    this.__sipRegistered = false;\n    this.__sipOutboundEnabled = false;\n\n    if (options.uuid) {\n        this.uuid = options.uuid;\n    } else {\n        localStorage['rc-webPhone-uuid'] = localStorage['rc-webPhone-uuid'] || uuid();\n        this.uuid = localStorage['rc-webPhone-uuid'];\n    }\n\n    this.activeLine = null;\n\n    this.onMute = false;\n    this.onHold = false;\n    this.onRecord = false;\n    this.contact = undefined;\n\n    var ua = new UserAgent();\n\n    this.ua = ua;\n    this.on = ua.on.bind(ua);\n\n    this.username = null;\n\n    this.isRegistered = false;\n    this.isRegistering = false;\n    this.isUnregistering = false;\n\n    this.events = EVENT_NAMES;\n\n    this.causes = SIP.C.causes;\n    this.reasons = SIP.C.REASON_PHRASE;\n\n    //naming convention: incoming or sipincoming?\n    service.on(EVENT_NAMES.sipIncomingCall, function(line) {\n        service.ua.eventEmitter.emit(EVENT_NAMES.incomingCall, line);\n    });\n\n    //naming convention: outgoing or sipoutgoing?\n    service.on(EVENT_NAMES.outgoingCall, function(line) {\n        if (service.activeLine && !service.activeLine.isOnHold()) {\n            service.activeLine.setHold();\n        }\n        service.__callDeferred && service.__callDeferred.resolve(line);\n        service.__callDeferred = null;\n    });\n\n    //naming convention: call or line?\n    service.on([EVENT_NAMES.callEnded, EVENT_NAMES.callFailed], function(call) {\n        //delete activeLine property if the call has ended on the other side\n        if (call && service.activeLine && call === service.activeLine) {\n            service.activeLine = null;\n        }\n    });\n\n    // On Call Failed due to 503 Invite Connection error reconnect the call\n    service.on(EVENT_NAMES.callFailed, function(call, response, cause) {\n        if (response) {\n            switch (true) {\n                //[WRTC-424] Should reconnect the websocket if received 503 on INVITE\n                case (/^503$/.test(response.status_code)):\n                    //This method will throw 'Connection Error', so we just remove it\n                    call.session.onTransportError = function() {};\n                    //Re-register after 500ms\n                    setTimeout(service.reregister.bind(service, true), 500);\n                    break;\n            }\n        }\n    });\n\n\n    // Setting flags for SIP Registration process\n    service.on(EVENT_NAMES.sipRegistered, function(e) {\n        service.__sipRegistered = true;\n        service.__registerDeferred && service.__registerDeferred.resolve(e);\n        service.isRegistered = true;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on([EVENT_NAMES.sipRegistrationFailed, EVENT_NAMES.sipConnectionFailed], function(e) {\n        service.__sipRegistered = false;\n        service.__registerDeferred && service.__registerDeferred.reject(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isUnregistered = false;\n    });\n\n    service.on(EVENT_NAMES.sipUnRegistered, function(e) {\n        service.__sipRegistered = false;\n        service.__unregisterDeferred && service.__unregisterDeferred.resolve(e);\n        service.isRegistered = false;\n        service.isRegistering = false;\n        service.isUnregistered = true;\n        service.isUnregistering = false;\n    });\n\n    window.addEventListener('unload', function() {\n        service.hangup();\n        service.unregister();\n    });\n\n    this._audioHelper = null;\n    if (options.audioHelper) service.createAudioHelper();\n\n    this._appKey = options.appKey;\n    this._appName = options.appName;\n    this._appVersion = options.appVersion;\n\n    this._userAgent = (options.appName ? (options.appName + (options.appVersion ? '/' + options.appVersion : '')) + ' ' : '') +\n                      'RCWEBPHONE/' + WebPhone.version;\n\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.version = '0.1.0';\n\nWebPhone.PhoneLine = PhoneLine;\nWebPhone.EventEmitter = EventEmitter;\nWebPhone.UserAgent = UserAgent;\nWebPhone.AudioHelper = AudioHelper;\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param [options]\n * @return {AudioHelper}\n */\nWebPhone.prototype.createAudioHelper = function(options) {\n    if (!this._audioHelper) {\n        console.log('Helper Created');\n        this._audioHelper = new AudioHelper(this, options);\n    }\n    return this._audioHelper;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.register = function(info, checkFlags) {\n\n    try {\n        var service = this;\n\n        // console.log(\"Sip Data\"+JSON.stringify(data));\n\n        if (!checkFlags || (\n            typeof(info.sipFlags) === 'object' &&\n                //checking for undefined for platform v7.3, which doesn't support this flag\n            (info.sipFlags.outboundCallsEnabled === undefined || info.sipFlags.outboundCallsEnabled === true))\n        ) {\n\n            // Access SIP flags\n            this.__sipOutboundEnabled = info.sipFlags.outboundCallsEnabled;\n\n            // console.log('SIP Provision data', data+'\\n');\n            info = info.sipInfo[0];\n\n        } else {\n            throw new Error('ERROR.sipOutboundNotAvailable'); //FIXME Better error reporting...\n        }\n\n        var headers = [];\n        var endpointId = this.uuid;\n        if (endpointId) {\n            headers.push('P-rc-endpoint-id: ' + endpointId);\n        }\n\n        extend(info, {\n            extraHeaders: headers\n        });\n\n        if (service.isRegistered) {\n            console.warn('Already registered, please unregister the UA first');\n            return service.__registerDeferred.promise;\n        }\n\n        if (service.isRegistering) {\n            console.warn('Already registering the UA');\n            return service.__registerDeferred.promise;\n        }\n\n        service.__registerDeferred = defer();\n        service.isRegistering = true;\n        service.isRegistered = false;\n\n        //compatability properties\n        info.wsServers = info.outboundProxy && info.transport\n            ? info.transport.toLowerCase() + '://' + info.outboundProxy\n            : info.wsServers;\n        info.domain = info.domain || info.sipDomain;\n        info.username = info.username || info.userName;\n        info.extraHeaders = Array.isArray(info.extraHeaders) ? info.extraHeaders : [];\n\n        var options = {\n            wsServers: info.wsServers,\n            uri: \"sip:\" + info.username + \"@\" + info.domain,\n            password: info.password,\n            authorizationUser: info.authorizationId,\n            traceSip: true,\n            stunServers: info.stunServers || ['stun:74.125.194.127:19302'],\n            turnServers: [],\n            log: {\n                level: 1 //FIXME LOG LEVEL 3\n            },\n            domain: info.domain,\n            autostart: false,   //turn off autostart on UA creation\n            register: false,     //turn off auto register on UA creation,\n            iceGatheringTimeout: info.iceGatheringTimeout || 3000\n        };\n\n        service.username = info.userName;\n        service.ua.setSIPConfig(options);\n        service.ua.start({\n            extraHeaders: info.extraHeaders\n        });\n    }\n    catch (e) {\n        service.isRegistering = false;\n        service.isRegistered = false;\n        return Promise.reject(e);\n    }\n\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.reregister = function(reconnect) {\n    var service = this;\n    if (service.isRegistering) return service.__registerDeferred;\n    service.__registerDeferred = defer();\n    service.isRegistering = true;\n    service.ua.reregister({}, !!reconnect);\n    return service.__registerDeferred.promise;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.unregister = function() {\n    var service = this;\n    if (service.isRegistering) {\n        service.ua.forceDisconnect();\n        service.isRegistering = false;\n        service.isUnregistering = false;\n        service.isRegistered = false;\n        service.isUnregistered = true;\n    }\n\n    if (service.isUnregistered || service.isUnregistering) return service.__unregisterDeferred;\n\n    service.isUnregistering = true;\n    service.isUnregistered = false;\n\n    service.__unregisterDeferred = defer();\n    if (service.__sipRegistered) {\n        service.ua.stop();\n    }\n    else {\n        service.__unregisterDeferred.resolve(null);\n    }\n    return service.__unregisterDeferred.promise.catch(function() {\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.forceDisconnect = function() {\n    this.ua.forceDisconnect();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.call = function(toNumber, fromNumber, country) {\n\n    var service = this;\n    if(!this.__sipOutboundEnabled || false === Boolean(this.__sipOutboundEnabled)) {\n        throw new Error('Outbound calling is disabled'); // TODO: Fix this to be more robust error messaging\n    }\n\n    if(!toNumber)\n        throw new Error('Invalid or undefined [toNumber]');\n\n    if (!service.__callDeferred) {\n        service.__callDeferred = defer();\n        this.activeLine = service.ua.call.call(service.ua, toNumber, {\n            fromNumber: fromNumber,\n            country: country\n        });\n    }\n    return service.__callDeferred;\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nWebPhone.prototype.answer = function(line) {\n    var incomingLines = this.ua.getIncomingLinesArray();\n    var activeLines = this.ua.getActiveLinesArray();\n    var self = this;\n\n    return new Promise(function(resolve, reject) {\n        if (!line) {\n            line = incomingLines.length > 0 && arr[0];\n        }\n\n        if (line) {\n            var promises = [];\n            activeLines.forEach(function (activeLine) {\n                if (activeLine !== line) {\n                    !activeLine.isOnHold() && promises.push(activeLine.setHold(true));\n                }\n            });\n            resolve(Promise\n                .all(promises)\n                .then(function () {\n                    self.activeLine = line;\n                    self.ua.answer(line);\n                })\n                .catch(function (e) {\n                    self.hangup(line);\n                    throw e;\n                }));\n        }\n\n        return null;\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nWebPhone.prototype.onCall = function() {\n    return this.ua.getActiveLinesArray().filter(function(line) {\n            return line.onCall;\n        }).length > 0;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hangup = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        self.ua.hangup(line);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nWebPhone.prototype.getLine = function(line) {\n    if (!line) line = this.activeLine;\n    if (!line) throw new Error('No line or no active line');\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Check if we can replace this with  SIPJS dtmf(tone,[options]) ref: http://sipjs.com/api/0.7.0/session/#dtmftone-options\n/***\n * deprecated\n * @param value\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.sendDTMF = function(value, line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.sendDTMF.call(line, value);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.hold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setHold(true);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unhold = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        if (line) {\n            self.ua.getActiveLinesArray().forEach(function (activeLine) {\n                if (activeLine !== line && !activeLine.isIncoming() && !activeLine.isOnHold()) {\n                    activeLine.setHold(true);\n                }\n            });\n            line.setHold(false);\n            self.activeLine = line;\n        }\n        return null;\n    });\n};\n\n////FIXME: Use SIPJS mute() and unmute() ref:http://sipjs.com/api/0.7.0/session/#muteoptions\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.mute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(true);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @returns {*}\n */\nWebPhone.prototype.unmute = function(line) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.setMute(false);\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n/***\n * deprecated\n * @param line\n * @param target\n * @param options\n * @returns {*}\n */\n//Phone-line->transfer->blindTransfer\nWebPhone.prototype.transfer = function(line, target, options) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        line = self.getLine(line);\n        line && line.transfer(target, options);\n        if (line === self.activeLine) self.activeLine = null;\n        return null;\n    });\n};\n\nmodule.exports = WebPhone;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 1\n ** module chunks = 0\n **/","/**\n * @name SIP\n * @namespace\n */\nmodule.exports = (function(window) {\n  \"use strict\";\n\n  var SIP = {};\n\n  var pkg = require('../package.json');\n\n  Object.defineProperties(SIP, {\n    version: {\n      get: function(){ return pkg.version; }\n    },\n    name: {\n      get: function(){ return pkg.title; }\n    }\n  });\n\n  require('./Utils.js')(SIP);\n  var Logger = require('./Logger.js');\n  SIP.LoggerFactory = require('./LoggerFactory.js')(window, Logger);\n  require('./EventEmitter.js')(SIP);\n  SIP.C = require('./Constants.js')(SIP.name, SIP.version);\n  SIP.Exceptions = require('./Exceptions.js');\n  SIP.Timers = require('./Timers.js')(window);\n  require('./Transport.js')(SIP, window);\n  require('./Parser.js')(SIP);\n  require('./SIPMessage.js')(SIP);\n  require('./URI.js')(SIP);\n  require('./NameAddrHeader.js')(SIP);\n  require('./Transactions.js')(SIP, window);\n  var DialogRequestSender = require('./Dialog/RequestSender.js')(SIP, window);\n  require('./Dialogs.js')(SIP, DialogRequestSender);\n  require('./RequestSender.js')(SIP);\n  require('./RegisterContext.js')(SIP, window);\n  SIP.MediaHandler = require('./MediaHandler.js')(SIP.EventEmitter);\n  require('./ClientContext.js')(SIP);\n  require('./ServerContext.js')(SIP);\n  var SessionDTMF = require('./Session/DTMF.js')(SIP);\n  require('./Session.js')(SIP, window, SessionDTMF);\n  require('./Subscription.js')(SIP, window);\n  var WebRTCMediaHandler = require('./WebRTC/MediaHandler.js')(SIP);\n  var WebRTCMediaStreamManager = require('./WebRTC/MediaStreamManager.js')(SIP);\n  SIP.WebRTC = require('./WebRTC.js')(SIP.Utils, window, WebRTCMediaHandler, WebRTCMediaStreamManager);\n  require('./UA.js')(SIP, window);\n  SIP.Hacks = require('./Hacks.js')(SIP);\n  require('./SanityCheck.js')(SIP);\n  SIP.DigestAuthentication = require('./DigestAuthentication.js')(SIP.Utils);\n  SIP.Grammar = require('./Grammar/dist/Grammar')(SIP);\n\n  return SIP;\n})((typeof window !== 'undefined') ? window : global);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SIP.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = {\n\t\"name\": \"sip.js\",\n\t\"title\": \"SIP.js\",\n\t\"description\": \"A simple, intuitive, and powerful JavaScript signaling library\",\n\t\"version\": \"0.6.4\",\n\t\"main\": \"src/SIP.js\",\n\t\"homepage\": \"http://sipjs.com\",\n\t\"author\": {\n\t\t\"name\": \"Will Mitchell\",\n\t\t\"email\": \"will@onsip.com\"\n\t},\n\t\"contributors\": [\n\t\t{\n\t\t\t\"url\": \"http://sipjs.com/authors/\"\n\t\t}\n\t],\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/onsip/SIP.js.git\"\n\t},\n\t\"keywords\": [\n\t\t\"sip\",\n\t\t\"websocket\",\n\t\t\"webrtc\",\n\t\t\"library\",\n\t\t\"javascript\"\n\t],\n\t\"devDependencies\": {\n\t\t\"grunt\": \"~0.4.0\",\n\t\t\"grunt-cli\": \"~0.1.6\",\n\t\t\"grunt-contrib-jasmine\": \"~0.6.0\",\n\t\t\"grunt-contrib-jshint\": \">0.5.0\",\n\t\t\"grunt-contrib-uglify\": \"~0.2.0\",\n\t\t\"grunt-peg\": \"~1.3.1\",\n\t\t\"grunt-trimtrailingspaces\": \"^0.4.0\",\n\t\t\"node-minify\": \"~0.7.2\",\n\t\t\"pegjs\": \"0.8.0\",\n\t\t\"sdp-transform\": \"~0.4.0\",\n\t\t\"grunt-contrib-copy\": \"^0.5.0\",\n\t\t\"browserify\": \"^4.1.8\",\n\t\t\"grunt-browserify\": \"^2.1.0\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=0.8\"\n\t},\n\t\"license\": \"MIT\",\n\t\"scripts\": {\n\t\t\"test\": \"grunt travis --verbose\"\n\t},\n\t\"gitHead\": \"209fb9bb50f1918522d37a002b83f21abd6946ab\",\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/onsip/SIP.js/issues\"\n\t},\n\t\"_id\": \"sip.js@0.6.4\",\n\t\"_shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\"_from\": \"sip.js@0.6.4\",\n\t\"_npmVersion\": \"1.4.13\",\n\t\"_npmUser\": {\n\t\t\"name\": \"egreen_onsip\",\n\t\t\"email\": \"eric.green@onsip.com\"\n\t},\n\t\"maintainers\": [\n\t\t{\n\t\t\t\"name\": \"joseph-onsip\",\n\t\t\t\"email\": \"joseph@onsip.com\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"egreen_onsip\",\n\t\t\t\"email\": \"eric.green@onsip.com\"\n\t\t}\n\t],\n\t\"dist\": {\n\t\t\"shasum\": \"e080d4b0fa1a7dd803741d6bca6d32c29ae37380\",\n\t\t\"tarball\": \"http://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n\t},\n\t\"directories\": {},\n\t\"_resolved\": \"https://registry.npmjs.org/sip.js/-/sip.js-0.6.4.tgz\"\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/package.json\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * @fileoverview Utils\n */\n\nmodule.exports = function (SIP) {\nvar Utils;\n\nUtils= {\n\n  augment: function (object, constructor, args, override) {\n    var idx, proto;\n\n    // Add public properties from constructor's prototype onto object\n    proto = constructor.prototype;\n    for (idx in proto) {\n      if (override || object[idx] === undefined) {\n        object[idx] = proto[idx];\n      }\n    }\n\n    // Construct the object as though it were just created by constructor\n    constructor.apply(object, args);\n  },\n\n  optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {\n    if (isDeprecated && options[loser]) {\n      logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');\n    }\n\n    if (options[winner] && options[loser]) {\n      logger.warn(winner + ' overriding ' + loser);\n    }\n\n    options[winner] = options[winner] || options[loser] || defaultValue;\n  },\n\n  desugarSessionOptions: function desugarSessionOptions (options) {\n    if (global.HTMLMediaElement && options instanceof global.HTMLMediaElement) {\n      options = {\n        media: {\n          constraints: {\n            audio: true,\n            video: options.tagName === 'VIDEO'\n          },\n          render: {\n            remote: {\n              video: options\n            }\n          }\n        }\n      };\n    }\n    return options;\n  },\n\n  str_utf8_length: function(string) {\n    return encodeURIComponent(string).replace(/%[A-F\\d]{2}/g, 'U').length;\n  },\n\n  getPrefixedProperty: function (object, name) {\n    if (object == null) {\n      return;\n    }\n    var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n    var prefixedNames = [name, 'webkit' + capitalizedName, 'moz' + capitalizedName];\n    for (var i in prefixedNames) {\n      var property = object[prefixedNames[i]];\n      if (property) {\n        return property;\n      }\n    }\n  },\n\n  generateFakeSDP: function(body) {\n    if (!body) {\n      return;\n    }\n\n    var start = body.indexOf('o=');\n    var end = body.indexOf('\\r\\n', start);\n\n    return 'v=0\\r\\n' + body.slice(start, end) + '\\r\\ns=-\\r\\nt=0 0\\r\\nc=IN IP4 0.0.0.0';\n  },\n\n  isFunction: function(fn) {\n    if (fn !== undefined) {\n      return Object.prototype.toString.call(fn) === '[object Function]';\n    } else {\n      return false;\n    }\n  },\n\n  isDecimal: function (num) {\n    return !isNaN(num) && (parseFloat(num) === parseInt(num,10));\n  },\n\n  createRandomToken: function(size, base) {\n    var i, r,\n      token = '';\n\n    base = base || 32;\n\n    for( i=0; i < size; i++ ) {\n      r = Math.random() * base|0;\n      token += r.toString(base);\n    }\n\n    return token;\n  },\n\n  newTag: function() {\n    return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);\n  },\n\n  // http://stackoverflow.com/users/109538/broofa\n  newUUID: function() {\n    var UUID =  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n\n    return UUID;\n  },\n\n  hostType: function(host) {\n    if (!host) {\n      return;\n    } else {\n      host = SIP.Grammar.parse(host,'host');\n      if (host !== -1) {\n        return host.host_type;\n      }\n    }\n  },\n\n  /**\n  * Normalize SIP URI.\n  * NOTE: It does not allow a SIP URI without username.\n  * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.\n  * Detects the domain part (if given) and properly hex-escapes the user portion.\n  * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.\n  * @private\n  * @param {String} target\n  * @param {String} [domain]\n  */\n  normalizeTarget: function(target, domain) {\n    var uri, target_array, target_user, target_domain;\n\n    // If no target is given then raise an error.\n    if (!target) {\n      return;\n    // If a SIP.URI instance is given then return it.\n    } else if (target instanceof SIP.URI) {\n      return target;\n\n    // If a string is given split it by '@':\n    // - Last fragment is the desired domain.\n    // - Otherwise append the given domain argument.\n    } else if (typeof target === 'string') {\n      target_array = target.split('@');\n\n      switch(target_array.length) {\n        case 1:\n          if (!domain) {\n            return;\n          }\n          target_user = target;\n          target_domain = domain;\n          break;\n        case 2:\n          target_user = target_array[0];\n          target_domain = target_array[1];\n          break;\n        default:\n          target_user = target_array.slice(0, target_array.length-1).join('@');\n          target_domain = target_array[target_array.length-1];\n      }\n\n      // Remove the URI scheme (if present).\n      target_user = target_user.replace(/^(sips?|tel):/i, '');\n\n      // Remove 'tel' visual separators if the user portion just contains 'tel' number symbols.\n      if (/^[\\-\\.\\(\\)]*\\+?[0-9\\-\\.\\(\\)]+$/.test(target_user)) {\n        target_user = target_user.replace(/[\\-\\.\\(\\)]/g, '');\n      }\n\n      // Build the complete SIP URI.\n      target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;\n\n      // Finally parse the resulting URI.\n      if (uri = SIP.URI.parse(target)) {\n        return uri;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n  * Hex-escape a SIP URI user.\n  * @private\n  * @param {String} user\n  */\n  escapeUser: function(user) {\n    // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n    return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');\n  },\n\n  headerize: function(string) {\n    var exceptions = {\n      'Call-Id': 'Call-ID',\n      'Cseq': 'CSeq',\n      'Rack': 'RAck',\n      'Rseq': 'RSeq',\n      'Www-Authenticate': 'WWW-Authenticate'\n      },\n      name = string.toLowerCase().replace(/_/g,'-').split('-'),\n      hname = '',\n      parts = name.length, part;\n\n    for (part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname +='-';\n      }\n      hname += name[part].charAt(0).toUpperCase()+name[part].substring(1);\n    }\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n    return hname;\n  },\n\n  sipErrorCause: function(status_code) {\n    var cause;\n\n    for (cause in SIP.C.SIP_ERROR_CAUSES) {\n      if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {\n        return SIP.C.causes[cause];\n      }\n    }\n\n    return SIP.C.causes.SIP_FAILURE_CODE;\n  },\n\n  /**\n  * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)\n  * @private\n  */\n  getRandomTestNetIP: function() {\n    function getOctet(from,to) {\n      return Math.floor(Math.random()*(to-from+1)+from);\n    }\n    return '192.0.2.' + getOctet(1, 254);\n  },\n\n  getAllowedMethods: function(ua) {\n    var event,\n      allowed = SIP.UA.C.ALLOWED_METHODS.toString();\n\n    for (event in SIP.UA.C.EVENT_METHODS) {\n      if (ua.checkListener(event)) {\n        allowed += ','+ SIP.UA.C.EVENT_METHODS[event];\n      }\n    }\n\n    return allowed;\n  },\n\n  // MD5 (Message-Digest Algorithm) http://www.webtoolkit.info\n  calculateMD5: function(string) {\n    function RotateLeft(lValue, iShiftBits) {\n      return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n    }\n\n    function AddUnsigned(lX,lY) {\n      var lX4,lY4,lX8,lY8,lResult;\n      lX8 = (lX & 0x80000000);\n      lY8 = (lY & 0x80000000);\n      lX4 = (lX & 0x40000000);\n      lY4 = (lY & 0x40000000);\n      lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);\n      if (lX4 & lY4) {\n        return (lResult ^ 0x80000000 ^ lX8 ^ lY8);\n      }\n      if (lX4 | lY4) {\n        if (lResult & 0x40000000) {\n          return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);\n        } else {\n          return (lResult ^ 0x40000000 ^ lX8 ^ lY8);\n        }\n      } else {\n        return (lResult ^ lX8 ^ lY8);\n      }\n    }\n\n    function F(x,y,z) {\n      return (x & y) | ((~x) & z);\n    }\n\n    function G(x,y,z) {\n      return (x & z) | (y & (~z));\n    }\n\n    function H(x,y,z) {\n      return (x ^ y ^ z);\n    }\n\n    function I(x,y,z) {\n      return (y ^ (x | (~z)));\n    }\n\n    function FF(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function GG(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function HH(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function II(a,b,c,d,x,s,ac) {\n      a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));\n      return AddUnsigned(RotateLeft(a, s), b);\n    }\n\n    function ConvertToWordArray(string) {\n      var lWordCount;\n      var lMessageLength = string.length;\n      var lNumberOfWords_temp1=lMessageLength + 8;\n      var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;\n      var lNumberOfWords = (lNumberOfWords_temp2+1)*16;\n      var lWordArray=Array(lNumberOfWords-1);\n      var lBytePosition = 0;\n      var lByteCount = 0;\n      while ( lByteCount < lMessageLength ) {\n        lWordCount = (lByteCount-(lByteCount % 4))/4;\n        lBytePosition = (lByteCount % 4)*8;\n        lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount)<<lBytePosition));\n        lByteCount++;\n      }\n      lWordCount = (lByteCount-(lByteCount % 4))/4;\n      lBytePosition = (lByteCount % 4)*8;\n      lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);\n      lWordArray[lNumberOfWords-2] = lMessageLength<<3;\n      lWordArray[lNumberOfWords-1] = lMessageLength>>>29;\n      return lWordArray;\n    }\n\n    function WordToHex(lValue) {\n      var WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n      for (lCount = 0;lCount<=3;lCount++) {\n        lByte = (lValue>>>(lCount*8)) & 255;\n        WordToHexValue_temp = \"0\" + lByte.toString(16);\n        WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n      }\n      return WordToHexValue;\n    }\n\n    function Utf8Encode(string) {\n      string = string.replace(/\\r\\n/g,\"\\n\");\n      var utftext = \"\";\n\n      for (var n = 0; n < string.length; n++) {\n        var c = string.charCodeAt(n);\n\n        if (c < 128) {\n          utftext += String.fromCharCode(c);\n        }\n        else if((c > 127) && (c < 2048)) {\n          utftext += String.fromCharCode((c >> 6) | 192);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n        else {\n          utftext += String.fromCharCode((c >> 12) | 224);\n          utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n          utftext += String.fromCharCode((c & 63) | 128);\n        }\n      }\n      return utftext;\n    }\n\n    var x=[];\n    var k,AA,BB,CC,DD,a,b,c,d;\n    var S11=7, S12=12, S13=17, S14=22;\n    var S21=5, S22=9 , S23=14, S24=20;\n    var S31=4, S32=11, S33=16, S34=23;\n    var S41=6, S42=10, S43=15, S44=21;\n\n    string = Utf8Encode(string);\n\n    x = ConvertToWordArray(string);\n\n    a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;\n\n    for (k=0;k<x.length;k+=16) {\n      AA=a; BB=b; CC=c; DD=d;\n      a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n      d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n      c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n      b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n      a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n      d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n      c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n      b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n      a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n      d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n      c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n      b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n      a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n      d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n      c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n      b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n      a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n      d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n      c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n      b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n      a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n      d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n      c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n      b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n      a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n      d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n      c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n      b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n      a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n      d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n      c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n      b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n      a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n      d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n      c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n      b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n      a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n      d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n      c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n      b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n      a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n      d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n      c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n      b=HH(b,c,d,a,x[k+6], S34,0x4881D05);\n      a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n      d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n      c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n      b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n      a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n      d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n      c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n      b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n      a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n      d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n      c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n      b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n      a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n      d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);\n      c=II(c,d,a,b,x[k+6], S43,0xA3014314);\n      b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);\n      a=II(a,b,c,d,x[k+4], S41,0xF7537E82);\n      d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);\n      c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);\n      b=II(b,c,d,a,x[k+9], S44,0xEB86D391);\n      a=AddUnsigned(a,AA);\n      b=AddUnsigned(b,BB);\n      c=AddUnsigned(c,CC);\n      d=AddUnsigned(d,DD);\n    }\n\n    var temp = WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n\n    return temp.toLowerCase();\n  }\n};\n\nSIP.Utils = Utils;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Utils.js\n ** module id = 4\n ** module chunks = 0\n **/","\nmodule.exports = (function() {\n\nvar Logger = function(logger, category, label) {\n  this.logger = logger;\n  this.category = category;\n  this.label = label;\n};\n\n\nLogger.prototype.debug = function(content) {\n  this.logger.debug(this.category, this.label, content);\n};\n\nLogger.prototype.log = function(content) {\n  this.logger.log(this.category, this.label, content);\n};\n\nLogger.prototype.warn = function(content) {\n  this.logger.warn(this.category, this.label, content);\n};\n\nLogger.prototype.error = function(content) {\n  this.logger.error(this.category, this.label, content);\n};\n\nreturn Logger;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Logger.js\n ** module id = 5\n ** module chunks = 0\n **/","\nmodule.exports = function (window, Logger) {\n\n// Console is not defined in ECMAScript, so just in case...\nvar console = window.console || {\n  debug: function () {},\n  log: function () {},\n  warn: function () {},\n  error: function () {}\n};\n\nvar LoggerFactory = function() {\n  var logger,\n    levels = {\n    'error': 0,\n    'warn': 1,\n    'log': 2,\n    'debug': 3\n    },\n\n    level = 2,\n    builtinEnabled = true,\n    connector = null;\n\n    this.loggers = {};\n\n    logger = this.getLogger('sip.loggerfactory');\n\n\n  Object.defineProperties(this, {\n    builtinEnabled: {\n      get: function(){ return builtinEnabled; },\n      set: function(value){\n        if (typeof value === 'boolean') {\n          builtinEnabled = value;\n        } else {\n          logger.error('invalid \"builtinEnabled\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    level: {\n      get: function() {return level; },\n      set: function(value) {\n        if (value >= 0 && value <=3) {\n          level = value;\n        } else if (value > 3) {\n          level = 3;\n        } else if (levels.hasOwnProperty(value)) {\n          level = levels[value];\n        } else {\n          logger.error('invalid \"level\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    },\n\n    connector: {\n      get: function() {return connector; },\n      set: function(value){\n        if(value === null || value === \"\" || value === undefined) {\n          connector = null;\n        } else if (typeof value === 'function') {\n          connector = value;\n        } else {\n          logger.error('invalid \"connector\" parameter value: '+ JSON.stringify(value));\n        }\n      }\n    }\n  });\n};\n\nLoggerFactory.prototype.print = function(target, category, label, content) {\n  var prefix = [];\n\n  prefix.push(new Date());\n\n  prefix.push(category);\n\n  if (label) {\n    prefix.push(label);\n  }\n\n  prefix.push('');\n\n  if (typeof content === 'string') {\n    target.call(console, prefix.join(' | ') + content);\n  } else {\n    target.call(console, content);\n  }\n};\n\nLoggerFactory.prototype.debug = function(category, label, content) {\n  if (this.level === 3) {\n    if (this.builtinEnabled) {\n      this.print(console.debug, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('debug', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.log = function(category, label, content) {\n  if (this.level >= 2) {\n    if (this.builtinEnabled) {\n      this.print(console.log, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('log', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.warn = function(category, label, content) {\n  if (this.level >= 1) {\n    if (this.builtinEnabled) {\n      this.print(console.warn, category, label, content);\n    }\n\n    if (this.connector) {\n      this.connector('warn', category, label, content);\n    }\n  }\n};\n\nLoggerFactory.prototype.error = function(category, label, content) {\n  if (this.builtinEnabled) {\n    this.print(console.error,category, label, content);\n  }\n\n  if (this.connector) {\n    this.connector('error', category, label, content);\n  }\n};\n\nLoggerFactory.prototype.getLogger = function(category, label) {\n  var logger;\n\n  if (label && this.level === 3) {\n    return new Logger(this, category, label);\n  } else if (this.loggers[category]) {\n    return this.loggers[category];\n  } else {\n    logger = new Logger(this, category);\n    this.loggers[category] = logger;\n    return logger;\n  }\n};\n\nreturn LoggerFactory;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/LoggerFactory.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\n * @fileoverview EventEmitter\n */\n\n/**\n * @augments SIP\n * @class Class creating an event emitter.\n */\nmodule.exports = function (SIP) {\nvar\n  EventEmitter,\n  Event,\n  logger = new SIP.LoggerFactory().getLogger('sip.eventemitter'),\n  C = {\n    MAX_LISTENERS: 10\n  };\n\nEventEmitter = function(){};\nEventEmitter.prototype = {\n  /**\n   * Initialize events dictionaries.\n   * @param {Array} events\n   */\n  initEvents: function(events) {\n    this.events = {};\n\n    return this.initMoreEvents(events);\n  },\n\n  initMoreEvents: function(events) {\n    var idx;\n\n    if (!this.logger) {\n      this.logger = logger;\n    }\n\n    this.maxListeners = C.MAX_LISTENERS;\n\n    for (idx = 0; idx < events.length; idx++) {\n      if (!this.events[events[idx]]) {\n        this.logger.log('adding event '+ events[idx]);\n        this.events[events[idx]] = [];\n      } else {\n        this.logger.log('skipping event '+ events[idx]+ ' - Event exists');\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * Check whether an event exists or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkEvent: function(event) {\n    return !!(this.events && this.events[event]);\n  },\n\n  /**\n  * Check whether an event exists and has at least one listener or not.\n  * @param {String} event\n  * @returns {Boolean}\n  */\n  checkListener: function(event) {\n    return this.checkEvent(event) && this.events[event].length > 0;\n  },\n\n  /**\n  * Add a listener to the end of the listeners array for the specified event.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  on: function(event, listener, bindTarget) {\n    if (listener === undefined) {\n      return this;\n    } else if (typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to add a listener to a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    var listenerObj = { listener: listener };\n    if (bindTarget) {\n      listenerObj.bindTarget = bindTarget;\n    }\n\n    if (this.events[event].length >= this.maxListeners) {\n      this.logger.warn('max listeners exceeded for event '+ event);\n      return this;\n    }\n\n    this.events[event].push(listenerObj);\n    this.logger.log('new listener added to event '+ event);\n    return this;\n  },\n\n  /**\n  * Add a one time listener for the specified event.\n  * The listener is invoked only the next time the event is fired, then it is removed.\n  * @param {String} event\n  * @param {Function} listener\n  */\n  once: function(event, listener, bindTarget) {\n    var self = this;\n    function listenOnce () {\n      listener.apply(this, arguments);\n      self.off(event, listenOnce, bindTarget);\n    }\n\n    return this.on(event, listenOnce, bindTarget);\n  },\n\n  /**\n  * Remove a listener from the listener array for the specified event.\n  * Note that the order of the array elements will change after removing the listener\n  * @param {String} event\n  * @param {Function} listener\n  */\n  off: function(event, listener, bindTarget) {\n    var events, length,\n      idx = 0;\n\n    if (listener && typeof listener !== 'function') {\n      this.logger.error('listener must be a function');\n      return this;\n    } else if (!event) {\n      for (idx in this.events) {\n        this.events[idx] = [];\n      }\n      return this;\n    } else if (!this.checkEvent(event)) {\n      this.logger.error('unable to remove a listener from a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    events = this.events[event];\n    length = events.length;\n\n    while (idx < length) {\n      if (events[idx] &&\n          (!listener || events[idx].listener === listener) &&\n          (!bindTarget || events[idx].bindTarget === bindTarget)) {\n        events.splice(idx,1);\n      } else {\n        idx ++;\n      }\n    }\n\n    return this;\n  },\n\n  /**\n  * By default EventEmitter will print a warning\n  * if more than C.MAX_LISTENERS listeners are added for a particular event.\n  * This function allows that limit to be modified.\n  * @param {Number} listeners\n  */\n  setMaxListeners: function(listeners) {\n    if (typeof listeners !== 'number' || listeners < 0) {\n      this.logger.error('listeners must be a positive number');\n      return this;\n    }\n\n    this.maxListeners = listeners;\n    return this;\n  },\n\n  /**\n  * Execute each of the listeners in order with the supplied arguments.\n  * @param {String} events\n  * @param {Array} args\n  */\n  emit: function(event) {\n    if (!this.checkEvent(event)) {\n      this.logger.error('unable to emit a nonexistent event '+ event);\n      throw new TypeError('Invalid or uninitialized event: ' + event);\n    }\n\n    this.logger.log('emitting event '+ event);\n\n    // Fire event listeners\n    var args = Array.prototype.slice.call(arguments, 1);\n    this.events[event].slice().forEach(function (listener) {\n      try {\n        listener.listener.apply(listener.bindTarget || this, args);\n      } catch(err) {\n        this.logger.error(err.stack);\n      }\n    }, this);\n\n    return this;\n  }\n};\n\nEvent = function(type, sender, data) {\n  this.type = type;\n  this.sender= sender;\n  this.data = data;\n};\n\nEventEmitter.C = C;\n\nSIP.EventEmitter = EventEmitter;\nSIP.Event = Event;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/EventEmitter.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Constants\n */\n\n/**\n * SIP Constants.\n * @augments SIP\n */\n\nmodule.exports = function (name, version) {\nreturn {\n  USER_AGENT: name +'/'+ version,\n\n  // SIP scheme\n  SIP:  'sip',\n  SIPS: 'sips',\n\n  // End and Failure causes\n  causes: {\n    // Generic error causes\n    CONNECTION_ERROR:         'Connection Error',\n    REQUEST_TIMEOUT:          'Request Timeout',\n    SIP_FAILURE_CODE:         'SIP Failure Code',\n    INTERNAL_ERROR:           'Internal Error',\n\n    // SIP error causes\n    BUSY:                     'Busy',\n    REJECTED:                 'Rejected',\n    REDIRECTED:               'Redirected',\n    UNAVAILABLE:              'Unavailable',\n    NOT_FOUND:                'Not Found',\n    ADDRESS_INCOMPLETE:       'Address Incomplete',\n    INCOMPATIBLE_SDP:         'Incompatible SDP',\n    AUTHENTICATION_ERROR:     'Authentication Error',\n    DIALOG_ERROR:             'Dialog Error',\n\n    // Session error causes\n    WEBRTC_NOT_SUPPORTED:     'WebRTC Not Supported',\n    WEBRTC_ERROR:             'WebRTC Error',\n    CANCELED:                 'Canceled',\n    NO_ANSWER:                'No Answer',\n    EXPIRES:                  'Expires',\n    NO_ACK:                   'No ACK',\n    NO_PRACK:                 'No PRACK',\n    USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',\n    BAD_MEDIA_DESCRIPTION:    'Bad Media Description',\n    RTP_TIMEOUT:              'RTP Timeout'\n  },\n\n  supported: {\n    UNSUPPORTED:        'none',\n    SUPPORTED:          'supported',\n    REQUIRED:           'required'\n  },\n\n  SIP_ERROR_CAUSES: {\n    REDIRECTED: [300,301,302,305,380],\n    BUSY: [486,600],\n    REJECTED: [403,603],\n    NOT_FOUND: [404,604],\n    UNAVAILABLE: [480,410,408,430],\n    ADDRESS_INCOMPLETE: [484],\n    INCOMPATIBLE_SDP: [488,606],\n    AUTHENTICATION_ERROR:[401,407]\n  },\n\n  // SIP Methods\n  ACK:        'ACK',\n  BYE:        'BYE',\n  CANCEL:     'CANCEL',\n  INFO:       'INFO',\n  INVITE:     'INVITE',\n  MESSAGE:    'MESSAGE',\n  NOTIFY:     'NOTIFY',\n  OPTIONS:    'OPTIONS',\n  REGISTER:   'REGISTER',\n  UPDATE:     'UPDATE',\n  SUBSCRIBE:  'SUBSCRIBE',\n  REFER:      'REFER',\n  PRACK:      'PRACK',\n\n  /* SIP Response Reasons\n   * DOC: http://www.iana.org/assignments/sip-parameters\n   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7\n   */\n  REASON_PHRASE: {\n    100: 'Trying',\n    180: 'Ringing',\n    181: 'Call Is Being Forwarded',\n    182: 'Queued',\n    183: 'Session Progress',\n    199: 'Early Dialog Terminated',  // draft-ietf-sipcore-199\n    200: 'OK',\n    202: 'Accepted',  // RFC 3265\n    204: 'No Notification',  //RFC 5839\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    305: 'Use Proxy',\n    380: 'Alternative Service',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Timeout',\n    410: 'Gone',\n    412: 'Conditional Request Failed',  // RFC 3903\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Long',\n    415: 'Unsupported Media Type',\n    416: 'Unsupported URI Scheme',\n    417: 'Unknown Resource-Priority',  // RFC 4412\n    420: 'Bad Extension',\n    421: 'Extension Required',\n    422: 'Session Interval Too Small',  // RFC 4028\n    423: 'Interval Too Brief',\n    428: 'Use Identity Header',  // RFC 4474\n    429: 'Provide Referrer Identity',  // RFC 3892\n    430: 'Flow Failed',  // RFC 5626\n    433: 'Anonymity Disallowed',  // RFC 5079\n    436: 'Bad Identity-Info',  // RFC 4474\n    437: 'Unsupported Certificate',  // RFC 4744\n    438: 'Invalid Identity Header',  // RFC 4744\n    439: 'First Hop Lacks Outbound Support',  // RFC 5626\n    440: 'Max-Breadth Exceeded',  // RFC 5393\n    469: 'Bad Info Package',  // draft-ietf-sipcore-info-events\n    470: 'Consent Needed',  // RFC 5360\n    478: 'Unresolvable Destination',  // Custom code copied from Kamailio.\n    480: 'Temporarily Unavailable',\n    481: 'Call/Transaction Does Not Exist',\n    482: 'Loop Detected',\n    483: 'Too Many Hops',\n    484: 'Address Incomplete',\n    485: 'Ambiguous',\n    486: 'Busy Here',\n    487: 'Request Terminated',\n    488: 'Not Acceptable Here',\n    489: 'Bad Event',  // RFC 3265\n    491: 'Request Pending',\n    493: 'Undecipherable',\n    494: 'Security Agreement Required',  // RFC 3329\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Server Time-out',\n    505: 'Version Not Supported',\n    513: 'Message Too Large',\n    580: 'Precondition Failure',  // RFC 3312\n    600: 'Busy Everywhere',\n    603: 'Decline',\n    604: 'Does Not Exist Anywhere',\n    606: 'Not Acceptable'\n  }\n};\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Constants.js\n ** module id = 8\n ** module chunks = 0\n **/","/**\n * @fileoverview Exceptions\n */\n\n/**\n * SIP Exceptions.\n * @augments SIP\n */\nmodule.exports = {\n  ConfigurationError: (function(){\n    var exception = function(parameter, value) {\n      this.code = 1;\n      this.name = 'CONFIGURATION_ERROR';\n      this.parameter = parameter;\n      this.value = value;\n      this.message = (!this.value)? 'Missing parameter: '+ this.parameter : 'Invalid value '+ JSON.stringify(this.value) +' for parameter \"'+ this.parameter +'\"';\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  InvalidStateError: (function(){\n    var exception = function(status) {\n      this.code = 2;\n      this.name = 'INVALID_STATE_ERROR';\n      this.status = status;\n      this.message = 'Invalid status: ' + status;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotSupportedError: (function(){\n    var exception = function(message) {\n      this.code = 3;\n      this.name = 'NOT_SUPPORTED_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }()),\n\n  NotReadyError: (function(){\n    var exception = function(message) {\n      this.code = 4;\n      this.name = 'NOT_READY_ERROR';\n      this.message = message;\n    };\n    exception.prototype = new Error();\n    return exception;\n  }())\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Exceptions.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP TIMERS\n */\n\n/**\n * @augments SIP\n */\nvar\n  T1 = 500,\n  T2 = 4000,\n  T4 = 5000;\nmodule.exports = function (timers) {\n  var exports = {\n    T1: T1,\n    T2: T2,\n    T4: T4,\n    TIMER_B: 64 * T1,\n    TIMER_D: 0  * T1,\n    TIMER_F: 64 * T1,\n    TIMER_H: 64 * T1,\n    TIMER_I: 0  * T1,\n    TIMER_J: 0  * T1,\n    TIMER_K: 0  * T4,\n    TIMER_L: 64 * T1,\n    TIMER_M: 64 * T1,\n    TIMER_N: 64 * T1,\n    PROVISIONAL_RESPONSE_INTERVAL: 60000  // See RFC 3261 Section 13.3.1.1\n  };\n\n  ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']\n  .forEach(function (name) {\n    // can't just use timers[name].bind(timers) since it bypasses jasmine's\n    // clock-mocking\n    exports[name] = function () {\n      return timers[name].apply(timers, arguments);\n    };\n  });\n\n  return exports;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Timers.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * @fileoverview Transport\n */\n\n/**\n * @augments SIP\n * @class Transport\n * @param {SIP.UA} ua\n * @param {Object} server ws_server Object\n */\nmodule.exports = function (SIP, window) {\nvar Transport,\n  C = {\n    // Transport status codes\n    STATUS_READY:        0,\n    STATUS_DISCONNECTED: 1,\n    STATUS_ERROR:        2\n  };\n\nTransport = function(ua, server) {\n\n  this.logger = ua.getLogger('sip.transport');\n  this.ua = ua;\n  this.ws = null;\n  this.server = server;\n  this.reconnection_attempts = 0;\n  this.closed = false;\n  this.connected = false;\n  this.reconnectTimer = null;\n  this.lastTransportError = {};\n\n  this.ua.transport = this;\n\n  // Connect\n  this.connect();\n};\n\nTransport.prototype = {\n  /**\n   * Send a message.\n   * @param {SIP.OutgoingRequest|String} msg\n   * @returns {Boolean}\n   */\n  send: function(msg) {\n    var message = msg.toString();\n\n    if(this.ws && this.ws.readyState === window.WebSocket.OPEN) {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('sending WebSocket message:\\n\\n' + message + '\\n');\n      }\n      this.ws.send(message);\n      return true;\n    } else {\n      this.logger.warn('unable to send message, WebSocket is not open');\n      return false;\n    }\n  },\n\n  /**\n  * Disconnect socket.\n  */\n  disconnect: function() {\n    if(this.ws) {\n      // Clear reconnectTimer\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n\n      this.closed = true;\n      this.logger.log('closing WebSocket ' + this.server.ws_uri);\n      this.ws.close();\n    }\n\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n      this.ua.emit('disconnected', {\n        transport: this,\n        code: this.lastTransportError.code,\n        reason: this.lastTransportError.reason\n      });\n    }\n  },\n\n  /**\n  * Connect socket.\n  */\n  connect: function() {\n    var transport = this;\n\n    if(this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');\n      return false;\n    }\n\n    if(this.ws) {\n      this.ws.close();\n    }\n\n    this.logger.log('connecting to WebSocket ' + this.server.ws_uri);\n    this.ua.onTransportConnecting(this,\n      (this.reconnection_attempts === 0)?1:this.reconnection_attempts);\n\n    try {\n      this.ws = new window.WebSocket(this.server.ws_uri, 'sip');\n    } catch(e) {\n      this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);\n    }\n\n    this.ws.binaryType = 'arraybuffer';\n\n    this.ws.onopen = function() {\n      transport.onOpen();\n    };\n\n    this.ws.onclose = function(e) {\n      transport.onClose(e);\n    };\n\n    this.ws.onmessage = function(e) {\n      transport.onMessage(e);\n    };\n\n    this.ws.onerror = function(e) {\n      transport.onError(e);\n    };\n  },\n\n  // Transport Event Handlers\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onOpen: function() {\n    this.connected = true;\n\n    this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');\n    // Clear reconnectTimer since we are not disconnected\n    if (this.reconnectTimer !== null) {\n      SIP.Timers.clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    // Reset reconnection_attempts\n    this.reconnection_attempts = 0;\n    // Disable closed\n    this.closed = false;\n    // Trigger onTransportConnected callback\n    this.ua.onTransportConnected(this);\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onClose: function(e) {\n    var connected_before = this.connected;\n\n    this.connected = false;\n    this.lastTransportError.code = e.code;\n    this.lastTransportError.reason = e.reason;\n    this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason? '| reason: ' + e.reason : '') +')');\n\n    if(e.wasClean === false) {\n      this.logger.warn('WebSocket abrupt disconnection');\n    }\n    // Transport was connected\n    if(connected_before === true) {\n      this.ua.onTransportClosed(this);\n      // Check whether the user requested to close.\n      if(!this.closed) {\n        this.reConnect();\n      } else {\n        this.ua.emit('disconnected', {\n          transport: this,\n          code: this.lastTransportError.code,\n          reason: this.lastTransportError.reason\n        });\n      }\n    } else {\n      // This is the first connection attempt\n      //Network error\n      this.ua.onTransportError(this);\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onMessage: function(e) {\n    var message, transaction,\n      data = e.data;\n\n    // CRLF Keep Alive response from server. Ignore it.\n    if(data === '\\r\\n') {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket message with CRLF Keep Alive response');\n      }\n      return;\n    }\n\n    // WebSocket binary message.\n    else if (typeof data !== 'string') {\n      try {\n        data = String.fromCharCode.apply(null, new Uint8Array(data));\n      } catch(evt) {\n        this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');\n        return;\n      }\n\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket binary message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    // WebSocket text message.\n    else {\n      if (this.ua.configuration.traceSip === true) {\n        this.logger.log('received WebSocket text message:\\n\\n' + data + '\\n');\n      }\n    }\n\n    message = SIP.Parser.parseMessage(data, this.ua);\n\n    if (!message) {\n      return;\n    }\n\n    if(this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {\n      return;\n    }\n\n    // Do some sanity check\n    if(SIP.sanityCheck(message, this.ua, this)) {\n      if(message instanceof SIP.IncomingRequest) {\n        message.transport = this;\n        this.ua.receiveRequest(message);\n      } else if(message instanceof SIP.IncomingResponse) {\n        /* Unike stated in 18.1.2, if a response does not match\n        * any transaction, it is discarded here and no passed to the core\n        * in order to be discarded there.\n        */\n        switch(message.method) {\n          case SIP.C.INVITE:\n            transaction = this.ua.transactions.ict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n          case SIP.C.ACK:\n            // Just in case ;-)\n            break;\n          default:\n            transaction = this.ua.transactions.nict[message.via_branch];\n            if(transaction) {\n              transaction.receiveResponse(message);\n            }\n            break;\n        }\n      }\n    }\n  },\n\n  /**\n  * @event\n  * @param {event} e\n  */\n  onError: function(e) {\n    this.logger.warn('WebSocket connection error: ' + e);\n  },\n\n  /**\n  * Reconnection attempt logic.\n  * @private\n  */\n  reConnect: function() {\n    var transport = this;\n\n    this.reconnection_attempts += 1;\n\n    if(this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {\n      this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);\n      this.ua.onTransportError(this);\n    } else {\n      this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');\n\n      this.reconnectTimer = SIP.Timers.setTimeout(function() {\n        transport.connect();\n        transport.reconnectTimer = null;\n      }, this.ua.configuration.wsServerReconnectionTimeout * 1000);\n    }\n  }\n};\n\nTransport.C = C;\nSIP.Transport = Transport;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Transport.js\n ** module id = 11\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Message Parser\n */\n\n/**\n * Extract and parse every header of a SIP message.\n * @augments SIP\n * @namespace\n */\nmodule.exports = function (SIP) {\nvar Parser;\n\nfunction getHeader(data, headerStart) {\n  var\n    // 'start' position of the header.\n    start = headerStart,\n    // 'end' position of the header.\n    end = 0,\n    // 'partial end' position of the header.\n    partialEnd = 0;\n\n  //End of message.\n  if (data.substring(start, start + 2).match(/(^\\r\\n)/)) {\n    return -2;\n  }\n\n  while(end === 0) {\n    // Partial End of Header.\n    partialEnd = data.indexOf('\\r\\n', start);\n\n    // 'indexOf' returns -1 if the value to be found never occurs.\n    if (partialEnd === -1) {\n      return partialEnd;\n    }\n\n    if(!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\\r\\n)/) && data.charAt(partialEnd + 2).match(/(^\\s+)/)) {\n      // Not the end of the message. Continue from the next position.\n      start = partialEnd + 2;\n    } else {\n      end = partialEnd;\n    }\n  }\n\n  return end;\n}\n\nfunction parseHeader(message, data, headerStart, headerEnd) {\n  var header, idx, length, parsed,\n    hcolonIndex = data.indexOf(':', headerStart),\n    headerName = data.substring(headerStart, hcolonIndex).trim(),\n    headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();\n\n  // If header-field is well-known, parse it.\n  switch(headerName.toLowerCase()) {\n    case 'via':\n    case 'v':\n      message.addHeader('via', headerValue);\n      if(message.getHeaders('via').length === 1) {\n        parsed = message.parseHeader('Via');\n        if(parsed) {\n          message.via = parsed;\n          message.via_branch = parsed.branch;\n        }\n      } else {\n        parsed = 0;\n      }\n      break;\n    case 'from':\n    case 'f':\n      message.setHeader('from', headerValue);\n      parsed = message.parseHeader('from');\n      if(parsed) {\n        message.from = parsed;\n        message.from_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'to':\n    case 't':\n      message.setHeader('to', headerValue);\n      parsed = message.parseHeader('to');\n      if(parsed) {\n        message.to = parsed;\n        message.to_tag = parsed.getParam('tag');\n      }\n      break;\n    case 'record-route':\n      parsed = SIP.Grammar.parse(headerValue, 'Record_Route');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('record-route', headerValue.substring(header.position, header.offset));\n        message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'call-id':\n    case 'i':\n      message.setHeader('call-id', headerValue);\n      parsed = message.parseHeader('call-id');\n      if(parsed) {\n        message.call_id = headerValue;\n      }\n      break;\n    case 'contact':\n    case 'm':\n      parsed = SIP.Grammar.parse(headerValue, 'Contact');\n\n      if (parsed === -1) {\n        parsed = undefined;\n        break;\n      }\n\n      length = parsed.length;\n      for (idx = 0; idx < length; idx++) {\n        header = parsed[idx];\n        message.addHeader('contact', headerValue.substring(header.position, header.offset));\n        message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;\n      }\n      break;\n    case 'content-length':\n    case 'l':\n      message.setHeader('content-length', headerValue);\n      parsed = message.parseHeader('content-length');\n      break;\n    case 'content-type':\n    case 'c':\n      message.setHeader('content-type', headerValue);\n      parsed = message.parseHeader('content-type');\n      break;\n    case 'cseq':\n      message.setHeader('cseq', headerValue);\n      parsed = message.parseHeader('cseq');\n      if(parsed) {\n        message.cseq = parsed.value;\n      }\n      if(message instanceof SIP.IncomingResponse) {\n        message.method = parsed.method;\n      }\n      break;\n    case 'max-forwards':\n      message.setHeader('max-forwards', headerValue);\n      parsed = message.parseHeader('max-forwards');\n      break;\n    case 'www-authenticate':\n      message.setHeader('www-authenticate', headerValue);\n      parsed = message.parseHeader('www-authenticate');\n      break;\n    case 'proxy-authenticate':\n      message.setHeader('proxy-authenticate', headerValue);\n      parsed = message.parseHeader('proxy-authenticate');\n      break;\n    case 'refer-to':\n    case 'r':\n      message.setHeader('refer-to', headerValue);\n      parsed = message.parseHeader('refer-to');\n      if (parsed) {\n        message.refer_to = parsed;\n      }\n      break;\n    default:\n      // Do not parse this header.\n      message.setHeader(headerName, headerValue);\n      parsed = 0;\n  }\n\n  if (parsed === undefined) {\n    return {\n      error: 'error parsing header \"'+ headerName +'\"'\n    };\n  } else {\n    return true;\n  }\n}\n\n/** Parse SIP Message\n * @function\n * @param {String} message SIP message.\n * @param {Object} logger object.\n * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}\n */\nParser = {};\nParser.parseMessage = function(data, ua) {\n  var message, firstLine, contentLength, bodyStart, parsed,\n    headerStart = 0,\n    headerEnd = data.indexOf('\\r\\n'),\n    logger = ua.getLogger('sip.parser');\n\n  if(headerEnd === -1) {\n    logger.warn('no CRLF found, not a SIP message, discarded');\n    return;\n  }\n\n  // Parse first line. Check if it is a Request or a Reply.\n  firstLine = data.substring(0, headerEnd);\n  parsed = SIP.Grammar.parse(firstLine, 'Request_Response');\n\n  if(parsed === -1) {\n    logger.warn('error parsing first line of SIP message: \"' + firstLine + '\"');\n    return;\n  } else if(!parsed.status_code) {\n    message = new SIP.IncomingRequest(ua);\n    message.method = parsed.method;\n    message.ruri = parsed.uri;\n  } else {\n    message = new SIP.IncomingResponse(ua);\n    message.status_code = parsed.status_code;\n    message.reason_phrase = parsed.reason_phrase;\n  }\n\n  message.data = data;\n  headerStart = headerEnd + 2;\n\n  /* Loop over every line in data. Detect the end of each header and parse\n  * it or simply add to the headers collection.\n  */\n  while(true) {\n    headerEnd = getHeader(data, headerStart);\n\n    // The SIP message has normally finished.\n    if(headerEnd === -2) {\n      bodyStart = headerStart + 2;\n      break;\n    }\n    // data.indexOf returned -1 due to a malformed message.\n    else if(headerEnd === -1) {\n      logger.error('malformed message');\n      return;\n    }\n\n    parsed = parseHeader(message, data, headerStart, headerEnd);\n\n    if(parsed !== true) {\n      logger.error(parsed.error);\n      return;\n    }\n\n    headerStart = headerEnd + 2;\n  }\n\n  /* RFC3261 18.3.\n   * If there are additional bytes in the transport packet\n   * beyond the end of the body, they MUST be discarded.\n   */\n  if(message.hasHeader('content-length')) {\n    contentLength = message.getHeader('content-length');\n    message.body = data.substr(bodyStart, contentLength);\n  } else {\n    message.body = data.substring(bodyStart);\n  }\n\n  return message;\n};\n\nSIP.Parser = Parser;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Parser.js\n ** module id = 12\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Message\n */\n\nmodule.exports = function (SIP) {\nvar\n  OutgoingRequest,\n  IncomingMessage,\n  IncomingRequest,\n  IncomingResponse;\n\n/**\n * @augments SIP\n * @class Class for outgoing SIP request.\n * @param {String} method request method\n * @param {String} ruri request uri\n * @param {SIP.UA} ua\n * @param {Object} params parameters that will have priority over ua.configuration parameters:\n * <br>\n *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set\n * @param {Object} [headers] extra headers\n * @param {String} [body]\n */\nOutgoingRequest = function(method, ruri, ua, params, extraHeaders, body) {\n  var\n    to,\n    from,\n    call_id,\n    cseq;\n\n  params = params || {};\n\n  // Mandatory parameters check\n  if(!method || !ruri || !ua) {\n    return null;\n  }\n\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.method = method;\n  this.ruri = ruri;\n  this.body = body;\n  this.extraHeaders = (extraHeaders || []).slice();\n  this.statusCode = params.status_code;\n  this.reasonPhrase = params.reason_phrase;\n\n  // Fill the Common SIP Request Headers\n\n  // Route\n  if (params.route_set) {\n    this.setHeader('route', params.route_set);\n  } else if (ua.configuration.usePreloadedRoute){\n    this.setHeader('route', ua.transport.server.sip_uri);\n  }\n\n  // Via\n  // Empty Via header. Will be filled by the client transaction.\n  this.setHeader('via', '');\n\n  // Max-Forwards\n  this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);\n\n  // To\n  to = (params.to_displayName || params.to_displayName === 0) ? '\"' + params.to_displayName + '\" ' : '';\n  to += '<' + (params.to_uri || ruri) + '>';\n  to += params.to_tag ? ';tag=' + params.to_tag : '';\n  this.to = new SIP.NameAddrHeader.parse(to);\n  this.setHeader('to', to);\n\n  // From\n  if (params.from_displayName || params.from_displayName === 0) {\n    from = '\"' + params.from_displayName + '\" ';\n  } else if (ua.configuration.displayName) {\n    from = '\"' + ua.configuration.displayName + '\" ';\n  } else {\n    from = '';\n  }\n  from += '<' + (params.from_uri || ua.configuration.uri) + '>;tag=';\n  from += params.from_tag || SIP.Utils.newTag();\n  this.from = new SIP.NameAddrHeader.parse(from);\n  this.setHeader('from', from);\n\n  // Call-ID\n  call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));\n  this.call_id = call_id;\n  this.setHeader('call-id', call_id);\n\n  // CSeq\n  cseq = params.cseq || Math.floor(Math.random() * 10000);\n  this.cseq = cseq;\n  this.setHeader('cseq', cseq + ' ' + method);\n};\n\nOutgoingRequest.prototype = {\n  /**\n   * Replace the the given header by the given value.\n   * @param {String} name header name\n   * @param {String | Array} value header value\n   */\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length,\n      header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0];\n      }\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          return header.substring(header.indexOf(':')+1).trim();\n        }\n      }\n    }\n\n    return;\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length, regexp,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(header) {\n      length = header.length;\n      for (idx = 0; idx < length; idx++) {\n        result.push(header[idx]);\n      }\n      return result;\n    } else {\n      length = this.extraHeaders.length;\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        header = this.extraHeaders[idx];\n        if (regexp.test(header)) {\n          result.push(header.substring(header.indexOf(':')+1).trim());\n        }\n      }\n      return result;\n    }\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    var regexp, idx,\n      length = this.extraHeaders.length;\n\n    if (this.headers[SIP.Utils.headerize(name)]) {\n      return true;\n    } else {\n      regexp = new RegExp('^\\\\s*' + name + '\\\\s*:','i');\n      for (idx = 0; idx < length; idx++) {\n        if (regexp.test(this.extraHeaders[idx])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n\n  toString: function() {\n    var msg = '', header, length, idx, supported = [];\n\n    msg += this.method + ' ' + this.ruri + ' SIP/2.0\\r\\n';\n\n    for (header in this.headers) {\n      length = this.headers[header].length;\n      for (idx = 0; idx < length; idx++) {\n        msg += header + ': ' + this.headers[header][idx] + '\\r\\n';\n      }\n    }\n\n    length = this.extraHeaders.length;\n    for (idx = 0; idx < length; idx++) {\n      msg += this.extraHeaders[idx].trim() +'\\r\\n';\n    }\n\n    //Supported\n    if (this.method === SIP.C.REGISTER) {\n      supported.push('path', 'gruu');\n    } else if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n      supported.push('gruu');\n    }\n\n    if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n      supported.push('100rel');\n    }\n\n    supported.push('outbound');\n\n    msg += 'Supported: ' +  supported +'\\r\\n';\n    msg += 'User-Agent: ' + this.ua.configuration.userAgentString +'\\r\\n';\n\n    if(this.body) {\n      length = SIP.Utils.str_utf8_length(this.body);\n      msg += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n      msg += this.body;\n    } else {\n      msg += 'Content-Length: 0\\r\\n\\r\\n';\n    }\n\n    return msg;\n  }\n};\n\n/**\n * @augments SIP\n * @class Class for incoming SIP message.\n */\nIncomingMessage = function(){\n  this.data = null;\n  this.headers = null;\n  this.method =  null;\n  this.via = null;\n  this.via_branch = null;\n  this.call_id = null;\n  this.cseq = null;\n  this.from = null;\n  this.from_tag = null;\n  this.to = null;\n  this.to_tag = null;\n  this.body = null;\n};\n\nIncomingMessage.prototype = {\n  /**\n  * Insert a header of the given name and value into the last position of the\n  * header array.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  addHeader: function(name, value) {\n    var header = { raw: value };\n\n    name = SIP.Utils.headerize(name);\n\n    if(this.headers[name]) {\n      this.headers[name].push(header);\n    } else {\n      this.headers[name] = [header];\n    }\n  },\n\n  /**\n   * Get the value of the given header name at the given position.\n   * @param {String} name header name\n   * @returns {String|undefined} Returns the specified header, null if header doesn't exist.\n   */\n  getHeader: function(name) {\n    var header = this.headers[SIP.Utils.headerize(name)];\n\n    if(header) {\n      if(header[0]) {\n        return header[0].raw;\n      }\n    } else {\n      return;\n    }\n  },\n\n  /**\n   * Get the header/s of the given name.\n   * @param {String} name header name\n   * @returns {Array} Array with all the headers of the specified name.\n   */\n  getHeaders: function(name) {\n    var idx, length,\n      header = this.headers[SIP.Utils.headerize(name)],\n      result = [];\n\n    if(!header) {\n      return [];\n    }\n\n    length = header.length;\n    for (idx = 0; idx < length; idx++) {\n      result.push(header[idx].raw);\n    }\n\n    return result;\n  },\n\n  /**\n   * Verify the existence of the given header.\n   * @param {String} name header name\n   * @returns {boolean} true if header with given name exists, false otherwise\n   */\n  hasHeader: function(name) {\n    return(this.headers[SIP.Utils.headerize(name)]) ? true : false;\n  },\n\n  /**\n  * Parse the given header on the given index.\n  * @param {String} name header name\n  * @param {Number} [idx=0] header index\n  * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n  */\n  parseHeader: function(name, idx) {\n    var header, value, parsed;\n\n    name = SIP.Utils.headerize(name);\n\n    idx = idx || 0;\n\n    if(!this.headers[name]) {\n      this.logger.log('header \"' + name + '\" not present');\n      return;\n    } else if(idx >= this.headers[name].length) {\n      this.logger.log('not so many \"' + name + '\" headers present');\n      return;\n    }\n\n    header = this.headers[name][idx];\n    value = header.raw;\n\n    if(header.parsed) {\n      return header.parsed;\n    }\n\n    //substitute '-' by '_' for grammar rule matching.\n    parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));\n\n    if(parsed === -1) {\n      this.headers[name].splice(idx, 1); //delete from headers\n      this.logger.warn('error parsing \"' + name + '\" header field with value \"' + value + '\"');\n      return;\n    } else {\n      header.parsed = parsed;\n      return parsed;\n    }\n  },\n\n  /**\n   * Message Header attribute selector. Alias of parseHeader.\n   * @param {String} name header name\n   * @param {Number} [idx=0] header index\n   * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.\n   *\n   * @example\n   * message.s('via',3).port\n   */\n  s: function(name, idx) {\n    return this.parseHeader(name, idx);\n  },\n\n  /**\n  * Replace the value of the given header by the value.\n  * @param {String} name header name\n  * @param {String} value header value\n  */\n  setHeader: function(name, value) {\n    var header = { raw: value };\n    this.headers[SIP.Utils.headerize(name)] = [header];\n  },\n\n  toString: function() {\n    return this.data;\n  }\n};\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP request.\n */\nIncomingRequest = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.ua = ua;\n  this.headers = {};\n  this.ruri = null;\n  this.transport = null;\n  this.server_transaction = null;\n};\nIncomingRequest.prototype = new IncomingMessage();\n\n/**\n* Stateful reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n* @param {Object} headers extra headers\n* @param {String} body body\n* @param {Function} [onSuccess] onSuccess callback\n* @param {Function} [onFailure] onFailure callback\n*/\nIncomingRequest.prototype.reply = function(code, reason, extraHeaders, body, onSuccess, onFailure) {\n  var rr, vias, length, idx, response,\n  supported = [],\n    to = this.getHeader('To'),\n    r = 0,\n    v = 0;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n  extraHeaders = (extraHeaders || []).slice();\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  if(this.method === SIP.C.INVITE && code > 100 && code <= 200) {\n    rr = this.getHeaders('record-route');\n    length = rr.length;\n\n    for(r; r < length; r++) {\n      response += 'Record-Route: ' + rr[r] + '\\r\\n';\n    }\n  }\n\n  vias = this.getHeaders('via');\n  length = vias.length;\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n\n  length = extraHeaders.length;\n  for (idx = 0; idx < length; idx++) {\n    response += extraHeaders[idx].trim() +'\\r\\n';\n  }\n\n  //Supported\n  if (this.method === SIP.C.INVITE &&\n               (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu)) {\n    supported.push('gruu');\n  }\n\n  if (this.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {\n    supported.push('100rel');\n  }\n\n  supported.push('outbound');\n\n  response += 'Supported: ' + supported + '\\r\\n';\n\n  if(body) {\n    length = SIP.Utils.str_utf8_length(body);\n    response += 'Content-Type: application/sdp\\r\\n';\n    response += 'Content-Length: ' + length + '\\r\\n\\r\\n';\n    response += body;\n  } else {\n    response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n  }\n\n  this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);\n\n  return response;\n};\n\n/**\n* Stateless reply.\n* @param {Number} code status code\n* @param {String} reason reason phrase\n*/\nIncomingRequest.prototype.reply_sl = function(code, reason) {\n  var to, response,\n    v = 0,\n    vias = this.getHeaders('via'),\n    length = vias.length;\n\n  code = code || null;\n  reason = reason || null;\n\n  // Validate code and reason values\n  if (!code || (code < 100 || code > 699)) {\n    throw new TypeError('Invalid status_code: '+ code);\n  } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {\n    throw new TypeError('Invalid reason_phrase: '+ reason);\n  }\n\n  reason = reason || SIP.C.REASON_PHRASE[code] || '';\n\n  response = 'SIP/2.0 ' + code + ' ' + reason + '\\r\\n';\n\n  for(v; v < length; v++) {\n    response += 'Via: ' + vias[v] + '\\r\\n';\n  }\n\n  to = this.getHeader('To');\n\n  if(!this.to_tag && code > 100) {\n    to += ';tag=' + SIP.Utils.newTag();\n  } else if(this.to_tag && !this.s('to').hasParam('tag')) {\n    to += ';tag=' + this.to_tag;\n  }\n\n  response += 'To: ' + to + '\\r\\n';\n  response += 'From: ' + this.getHeader('From') + '\\r\\n';\n  response += 'Call-ID: ' + this.call_id + '\\r\\n';\n  response += 'CSeq: ' + this.cseq + ' ' + this.method + '\\r\\n';\n  response += 'Content-Length: ' + 0 + '\\r\\n\\r\\n';\n\n  this.transport.send(response);\n};\n\n\n/**\n * @augments IncomingMessage\n * @class Class for incoming SIP response.\n */\nIncomingResponse = function(ua) {\n  this.logger = ua.getLogger('sip.sipmessage');\n  this.headers = {};\n  this.status_code = null;\n  this.reason_phrase = null;\n};\nIncomingResponse.prototype = new IncomingMessage();\n\nSIP.OutgoingRequest = OutgoingRequest;\nSIP.IncomingRequest = IncomingRequest;\nSIP.IncomingResponse = IncomingResponse;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SIPMessage.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP URI\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP URI.\n *\n * @param {String} [scheme]\n * @param {String} [user]\n * @param {String} host\n * @param {String} [port]\n * @param {Object} [parameters]\n * @param {Object} [headers]\n *\n */\nmodule.exports = function (SIP) {\nvar URI;\n\nURI = function(scheme, user, host, port, parameters, headers) {\n  var param, header;\n\n  // Checks\n  if(!host) {\n    throw new TypeError('missing or invalid \"host\" parameter');\n  }\n\n  // Initialize parameters\n  scheme = scheme || SIP.C.SIP;\n  this.parameters = {};\n  this.headers = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  for (header in headers) {\n    this.setHeader(header, headers[header]);\n  }\n\n  Object.defineProperties(this, {\n    scheme: {\n      get: function(){ return scheme; },\n      set: function(value){\n        scheme = value.toLowerCase();\n      }\n    },\n\n    user: {\n      get: function(){ return user; },\n      set: function(value){\n        user = value;\n      }\n    },\n\n    host: {\n      get: function(){ return host; },\n      set: function(value){\n        host = value.toLowerCase();\n      }\n    },\n\n    port: {\n      get: function(){ return port; },\n      set: function(value){\n        port = value === 0 ? value : (parseInt(value,10) || null);\n      }\n    }\n  });\n};\nURI.prototype = {\n  setParam: function(key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();\n    }\n  },\n\n  getParam: function(key) {\n    if(key) {\n      return this.parameters[key.toLowerCase()];\n    }\n  },\n\n  hasParam: function(key) {\n    if(key) {\n      return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;\n    }\n  },\n\n  deleteParam: function(parameter) {\n    var value;\n    parameter = parameter.toLowerCase();\n    if (this.parameters.hasOwnProperty(parameter)) {\n      value = this.parameters[parameter];\n      delete this.parameters[parameter];\n      return value;\n    }\n  },\n\n  clearParams: function() {\n    this.parameters = {};\n  },\n\n  setHeader: function(name, value) {\n    this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];\n  },\n\n  getHeader: function(name) {\n    if(name) {\n      return this.headers[SIP.Utils.headerize(name)];\n    }\n  },\n\n  hasHeader: function(name) {\n    if(name) {\n      return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;\n    }\n  },\n\n  deleteHeader: function(header) {\n    var value;\n    header = SIP.Utils.headerize(header);\n    if(this.headers.hasOwnProperty(header)) {\n      value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  },\n\n  clearHeaders: function() {\n    this.headers = {};\n  },\n\n  clone: function() {\n    return new URI(\n      this.scheme,\n      this.user,\n      this.host,\n      this.port,\n      JSON.parse(JSON.stringify(this.parameters)),\n      JSON.parse(JSON.stringify(this.headers)));\n  },\n\n  toString: function(){\n    var header, parameter, idx, uri,\n      headers = [];\n\n    uri  = this.scheme + ':';\n    // add slashes if it's not a sip(s) URI\n    if (!this.scheme.match(\"^sips?$\")) {\n      uri += \"//\";\n    }\n    if (this.user) {\n      uri += SIP.Utils.escapeUser(this.user) + '@';\n    }\n    uri += this.host;\n    if (this.port || this.port === 0) {\n      uri += ':' + this.port;\n    }\n\n    for (parameter in this.parameters) {\n      uri += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        uri += '='+ this.parameters[parameter];\n      }\n    }\n\n    for(header in this.headers) {\n      for(idx in this.headers[header]) {\n        headers.push(header + '=' + this.headers[header][idx]);\n      }\n    }\n\n    if (headers.length > 0) {\n      uri += '?' + headers.join('&');\n    }\n\n    return uri;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.URI instance or undefined if\n  * it is an invalid URI.\n  * @public\n  * @param {String} uri\n  */\nURI.parse = function(uri) {\n  uri = SIP.Grammar.parse(uri,'SIP_URI');\n\n  if (uri !== -1) {\n    return uri;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.URI = URI;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/URI.js\n ** module id = 14\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP NameAddrHeader\n */\n\n/**\n * @augments SIP\n * @class Class creating a Name Address SIP header.\n *\n * @param {SIP.URI} uri\n * @param {String} [displayName]\n * @param {Object} [parameters]\n *\n */\nmodule.exports = function (SIP) {\nvar NameAddrHeader;\n\nNameAddrHeader = function(uri, displayName, parameters) {\n  var param;\n\n  // Checks\n  if(!uri || !(uri instanceof SIP.URI)) {\n    throw new TypeError('missing or invalid \"uri\" parameter');\n  }\n\n  // Initialize parameters\n  this.uri = uri;\n  this.parameters = {};\n\n  for (param in parameters) {\n    this.setParam(param, parameters[param]);\n  }\n\n  Object.defineProperties(this, {\n    displayName: {\n      get: function() { return displayName; },\n      set: function(value) {\n        displayName = (value === 0) ? '0' : value;\n      }\n    }\n  });\n};\nNameAddrHeader.prototype = {\n  setParam: function (key, value) {\n    if(key) {\n      this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();\n    }\n  },\n  getParam: SIP.URI.prototype.getParam,\n  hasParam: SIP.URI.prototype.hasParam,\n  deleteParam: SIP.URI.prototype.deleteParam,\n  clearParams: SIP.URI.prototype.clearParams,\n\n  clone: function() {\n    return new NameAddrHeader(\n      this.uri.clone(),\n      this.displayName,\n      JSON.parse(JSON.stringify(this.parameters)));\n  },\n\n  toString: function() {\n    var body, parameter;\n\n    body  = (this.displayName || this.displayName === 0) ? '\"' + this.displayName + '\" ' : '';\n    body += '<' + this.uri.toString() + '>';\n\n    for (parameter in this.parameters) {\n      body += ';' + parameter;\n\n      if (this.parameters[parameter] !== null) {\n        body += '='+ this.parameters[parameter];\n      }\n    }\n\n    return body;\n  }\n};\n\n\n/**\n  * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n  * it is an invalid NameAddrHeader.\n  * @public\n  * @param {String} name_addr_header\n  */\nNameAddrHeader.parse = function(name_addr_header) {\n  name_addr_header = SIP.Grammar.parse(name_addr_header,'Name_Addr_Header');\n\n  if (name_addr_header !== -1) {\n    return name_addr_header;\n  } else {\n    return undefined;\n  }\n};\n\nSIP.NameAddrHeader = NameAddrHeader;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/NameAddrHeader.js\n ** module id = 15\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Transactions\n */\n\n/**\n * SIP Transactions module.\n * @augments SIP\n */\nmodule.exports = function (SIP) {\nvar\n  C = {\n    // Transaction states\n    STATUS_TRYING:     1,\n    STATUS_PROCEEDING: 2,\n    STATUS_CALLING:    3,\n    STATUS_ACCEPTED:   4,\n    STATUS_COMPLETED:  5,\n    STATUS_TERMINATED: 6,\n    STATUS_CONFIRMED:  7,\n\n    // Transaction types\n    NON_INVITE_CLIENT: 'nict',\n    NON_INVITE_SERVER: 'nist',\n    INVITE_CLIENT: 'ict',\n    INVITE_SERVER: 'ist'\n  };\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar NonInviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n\n  this.stateChanged(C.STATUS_TRYING);\n  this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nNonInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.F);\n  SIP.Timers.clearTimeout(this.K);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onTransportError();\n};\n\nNonInviteClientTransaction.prototype.timer_F = function() {\n  this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n  this.request_sender.onRequestTimeout();\n};\n\nNonInviteClientTransaction.prototype.timer_K = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nNonInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n    tr = this,\n    status_code = response.status_code;\n\n  if(status_code < 200) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        SIP.Timers.clearTimeout(this.F);\n\n        if(status_code === 408) {\n          this.request_sender.onRequestTimeout();\n        } else {\n          this.request_sender.receiveResponse(response);\n        }\n\n        this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n\n\n/**\n* @augments SIP.Transactions\n* @class Invite Client Transaction\n* @param {SIP.RequestSender} request_sender\n* @param {SIP.OutgoingRequest} request\n* @param {SIP.Transport} transport\n*/\nvar InviteClientTransaction = function(request_sender, request, transport) {\n  var via,\n    tr = this,\n    events = ['stateChanged'];\n\n  this.type = C.INVITE_CLIENT;\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n\n  this.request_sender.ua.newTransaction(this);\n\n  // Add the cancel property to the request.\n  //Will be called from the request instance, not the transaction itself.\n  this.request.cancel = function(reason) {\n    tr.cancel_request(tr, reason);\n  };\n\n  this.initEvents(events);\n};\nInviteClientTransaction.prototype = new SIP.EventEmitter();\n\nInviteClientTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteClientTransaction.prototype.send = function() {\n  var tr = this;\n  this.stateChanged(C.STATUS_CALLING);\n  this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);\n\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nInviteClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  SIP.Timers.clearTimeout(this.D);\n  SIP.Timers.clearTimeout(this.M);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n\n  if (this.state !== C.STATUS_ACCEPTED) {\n    this.request_sender.onTransportError();\n  }\n};\n\n// RFC 6026 7.2\nInviteClientTransaction.prototype.timer_M = function() {\n  this.logger.log('Timer M expired for INVITE client transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    SIP.Timers.clearTimeout(this.B);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n  }\n};\n\n// RFC 3261 17.1.1\nInviteClientTransaction.prototype.timer_B = function() {\n  this.logger.log('Timer B expired for INVITE client transaction ' + this.id);\n  if(this.state === C.STATUS_CALLING) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.request_sender.ua.destroyTransaction(this);\n    this.request_sender.onRequestTimeout();\n  }\n};\n\nInviteClientTransaction.prototype.timer_D = function() {\n  this.logger.log('Timer D expired for INVITE client transaction ' + this.id);\n  SIP.Timers.clearTimeout(this.B);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.request_sender.ua.destroyTransaction(this);\n};\n\nInviteClientTransaction.prototype.sendACK = function(response) {\n  var tr = this;\n\n  this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\\r\\n';\n  this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.ack += 'To: ' + response.getHeader('to') + '\\r\\n';\n  this.ack += 'From: ' + this.request.headers['From'].toString() + '\\r\\n';\n  this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\\r\\n';\n  this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];\n  this.ack += ' ACK\\r\\n\\r\\n';\n\n  this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);\n\n  this.transport.send(this.ack);\n};\n\nInviteClientTransaction.prototype.cancel_request = function(tr, reason) {\n  var request = tr.request;\n\n  this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\\r\\n';\n  this.cancel += 'Via: ' + request.headers['Via'].toString() + '\\r\\n';\n\n  if(this.request.headers['Route']) {\n    this.cancel += 'Route: ' + request.headers['Route'].toString() + '\\r\\n';\n  }\n\n  this.cancel += 'To: ' + request.headers['To'].toString() + '\\r\\n';\n  this.cancel += 'From: ' + request.headers['From'].toString() + '\\r\\n';\n  this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\\r\\n';\n  this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +\n  ' CANCEL\\r\\n';\n\n  if(reason) {\n    this.cancel += 'Reason: ' + reason + '\\r\\n';\n  }\n\n  this.cancel += 'Content-Length: 0\\r\\n\\r\\n';\n\n  // Send only if a provisional response (>100) has been received.\n  if(this.state === C.STATUS_PROCEEDING) {\n    this.transport.send(this.cancel);\n  }\n};\n\nInviteClientTransaction.prototype.receiveResponse = function(response) {\n  var\n  tr = this,\n  status_code = response.status_code;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        this.request_sender.receiveResponse(response);\n        if(this.cancel) {\n          this.transport.send(this.cancel);\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_ACCEPTED:\n        this.request_sender.receiveResponse(response);\n        break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_CALLING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.sendACK(response);\n        this.request_sender.receiveResponse(response);\n        break;\n      case C.STATUS_COMPLETED:\n        this.sendACK(response);\n        break;\n    }\n  }\n};\n\n\n/**\n * @augments SIP.Transactions\n * @class ACK Client Transaction\n * @param {SIP.RequestSender} request_sender\n * @param {SIP.OutgoingRequest} request\n * @param {SIP.Transport} transport\n */\nvar AckClientTransaction = function(request_sender, request, transport) {\n  var via;\n\n  this.transport = transport;\n  this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);\n  this.request_sender = request_sender;\n  this.request = request;\n\n  this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);\n\n  via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);\n  via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + this.id;\n\n  this.request.setHeader('via', via);\n};\nAckClientTransaction.prototype = new SIP.EventEmitter();\n\nAckClientTransaction.prototype.send = function() {\n  if(!this.transport.send(this.request)) {\n    this.onTransportError();\n  }\n};\n\nAckClientTransaction.prototype.onTransportError = function() {\n  this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);\n  this.request_sender.onTransportError();\n};\n\n\n/**\n* @augments SIP.Transactions\n* @class Non Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar NonInviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.NON_INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.nist', this.id);\n\n  this.state = C.STATUS_TRYING;\n\n  ua.newTransaction(this);\n\n  this.initEvents(events);\n};\nNonInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nNonInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nNonInviteServerTransaction.prototype.timer_J = function() {\n  this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nNonInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);\n\n    SIP.Timers.clearTimeout(this.J);\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nNonInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code === 100) {\n    /* RFC 4320 4.1\n     * 'A SIP element MUST NOT\n     * send any provisional response with a\n     * Status-Code other than 100 to a non-INVITE request.'\n     */\n    switch(this.state) {\n      case C.STATUS_TRYING:\n        this.stateChanged(C.STATUS_PROCEEDING);\n        if(!this.transport.send(response))  {\n          this.onTransportError();\n        }\n        break;\n      case C.STATUS_PROCEEDING:\n        this.last_response = response;\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n    }\n  } else if(status_code >= 200 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_TRYING:\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_COMPLETED);\n        this.last_response = response;\n        this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else if (onSuccess) {\n          onSuccess();\n        }\n        break;\n      case C.STATUS_COMPLETED:\n        break;\n    }\n  }\n};\n\n/**\n* @augments SIP.Transactions\n* @class Invite Server Transaction\n* @param {SIP.IncomingRequest} request\n* @param {SIP.UA} ua\n*/\nvar InviteServerTransaction = function(request, ua) {\n  var events = ['stateChanged'];\n\n  this.type = C.INVITE_SERVER;\n  this.id = request.via_branch;\n  this.request = request;\n  this.transport = request.transport;\n  this.ua = ua;\n  this.last_response = '';\n  request.server_transaction = this;\n\n  this.logger = ua.getLogger('sip.transaction.ist', this.id);\n\n  this.state = C.STATUS_PROCEEDING;\n\n  ua.newTransaction(this);\n\n  this.resendProvisionalTimer = null;\n\n  request.reply(100);\n\n  this.initEvents(events);\n};\nInviteServerTransaction.prototype = new SIP.EventEmitter();\n\nInviteServerTransaction.prototype.stateChanged = function(state) {\n  this.state = state;\n  this.emit('stateChanged');\n};\n\nInviteServerTransaction.prototype.timer_H = function() {\n  this.logger.log('Timer H expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_COMPLETED) {\n    this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');\n  }\n\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\nInviteServerTransaction.prototype.timer_I = function() {\n  this.stateChanged(C.STATUS_TERMINATED);\n  this.ua.destroyTransaction(this);\n};\n\n// RFC 6026 7.1\nInviteServerTransaction.prototype.timer_L = function() {\n  this.logger.log('Timer L expired for INVITE server transaction ' + this.id);\n\n  if(this.state === C.STATUS_ACCEPTED) {\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.onTransportError = function() {\n  if (!this.transportError) {\n    this.transportError = true;\n\n    this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);\n\n    if (this.resendProvisionalTimer !== null) {\n      SIP.Timers.clearInterval(this.resendProvisionalTimer);\n      this.resendProvisionalTimer = null;\n    }\n\n    SIP.Timers.clearTimeout(this.L);\n    SIP.Timers.clearTimeout(this.H);\n    SIP.Timers.clearTimeout(this.I);\n\n    this.stateChanged(C.STATUS_TERMINATED);\n    this.ua.destroyTransaction(this);\n  }\n};\n\nInviteServerTransaction.prototype.resend_provisional = function() {\n  if(!this.transport.send(this.last_response)) {\n    this.onTransportError();\n  }\n};\n\n// INVITE Server Transaction RFC 3261 17.2.1\nInviteServerTransaction.prototype.receiveResponse = function(status_code, response, onSuccess, onFailure) {\n  var tr = this;\n\n  if(status_code >= 100 && status_code <= 199) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n        }\n        this.last_response = response;\n        break;\n    }\n  }\n\n  if(status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {\n    // Trigger the resendProvisionalTimer only for the first non 100 provisional response.\n    if(this.resendProvisionalTimer === null) {\n      this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),\n        SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);\n    }\n  } else if(status_code >= 200 && status_code <= 299) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        this.stateChanged(C.STATUS_ACCEPTED);\n        this.last_response = response;\n        this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);\n\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n        /* falls through */\n        case C.STATUS_ACCEPTED:\n          // Note that this point will be reached for proceeding tr.state also.\n          if(!this.transport.send(response)) {\n            this.onTransportError();\n            if (onFailure) {\n              onFailure();\n            }\n          } else if (onSuccess) {\n            onSuccess();\n          }\n          break;\n    }\n  } else if(status_code >= 300 && status_code <= 699) {\n    switch(this.state) {\n      case C.STATUS_PROCEEDING:\n        if (this.resendProvisionalTimer !== null) {\n          SIP.Timers.clearInterval(this.resendProvisionalTimer);\n          this.resendProvisionalTimer = null;\n        }\n\n        if(!this.transport.send(response)) {\n          this.onTransportError();\n          if (onFailure) {\n            onFailure();\n          }\n        } else {\n          this.stateChanged(C.STATUS_COMPLETED);\n          this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);\n          if (onSuccess) {\n            onSuccess();\n          }\n        }\n        break;\n    }\n  }\n};\n\n/**\n * @function\n * @param {SIP.UA} ua\n * @param {SIP.IncomingRequest} request\n *\n * @return {boolean}\n * INVITE:\n *  _true_ if retransmission\n *  _false_ new request\n *\n * ACK:\n *  _true_  ACK to non2xx response\n *  _false_ ACK must be passed to TU (accepted state)\n *          ACK to 2xx response\n *\n * CANCEL:\n *  _true_  no matching invite transaction\n *  _false_ matching invite transaction and no final response sent\n *\n * OTHER:\n *  _true_  retransmission\n *  _false_ new request\n */\nvar checkTransaction = function(ua, request) {\n  var tr;\n\n  switch(request.method) {\n    case SIP.C.INVITE:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_PROCEEDING:\n            tr.transport.send(tr.last_response);\n            break;\n\n            // RFC 6026 7.1 Invite retransmission\n            //received while in C.STATUS_ACCEPTED state. Absorb it.\n          case C.STATUS_ACCEPTED:\n            break;\n        }\n        return true;\n      }\n      break;\n    case SIP.C.ACK:\n      tr = ua.transactions.ist[request.via_branch];\n\n      // RFC 6026 7.1\n      if(tr) {\n        if(tr.state === C.STATUS_ACCEPTED) {\n          return false;\n        } else if(tr.state === C.STATUS_COMPLETED) {\n          tr.state = C.STATUS_CONFIRMED;\n          tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);\n          return true;\n        }\n      }\n\n      // ACK to 2XX Response.\n      else {\n        return false;\n      }\n      break;\n    case SIP.C.CANCEL:\n      tr = ua.transactions.ist[request.via_branch];\n      if(tr) {\n        request.reply_sl(200);\n        if(tr.state === C.STATUS_PROCEEDING) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        request.reply_sl(481);\n        return true;\n      }\n      break;\n    default:\n\n      // Non-INVITE Server Transaction RFC 3261 17.2.2\n      tr = ua.transactions.nist[request.via_branch];\n      if(tr) {\n        switch(tr.state) {\n          case C.STATUS_TRYING:\n            break;\n          case C.STATUS_PROCEEDING:\n          case C.STATUS_COMPLETED:\n            tr.transport.send(tr.last_response);\n            break;\n        }\n        return true;\n      }\n      break;\n  }\n};\n\nSIP.Transactions = {\n  C: C,\n  checkTransaction: checkTransaction,\n  NonInviteClientTransaction: NonInviteClientTransaction,\n  InviteClientTransaction: InviteClientTransaction,\n  AckClientTransaction: AckClientTransaction,\n  NonInviteServerTransaction: NonInviteServerTransaction,\n  InviteServerTransaction: InviteServerTransaction\n};\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Transactions.js\n ** module id = 16\n ** module chunks = 0\n **/","\n/**\n * @fileoverview In-Dialog Request Sender\n */\n\n/**\n * @augments SIP.Dialog\n * @class Class creating an In-dialog request sender.\n * @param {SIP.Dialog} dialog\n * @param {Object} applicant\n * @param {SIP.OutgoingRequest} request\n */\n/**\n * @fileoverview in-Dialog Request Sender\n */\n\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(dialog, applicant, request) {\n\n  this.dialog = dialog;\n  this.applicant = applicant;\n  this.request = request;\n\n  // RFC3261 14.1 Modifying an Existing Session. UAC Behavior.\n  this.reattempt = false;\n  this.reattemptTimer = null;\n};\n\nRequestSender.prototype = {\n  send: function() {\n    var self = this,\n      request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);\n\n      request_sender.send();\n\n    // RFC3261 14.2 Modifying an Existing Session -UAC BEHAVIOR-\n    if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      this.dialog.uac_pending_reply = true;\n      request_sender.clientTransaction.on('stateChanged', function stateChanged(){\n        if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n            this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n            this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n          this.off('stateChanged', stateChanged);\n          self.dialog.uac_pending_reply = false;\n\n          if (self.dialog.uas_pending_reply === false) {\n            self.dialog.owner.onReadyToReinvite();\n          }\n        }\n      });\n    }\n  },\n\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  receiveResponse: function(response) {\n    var self = this;\n\n    // RFC3261 12.2.1.2 408 or 481 is received for a request within a dialog.\n    if (response.status_code === 408 || response.status_code === 481) {\n      this.applicant.onDialogError(response);\n    } else if (response.method === SIP.C.INVITE && response.status_code === 491) {\n      if (this.reattempt) {\n        this.applicant.receiveResponse(response);\n      } else {\n        this.request.cseq.value = this.dialog.local_seqnum += 1;\n        this.reattemptTimer = SIP.Timers.setTimeout(\n          function() {\n            if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {\n              self.reattempt = true;\n              self.request_sender.send();\n            }\n          },\n          this.getReattemptTimeout()\n        );\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nreturn RequestSender;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Dialog/RequestSender.js\n ** module id = 17\n ** module chunks = 0\n **/","/**\n * @fileoverview SIP Dialog\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP dialog.\n * @param {SIP.RTCSession} owner\n * @param {SIP.IncomingRequest|SIP.IncomingResponse} message\n * @param {Enum} type UAC / UAS\n * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED\n */\nmodule.exports = function (SIP, RequestSender) {\n\nvar Dialog,\n  C = {\n    // Dialog states\n    STATUS_EARLY:       1,\n    STATUS_CONFIRMED:   2\n  };\n\n// RFC 3261 12.1\nDialog = function(owner, message, type, state) {\n  var contact;\n\n  this.uac_pending_reply = false;\n  this.uas_pending_reply = false;\n\n  if(!message.hasHeader('contact')) {\n    return {\n      error: 'unable to create a Dialog without Contact header field'\n    };\n  }\n\n  if(message instanceof SIP.IncomingResponse) {\n    state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;\n  } else {\n    // Create confirmed dialog if state is not defined\n    state = state || C.STATUS_CONFIRMED;\n  }\n\n  contact = message.parseHeader('contact');\n\n  // RFC 3261 12.1.1\n  if(type === 'UAS') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.to_tag,\n      remote_tag: message.from_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.remote_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('to').uri;\n    this.remote_uri = message.parseHeader('from').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route');\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n  }\n  // RFC 3261 12.1.2\n  else if(type === 'UAC') {\n    this.id = {\n      call_id: message.call_id,\n      local_tag: message.from_tag,\n      remote_tag: message.to_tag,\n      toString: function() {\n        return this.call_id + this.local_tag + this.remote_tag;\n      }\n    };\n    this.state = state;\n    this.invite_seqnum = message.cseq;\n    this.local_seqnum = message.cseq;\n    this.local_uri = message.parseHeader('from').uri;\n    this.pracked = [];\n    this.remote_uri = message.parseHeader('to').uri;\n    this.remote_target = contact.uri;\n    this.route_set = message.getHeaders('record-route').reverse();\n\n    //RENDERBODY\n    if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {\n      this.mediaHandler = owner.mediaHandlerFactory(owner);\n    }\n  }\n\n  this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());\n  this.owner = owner;\n  owner.ua.dialogs[this.id.toString()] = this;\n  this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY': 'CONFIRMED'));\n};\n\nDialog.prototype = {\n  /**\n   * @param {SIP.IncomingMessage} message\n   * @param {Enum} UAC/UAS\n   */\n  update: function(message, type) {\n    this.state = C.STATUS_CONFIRMED;\n\n    this.logger.log('dialog '+ this.id.toString() +'  changed to CONFIRMED state');\n\n    if(type === 'UAC') {\n      // RFC 3261 13.2.2.4\n      this.route_set = message.getHeaders('record-route').reverse();\n    }\n  },\n\n  terminate: function() {\n    this.logger.log('dialog ' + this.id.toString() + ' deleted');\n    if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {\n      this.mediaHandler.peerConnection.close();\n    }\n    delete this.owner.ua.dialogs[this.id.toString()];\n  },\n\n  /**\n  * @param {String} method request method\n  * @param {Object} extraHeaders extra headers\n  * @returns {SIP.OutgoingRequest}\n  */\n\n  // RFC 3261 12.2.1.1\n  createRequest: function(method, extraHeaders, body) {\n    var cseq, request;\n    extraHeaders = (extraHeaders || []).slice();\n\n    if(!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }\n\n    cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;\n\n    request = new SIP.OutgoingRequest(\n      method,\n      this.remote_target,\n      this.owner.ua, {\n        'cseq': cseq,\n        'call_id': this.id.call_id,\n        'from_uri': this.local_uri,\n        'from_tag': this.id.local_tag,\n        'to_uri': this.remote_uri,\n        'to_tag': this.id.remote_tag,\n        'route_set': this.route_set\n      }, extraHeaders, body);\n\n    request.dialog = this;\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  * @returns {Boolean}\n  */\n\n  // RFC 3261 12.2.2\n  checkInDialogRequest: function(request) {\n    var self = this;\n\n    if(!this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    } else if(request.cseq < this.remote_seqnum) {\n        //Do not try to reply to an ACK request.\n        if (request.method !== SIP.C.ACK) {\n          request.reply(500);\n        }\n        if (request.cseq === this.invite_seqnum) {\n          return true;\n        }\n        return false;\n    } else if(request.cseq > this.remote_seqnum) {\n      this.remote_seqnum = request.cseq;\n    }\n\n    switch(request.method) {\n      // RFC3261 14.2 Modifying an Existing Session -UAS BEHAVIOR-\n      case SIP.C.INVITE:\n        if (this.uac_pending_reply === true) {\n          request.reply(491);\n        } else if (this.uas_pending_reply === true) {\n          var retryAfter = (Math.random() * 10 | 0) + 1;\n          request.reply(500, null, ['Retry-After:' + retryAfter]);\n          return false;\n        } else {\n          this.uas_pending_reply = true;\n          request.server_transaction.on('stateChanged', function stateChanged(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||\n                this.state === SIP.Transactions.C.STATUS_COMPLETED ||\n                this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n\n              this.off('stateChanged', stateChanged);\n              self.uas_pending_reply = false;\n\n              if (self.uac_pending_reply === false) {\n                self.owner.onReadyToReinvite();\n              }\n            }\n          });\n        }\n\n        // RFC3261 12.2.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n      case SIP.C.NOTIFY:\n        // RFC6665 3.2 Replace the dialog`s remote target URI if the request is accepted\n        if(request.hasHeader('contact')) {\n          request.server_transaction.on('stateChanged', function(){\n            if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {\n              self.remote_target = request.parseHeader('contact').uri;\n            }\n          });\n        }\n        break;\n    }\n\n    return true;\n  },\n\n  sendRequest: function(applicant, method, options) {\n    options = options || {};\n\n    var\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body || null,\n      request = this.createRequest(method, extraHeaders, body),\n      request_sender = new RequestSender(this, applicant, request);\n\n    request_sender.send();\n\n    return request;\n  },\n\n  /**\n  * @param {SIP.IncomingRequest} request\n  */\n  receiveRequest: function(request) {\n    //Check in-dialog request\n    if(!this.checkInDialogRequest(request)) {\n      return;\n    }\n\n    this.owner.receiveRequest(request);\n  }\n};\n\nDialog.C = C;\nSIP.Dialog = Dialog;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Dialogs.js\n ** module id = 18\n ** module chunks = 0\n **/","\n/**\n * @fileoverview Request Sender\n */\n\n/**\n * @augments SIP\n * @class Class creating a request sender.\n * @param {Object} applicant\n * @param {SIP.UA} ua\n */\nmodule.exports = function (SIP) {\nvar RequestSender;\n\nRequestSender = function(applicant, ua) {\n  this.logger = ua.getLogger('sip.requestsender');\n  this.ua = ua;\n  this.applicant = applicant;\n  this.method = applicant.request.method;\n  this.request = applicant.request;\n  this.credentials = null;\n  this.challenged = false;\n  this.staled = false;\n\n  // If ua is in closing process or even closed just allow sending Bye and ACK\n  if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {\n    this.onTransportError();\n  }\n};\n\n/**\n* Create the client transaction and send the message.\n*/\nRequestSender.prototype = {\n  send: function() {\n    switch(this.method) {\n      case \"INVITE\":\n        this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);\n        break;\n      case \"ACK\":\n        this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);\n        break;\n      default:\n        this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);\n    }\n    this.clientTransaction.send();\n\n    return this.clientTransaction;\n  },\n\n  /**\n  * Callback fired when receiving a request timeout error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onRequestTimeout: function() {\n    this.applicant.onRequestTimeout();\n  },\n\n  /**\n  * Callback fired when receiving a transport error from the client transaction.\n  * To be re-defined by the applicant.\n  * @event\n  */\n  onTransportError: function() {\n    this.applicant.onTransportError();\n  },\n\n  /**\n  * Called from client transaction when receiving a correct response to the request.\n  * Authenticate request if needed or pass the response back to the applicant.\n  * @param {SIP.IncomingResponse} response\n  */\n  receiveResponse: function(response) {\n    var cseq, challenge, authorization_header_name,\n      status_code = response.status_code;\n\n    /*\n    * Authentication\n    * Authenticate once. _challenged_ flag used to avoid infinite authentications.\n    */\n    if ((status_code === 401 || status_code === 407) && this.ua.configuration.password !== null) {\n\n      // Get and parse the appropriate WWW-Authenticate or Proxy-Authenticate header.\n      if (response.status_code === 401) {\n        challenge = response.parseHeader('www-authenticate');\n        authorization_header_name = 'authorization';\n      } else {\n        challenge = response.parseHeader('proxy-authenticate');\n        authorization_header_name = 'proxy-authorization';\n      }\n\n      // Verify it seems a valid challenge.\n      if (! challenge) {\n        this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');\n        this.applicant.receiveResponse(response);\n        return;\n      }\n\n      if (!this.challenged || (!this.staled && challenge.stale === true)) {\n        if (!this.credentials) {\n          this.credentials = new SIP.DigestAuthentication(this.ua);\n        }\n\n        // Verify that the challenge is really valid.\n        if (!this.credentials.authenticate(this.request, challenge)) {\n          this.applicant.receiveResponse(response);\n          return;\n        }\n        this.challenged = true;\n\n        if (challenge.stale) {\n          this.staled = true;\n        }\n\n        if (response.method === SIP.C.REGISTER) {\n          cseq = this.applicant.cseq += 1;\n        } else if (this.request.dialog){\n          cseq = this.request.dialog.local_seqnum += 1;\n        } else {\n          cseq = this.request.cseq + 1;\n          this.request.cseq = cseq;\n        }\n        this.request.setHeader('cseq', cseq +' '+ this.method);\n\n        this.request.setHeader(authorization_header_name, this.credentials.toString());\n        this.send();\n      } else {\n        this.applicant.receiveResponse(response);\n      }\n    } else {\n      this.applicant.receiveResponse(response);\n    }\n  }\n};\n\nSIP.RequestSender = RequestSender;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/RequestSender.js\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = function (SIP) {\n\nvar RegisterContext;\n\nRegisterContext = function (ua) {\n  var params = {},\n      regId = 1,\n      events = [\n        'registered',\n        'unregistered'\n      ];\n\n  this.registrar = ua.configuration.registrarServer;\n  this.expires = ua.configuration.registerExpires;\n\n\n  // Contact header\n  this.contact = ua.contact.toString();\n\n  if(regId) {\n    this.contact += ';reg-id='+ regId;\n    this.contact += ';+sip.instance=\"<urn:uuid:'+ ua.configuration.instanceId+'>\"';\n  }\n\n  // Call-ID and CSeq values RFC3261 10.2\n  this.call_id = SIP.Utils.createRandomToken(22);\n  this.cseq = 80;\n\n  this.to_uri = ua.configuration.uri;\n\n  params.to_uri = this.to_uri;\n  params.call_id = this.call_id;\n  params.cseq = this.cseq;\n\n  // Extends ClientContext\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, {params: params}]);\n\n  this.registrationTimer = null;\n  this.registrationExpiredTimer = null;\n\n  // Set status\n  this.registered = false;\n\n  this.logger = ua.getLogger('sip.registercontext');\n  this.initMoreEvents(events);\n};\n\nRegisterContext.prototype = {\n  register: function (options) {\n    var self = this, extraHeaders;\n\n    // Handle Options\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n    extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);\n    extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(this.ua));\n\n    this.receiveResponse = function(response) {\n      var contact, expires,\n        contacts = response.getHeaders('contact').length,\n        cause;\n\n      // Discard responses to older REGISTER/un-REGISTER requests.\n      if(response.cseq !== this.cseq) {\n        return;\n      }\n\n      // Clear registration timer\n      if (this.registrationTimer !== null) {\n        SIP.Timers.clearTimeout(this.registrationTimer);\n        this.registrationTimer = null;\n      }\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n\n          if(response.hasHeader('expires')) {\n            expires = response.getHeader('expires');\n          }\n\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n\n          // Search the Contact pointing to us and update the expires value accordingly.\n          if (!contacts) {\n            this.logger.warn('no Contact header in response to REGISTER, response ignored');\n            break;\n          }\n\n          while(contacts--) {\n            contact = response.parseHeader('contact', contacts);\n            if(contact.uri.user === this.ua.contact.uri.user) {\n              expires = contact.getParam('expires');\n              break;\n            } else {\n              contact = null;\n            }\n          }\n\n          if (!contact) {\n            this.logger.warn('no Contact header pointing to us, response ignored');\n            break;\n          }\n\n          if(!expires) {\n            expires = this.expires;\n          }\n\n          // Re-Register before the expiration interval has elapsed.\n          // For that, decrease the expires value. ie: 3 seconds\n          this.registrationTimer = SIP.Timers.setTimeout(function() {\n            self.registrationTimer = null;\n            self.register(options);\n          }, (expires * 1000) - 3000);\n          this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {\n            self.logger.warn('registration expired');\n            if (self.registered) {\n              self.unregistered(null, SIP.C.causes.EXPIRES);\n            }\n          }, expires * 1000);\n\n          //Save gruu values\n          if (contact.hasParam('temp-gruu')) {\n            this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/\"/g,''));\n          }\n          if (contact.hasParam('pub-gruu')) {\n            this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/\"/g,''));\n          }\n\n          this.registered = true;\n          this.emit('registered', response || null);\n          break;\n        // Interval too brief RFC3261 10.2.8\n        case /^423$/.test(response.status_code):\n          if(response.hasHeader('min-expires')) {\n            // Increase our registration interval to the suggested minimum\n            this.expires = response.getHeader('min-expires');\n            // Attempt the registration again immediately\n            this.register(options);\n          } else { //This response MUST contain a Min-Expires header field\n            this.logger.warn('423 response received for REGISTER without Min-Expires');\n            this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);\n          }\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.registrationFailure(response, cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n    this.send();\n  },\n\n  registrationFailure: function (response, cause) {\n    this.emit('failed', response || null, cause || null);\n  },\n\n  onTransportClosed: function() {\n    this.registered_before = this.registered;\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if (this.registrationExpiredTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n      this.registrationExpiredTimer = null;\n    }\n\n    if(this.registered) {\n      this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onTransportConnected: function() {\n    this.register();\n  },\n\n  close: function() {\n    this.registered_before = this.registered;\n    this.unregister();\n  },\n\n  unregister: function(options) {\n    var extraHeaders;\n\n    if(!this.registered) {\n      this.logger.warn('already unregistered');\n      return;\n    }\n\n    options = options || {};\n    extraHeaders = (options.extraHeaders || []).slice();\n\n    this.registered = false;\n\n    // Clear the registration timer.\n    if (this.registrationTimer !== null) {\n      SIP.Timers.clearTimeout(this.registrationTimer);\n      this.registrationTimer = null;\n    }\n\n    if(options.all) {\n      extraHeaders.push('Contact: *');\n      extraHeaders.push('Expires: 0');\n    } else {\n      extraHeaders.push('Contact: '+ this.contact + ';expires=0');\n    }\n\n\n    this.receiveResponse = function(response) {\n      var cause;\n\n      switch(true) {\n        case /^1[0-9]{2}$/.test(response.status_code):\n          this.emit('progress', response);\n          break;\n        case /^2[0-9]{2}$/.test(response.status_code):\n          this.emit('accepted', response);\n          if (this.registrationExpiredTimer !== null) {\n            SIP.Timers.clearTimeout(this.registrationExpiredTimer);\n            this.registrationExpiredTimer = null;\n          }\n          this.unregistered(response);\n          break;\n        default:\n          cause = SIP.Utils.sipErrorCause(response.status_code);\n          this.unregistered(response,cause);\n      }\n    };\n\n    this.onRequestTimeout = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.REQUEST_TIMEOUT);\n    };\n\n    this.onTransportError = function() {\n      // Not actually unregistered...\n      //this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);\n    };\n\n    this.cseq++;\n    this.request.cseq = this.cseq;\n    this.request.setHeader('cseq', this.cseq + ' REGISTER');\n    this.request.extraHeaders = extraHeaders;\n\n    this.send();\n  },\n\n  unregistered: function(response, cause) {\n    this.registered = false;\n    this.emit('unregistered', response || null, cause || null);\n  }\n\n};\n\n\nSIP.RegisterContext = RegisterContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/RegisterContext.js\n ** module id = 20\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n */\nmodule.exports = function (EventEmitter) {\nvar MediaHandler = function(session, options) {\n  // keep jshint happy\n  session = session;\n  options = options;\n};\n\nMediaHandler.prototype = Object.create(EventEmitter.prototype, {\n  isReady: {value: function isReady () {}},\n\n  close: {value: function close () {}},\n\n  /**\n   * @param {Function} onSuccess called with the obtained local media description\n   * @param {Function} onFailure\n   * @param {Object} [mediaHint] A custom object describing the media to be used during this session.\n   */\n  getDescription: {value: function getDescription (onSuccess, onFailure, mediaHint) {\n    // keep jshint happy\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n    mediaHint = mediaHint;\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} description\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {value: function setDescription (description, onSuccess, onFailure) {\n    // keep jshint happy\n    description = description;\n    onSuccess = onSuccess;\n    onFailure = onFailure;\n  }}\n});\n\nreturn MediaHandler;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/MediaHandler.js\n ** module id = 21\n ** module chunks = 0\n **/","module.exports = function (SIP) {\nvar ClientContext;\n\nClientContext = function (ua, method, target, options) {\n  var params, extraHeaders,\n      originalTarget = target,\n      events = [\n        'progress',\n        'accepted',\n        'rejected',\n        'failed',\n        'cancel'\n      ];\n\n  if (target === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  // Check target validity\n  target = ua.normalizeTarget(target);\n  if (!target) {\n    throw new TypeError('Invalid target: ' + originalTarget);\n  }\n\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.clientcontext');\n  this.method = method;\n\n  params = options && options.params;\n  extraHeaders = (options && options.extraHeaders || []).slice();\n\n  if (options && options.body) {\n    this.body = options.body;\n  }\n  if (options && options.contentType) {\n    this.contentType = options.contentType;\n    extraHeaders.push('Content-Type: ' + this.contentType);\n  }\n\n  this.request = new SIP.OutgoingRequest(this.method, target, this.ua, params, extraHeaders);\n\n  this.localIdentity = this.request.from;\n  this.remoteIdentity = this.request.to;\n\n  if (this.body) {\n    this.request.body = this.body;\n  }\n\n  this.data = {};\n\n  this.initEvents(events);\n};\nClientContext.prototype = new SIP.EventEmitter();\n\nClientContext.prototype.send = function () {\n  (new SIP.RequestSender(this, this.ua)).send();\n  return this;\n};\n\nClientContext.prototype.cancel = function (options) {\n  options = options || {};\n\n  var\n  status_code = options.status_code,\n  reason_phrase = options.reason_phrase,\n  cancel_reason;\n\n  if (status_code && status_code < 200 || status_code > 699) {\n    throw new TypeError('Invalid status_code: ' + status_code);\n  } else if (status_code) {\n    reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n    cancel_reason = 'SIP ;cause=' + status_code + ' ;text=\"' + reason_phrase + '\"';\n  }\n  this.request.cancel(cancel_reason);\n\n  this.emit('cancel');\n};\n\nClientContext.prototype.receiveResponse = function (response) {\n  var cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      this.emit('progress', response, cause);\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('accepted', response, cause);\n      break;\n\n    default:\n      if(this.ua.applicants[this]) {\n        delete this.ua.applicants[this];\n      }\n      this.emit('rejected', response, cause);\n      this.emit('failed', response, cause);\n      break;\n  }\n\n};\n\nClientContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nClientContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ClientContext = ClientContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/ClientContext.js\n ** module id = 22\n ** module chunks = 0\n **/","module.exports = function (SIP) {\nvar ServerContext;\n\nServerContext = function (ua, request) {\n  var events = [\n      'progress',\n      'accepted',\n      'rejected',\n      'failed'\n    ];\n  this.ua = ua;\n  this.logger = ua.getLogger('sip.servercontext');\n  this.request = request;\n  if (request.method === SIP.C.INVITE) {\n    this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);\n  } else {\n    this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);\n  }\n\n  if (request.body) {\n    this.body = request.body;\n  }\n  if (request.hasHeader('Content-Type')) {\n    this.contentType = request.getHeader('Content-Type');\n  }\n  this.method = request.method;\n\n  this.data = {};\n\n  this.localIdentity = request.to;\n  this.remoteIdentity = request.from;\n\n  this.initEvents(events);\n};\n\nServerContext.prototype = new SIP.EventEmitter();\n\nServerContext.prototype.progress = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 180,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 100 || statusCode > 199) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('progress', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.accept = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 200,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 200 || statusCode > 299) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('accepted', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reject = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode || 480,\n    reasonPhrase = options.reasonPhrase || SIP.C.REASON_PHRASE[statusCode],\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    response;\n\n  if (statusCode < 300 || statusCode > 699) {\n    throw new TypeError('Invalid statusCode: ' + statusCode);\n  }\n  response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n  this.emit('rejected', response, reasonPhrase);\n  this.emit('failed', response, reasonPhrase);\n\n  return this;\n};\n\nServerContext.prototype.reply = function (options) {\n  options = options || {};\n  var\n    statusCode = options.statusCode,\n    reasonPhrase = options.reasonPhrase,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body;\n\n  this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n\n  return this;\n};\n\nServerContext.prototype.onRequestTimeout = function () {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n};\n\nServerContext.prototype.onTransportError = function () {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n};\n\nSIP.ServerContext = ServerContext;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/ServerContext.js\n ** module id = 23\n ** module chunks = 0\n **/","/**\n * @fileoverview DTMF\n */\n\n/**\n * @class DTMF\n * @param {SIP.Session} session\n */\nmodule.exports = function (SIP) {\n\nvar DTMF,\n  C = {\n    MIN_DURATION:            70,\n    MAX_DURATION:            6000,\n    DEFAULT_DURATION:        100,\n    MIN_INTER_TONE_GAP:      50,\n    DEFAULT_INTER_TONE_GAP:  500\n  };\n\nDTMF = function(session, tone, options) {\n  var events = [\n  'succeeded',\n  'failed'\n  ], duration, interToneGap;\n\n  if (tone === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);\n  this.owner = session;\n  this.direction = null;\n\n  options = options || {};\n  duration = options.duration || null;\n  interToneGap = options.interToneGap || null;\n\n  // Check tone type\n  if (typeof tone === 'string' ) {\n    tone = tone.toUpperCase();\n  } else if (typeof tone === 'number') {\n    tone = tone.toString();\n  } else {\n    throw new TypeError('Invalid tone: '+ tone);\n  }\n\n  // Check tone value\n  if (!tone.match(/^[0-9A-D#*]$/)) {\n    throw new TypeError('Invalid tone: '+ tone);\n  } else {\n    this.tone = tone;\n  }\n\n  // Check duration\n  if (duration && !SIP.Utils.isDecimal(duration)) {\n    throw new TypeError('Invalid tone duration: '+ duration);\n  } else if (!duration) {\n    duration = DTMF.C.DEFAULT_DURATION;\n  } else if (duration < DTMF.C.MIN_DURATION) {\n    this.logger.warn('\"duration\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_DURATION+ ' milliseconds');\n    duration = DTMF.C.MIN_DURATION;\n  } else if (duration > DTMF.C.MAX_DURATION) {\n    this.logger.warn('\"duration\" value is greater than the maximum allowed, setting it to '+ DTMF.C.MAX_DURATION +' milliseconds');\n    duration = DTMF.C.MAX_DURATION;\n  } else {\n    duration = Math.abs(duration);\n  }\n  this.duration = duration;\n\n  // Check interToneGap\n  if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {\n    throw new TypeError('Invalid interToneGap: '+ interToneGap);\n  } else if (!interToneGap) {\n    interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;\n  } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {\n    this.logger.warn('\"interToneGap\" value is lower than the minimum allowed, setting it to '+ DTMF.C.MIN_INTER_TONE_GAP +' milliseconds');\n    interToneGap = DTMF.C.MIN_INTER_TONE_GAP;\n  } else {\n    interToneGap = Math.abs(interToneGap);\n  }\n  this.interToneGap = interToneGap;\n\n  this.initEvents(events);\n};\nDTMF.prototype = new SIP.EventEmitter();\n\n\nDTMF.prototype.send = function(options) {\n  var extraHeaders, body;\n\n  this.direction = 'outgoing';\n\n  // Check RTCSession Status\n  if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&\n    this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n    throw new SIP.Exceptions.InvalidStateError(this.owner.status);\n  }\n\n  // Get DTMF options\n  options = options || {};\n  extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];\n\n  extraHeaders.push('Content-Type: application/dtmf-relay');\n\n  body = \"Signal= \" + this.tone + \"\\r\\n\";\n  body += \"Duration= \" + this.duration;\n\n  this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {\n    extraHeaders: extraHeaders,\n    body: body\n  });\n\n  this.owner.emit('dtmf', this.request, this);\n};\n\n/**\n * @private\n */\nDTMF.prototype.receiveResponse = function(response) {\n  var cause;\n\n  switch(true) {\n    case /^1[0-9]{2}$/.test(response.status_code):\n      // Ignore provisional responses.\n      break;\n\n    case /^2[0-9]{2}$/.test(response.status_code):\n      this.emit('succeeded', {\n        originator: 'remote',\n        response: response\n      });\n      break;\n\n    default:\n      cause = SIP.Utils.sipErrorCause(response.status_code);\n      this.emit('failed', response, cause);\n      break;\n  }\n};\n\n/**\n * @private\n */\nDTMF.prototype.onRequestTimeout = function() {\n  this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);\n  this.owner.onRequestTimeout();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onTransportError = function() {\n  this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);\n  this.owner.onTransportError();\n};\n\n/**\n * @private\n */\nDTMF.prototype.onDialogError = function(response) {\n  this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);\n  this.owner.onDialogError(response);\n};\n\n/**\n * @private\n */\nDTMF.prototype.init_incoming = function(request) {\n  this.direction = 'incoming';\n  this.request = request;\n\n  request.reply(200);\n\n  if (!this.tone || !this.duration) {\n    this.logger.warn('invalid INFO DTMF received, discarded');\n  } else {\n    this.owner.emit('dtmf', request, this);\n  }\n};\n\nDTMF.C = C;\nreturn DTMF;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Session/DTMF.js\n ** module id = 24\n ** module chunks = 0\n **/","module.exports = function (SIP, window, DTMF) {\n\nvar Session, InviteServerContext, InviteClientContext,\n C = {\n    //Session states\n    STATUS_NULL:                        0,\n    STATUS_INVITE_SENT:                 1,\n    STATUS_1XX_RECEIVED:                2,\n    STATUS_INVITE_RECEIVED:             3,\n    STATUS_WAITING_FOR_ANSWER:          4,\n    STATUS_ANSWERED:                    5,\n    STATUS_WAITING_FOR_PRACK:           6,\n    STATUS_WAITING_FOR_ACK:             7,\n    STATUS_CANCELED:                    8,\n    STATUS_TERMINATED:                  9,\n    STATUS_ANSWERED_WAITING_FOR_PRACK: 10,\n    STATUS_EARLY_MEDIA:                11,\n    STATUS_CONFIRMED:                  12\n  };\n\n/*\n * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]\n *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)\n */\nSession = function (mediaHandlerFactory) {\n  var events = [\n  'connecting',\n  'terminated',\n  'dtmf',\n  'invite',\n  'cancel',\n  'refer',\n  'bye',\n  'hold',\n  'unhold',\n  'muted',\n  'unmuted'\n  ];\n\n  this.status = C.STATUS_NULL;\n  this.dialog = null;\n  this.earlyDialogs = {};\n  this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;\n  // this.mediaHandler gets set by ICC/ISC constructors\n  this.hasOffer = false;\n  this.hasAnswer = false;\n\n  // Session Timers\n  this.timers = {\n    ackTimer: null,\n    expiresTimer: null,\n    invite2xxTimer: null,\n    userNoAnswerTimer: null,\n    rel1xxTimer: null,\n    prackTimer: null\n  };\n\n  // Session info\n  this.startTime = null;\n  this.endTime = null;\n  this.tones = null;\n\n  // Mute/Hold state\n  this.local_hold = false;\n  this.remote_hold = false;\n\n  this.pending_actions = {\n    actions: [],\n\n    length: function() {\n      return this.actions.length;\n    },\n\n    isPending: function(name){\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    shift: function() {\n      return this.actions.shift();\n    },\n\n    push: function(name) {\n      this.actions.push({\n        name: name\n      });\n    },\n\n    pop: function(name) {\n      var\n      idx = 0,\n      length = this.actions.length;\n\n      for (idx; idx<length; idx++) {\n        if (this.actions[idx].name === name) {\n          this.actions.splice(idx,1);\n          length --;\n          idx--;\n        }\n      }\n    }\n   };\n\n  this.early_sdp = null;\n  this.rel100 = SIP.C.supported.UNSUPPORTED;\n\n  this.initMoreEvents(events);\n};\n\nSession.prototype = {\n  dtmf: function(tones, options) {\n    var tone, dtmfs = [],\n        self = this;\n\n    options = options || {};\n\n    if (tones === undefined) {\n      throw new TypeError('Not enough arguments');\n    }\n\n    // Check Session Status\n    if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // Check tones\n    if (!tones || (typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {\n      throw new TypeError('Invalid tones: '+ tones);\n    }\n\n    tones = tones.toString().split('');\n\n    while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }\n\n    if (this.tones) {\n      // Tones are already queued, just add to the queue\n      this.tones =  this.tones.concat(dtmfs);\n      return this;\n    }\n\n    var sendDTMF = function () {\n      var dtmf, timeout;\n\n      if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {\n        // Stop sending DTMF\n        self.tones = null;\n        return this;\n      }\n\n      dtmf = self.tones.shift();\n\n      if (tone === ',') {\n        timeout = 2000;\n      } else {\n        dtmf.on('failed', function(){self.tones = null;});\n        dtmf.send(options);\n        timeout = dtmf.duration + dtmf.interToneGap;\n      }\n\n      // Set timeout for the next tone\n      SIP.Timers.setTimeout(sendDTMF, timeout);\n    };\n\n    this.tones = dtmfs;\n    sendDTMF();\n    return this;\n  },\n\n  bye: function(options) {\n    options = options || {};\n    var statusCode = options.statusCode;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      this.logger.error('Error: Attempted to send BYE in a terminated session.');\n      return this;\n    }\n\n    this.logger.log('terminating Session');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid statusCode: '+ statusCode);\n    }\n\n    options.receiveResponse = function () {};\n\n    return this.\n      sendRequest(SIP.C.BYE, options).\n      terminated();\n  },\n\n  refer: function(target, options) {\n    options = options || {};\n    var extraHeaders = (options.extraHeaders || []).slice(),\n        originalTarget = target;\n\n    if (target === undefined) {\n      throw new TypeError('Not enough arguments');\n    } else if (target instanceof SIP.InviteServerContext || target instanceof SIP.InviteClientContext) {\n      //Attended Transfer\n      // B.transfer(C)\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: <' + target.dialog.remote_target.toString() + '?Replaces=' + target.dialog.id.call_id + '%3Bto-tag%3D' + target.dialog.id.remote_tag + '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>');\n    } else {\n      //Blind Transfer\n\n      // Check Session Status\n      if (this.status !== C.STATUS_CONFIRMED) {\n        throw new SIP.Exceptions.InvalidStateError(this.status);\n      }\n\n      // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n      // so try to make one ahead of time\n      try {\n        target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n      } catch (e) {\n        this.logger.debug(\".refer() cannot parse Refer_To from\", target);\n        this.logger.debug(\"...falling through to normalizeTarget()\");\n      }\n\n      // Check target validity\n      target = this.ua.normalizeTarget(target);\n      if (!target) {\n        throw new TypeError('Invalid target: ' + originalTarget);\n      }\n\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n      extraHeaders.push('Refer-To: '+ target);\n    }\n\n    // Send the request\n    this.sendRequest(SIP.C.REFER, {\n      extraHeaders: extraHeaders,\n      body: options.body,\n      receiveResponse: function() {}\n    });\n    // hang up only if we transferred to a SIP address\n    if (target.scheme.match(\"^sips?$\")) {\n      this.terminate();\n    }\n    return this;\n  },\n\n  followRefer: function followRefer (callback) {\n    return function referListener (callback, request) {\n      // window.open non-SIP URIs if possible and keep session open\n      var target = request.parseHeader('refer-to').uri;\n      if (!target.scheme.match(\"^sips?$\")) {\n        var targetString = target.toString();\n        if (typeof window !== \"undefined\" && typeof window.open === \"function\") {\n          window.open(targetString);\n        } else {\n          this.logger.warn(\"referred to non-SIP URI but window.open isn't a function: \" + targetString);\n        }\n        return;\n      }\n\n      SIP.Hacks.Chrome.getsConfusedAboutGUM(this);\n\n      /*\n        Harmless race condition.  Both sides of REFER\n        may send a BYE, but in the end the dialogs are destroyed.\n      */\n      var referSession = this.ua.invite(request.parseHeader('refer-to').uri, {\n        media: this.mediaHint\n      });\n\n      callback.call(this, request, referSession);\n\n      this.terminate();\n    }.bind(this, callback);\n  },\n\n  sendRequest: function(method,options) {\n    options = options || {};\n    var self = this;\n\n    var request = new SIP.OutgoingRequest(\n      method,\n      this.dialog.remote_target,\n      this.ua,\n      {\n        cseq: options.cseq || (this.dialog.local_seqnum += 1),\n        call_id: this.dialog.id.call_id,\n        from_uri: this.dialog.local_uri,\n        from_tag: this.dialog.id.local_tag,\n        to_uri: this.dialog.remote_uri,\n        to_tag: this.dialog.id.remote_tag,\n        route_set: this.dialog.route_set,\n        statusCode: options.statusCode,\n        reasonPhrase: options.reasonPhrase\n      },\n      options.extraHeaders || [],\n      options.body\n    );\n\n    new SIP.RequestSender({\n      request: request,\n      onRequestTimeout: function() {\n        self.onRequestTimeout();\n      },\n      onTransportError: function() {\n        self.onTransportError();\n      },\n      receiveResponse: options.receiveResponse || function(response) {\n        self.receiveNonInviteResponse(response);\n      }\n    }, this.ua).send();\n\n    // Emit the request event\n    if (this.checkEvent(method.toLowerCase())) {\n      this.emit(method.toLowerCase(), request);\n    }\n\n    return this;\n  },\n\n  close: function() {\n    var idx;\n\n    if(this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    this.logger.log('closing INVITE session ' + this.id);\n\n    // 1st Step. Terminate media.\n    if (this.mediaHandler){\n      this.mediaHandler.close();\n    }\n\n    // 2nd Step. Terminate signaling.\n\n    // Clear session timers\n    for(idx in this.timers) {\n      SIP.Timers.clearTimeout(this.timers[idx]);\n    }\n\n    // Terminate dialogs\n\n    // Terminate confirmed dialog\n    if(this.dialog) {\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n\n    // Terminate early dialogs\n    for(idx in this.earlyDialogs) {\n      this.earlyDialogs[idx].terminate();\n      delete this.earlyDialogs[idx];\n    }\n\n    this.status = C.STATUS_TERMINATED;\n\n    delete this.ua.sessions[this.id];\n    return this;\n  },\n\n  createDialog: function(message, type, early) {\n    var dialog, early_dialog,\n      local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],\n      remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],\n      id = message.call_id + local_tag + remote_tag;\n\n    early_dialog = this.earlyDialogs[id];\n\n    // Early Dialog\n    if (early) {\n      if (early_dialog) {\n        return true;\n      } else {\n        early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);\n\n        // Dialog has been successfully created.\n        if(early_dialog.error) {\n          this.logger.error(early_dialog.error);\n          this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n          return false;\n        } else {\n          this.earlyDialogs[id] = early_dialog;\n          return true;\n        }\n      }\n    }\n    // Confirmed Dialog\n    else {\n      // In case the dialog is in _early_ state, update it\n      if (early_dialog) {\n        early_dialog.update(message, type);\n        this.dialog = early_dialog;\n        delete this.earlyDialogs[id];\n        for (var dia in this.earlyDialogs) {\n          this.earlyDialogs[dia].terminate();\n          delete this.earlyDialogs[dia];\n        }\n        return true;\n      }\n\n      // Otherwise, create a _confirmed_ dialog\n      dialog = new SIP.Dialog(this, message, type);\n\n      if(dialog.error) {\n        this.logger.error(dialog.error);\n        this.failed(message, SIP.C.causes.INTERNAL_ERROR);\n        return false;\n      } else {\n        this.to_tag = message.to_tag;\n        this.dialog = dialog;\n        return true;\n      }\n    }\n  },\n\n  /**\n  * Check if Session is ready for a re-INVITE\n  *\n  * @returns {Boolean}\n  */\n  isReadyToReinvite: function() {\n    return this.mediaHandler.isReady() &&\n      !this.dialog.uac_pending_reply &&\n      !this.dialog.uas_pending_reply;\n  },\n\n  /**\n   * Mute\n   */\n  mute: function(options) {\n    var ret = this.mediaHandler.mute(options);\n    if (ret) {\n      this.onmute(ret);\n    }\n  },\n\n  /**\n   * Unmute\n   */\n  unmute: function(options) {\n    var ret = this.mediaHandler.unmute(options);\n    if (ret) {\n      this.onunmute(ret);\n    }\n  },\n\n  /**\n   * Hold\n   */\n  hold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.hold();\n\n    // Check if RTCSession is ready to send a reINVITE\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'unhold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'hold' action, add this one to the queue\n       * Else, if there is already a 'hold' action, skip\n       */\n      if (this.pending_actions.isPending('unhold')) {\n        this.pending_actions.pop('unhold');\n      } else if (!this.pending_actions.isPending('hold')) {\n        this.pending_actions.push('hold');\n      }\n      return;\n    } else if (this.local_hold === true) {\n        return;\n    }\n\n    this.onhold('local');\n\n    this.sendReinvite({\n      mangle: function(body){\n\n        // Don't receive media\n        // TODO - This will break for media streams with different directions.\n        if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(body)) {\n          body = body.replace(/(m=[^\\r]*\\r\\n)/g, '$1a=sendonly\\r\\n');\n        } else {\n          body = body.replace(/a=sendrecv\\r\\n/g, 'a=sendonly\\r\\n');\n          body = body.replace(/a=recvonly\\r\\n/g, 'a=inactive\\r\\n');\n        }\n\n        return body;\n      }\n    });\n  },\n\n  /**\n   * Unhold\n   */\n  unhold: function() {\n\n    if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.mediaHandler.unhold();\n\n    if (!this.isReadyToReinvite()) {\n      /* If there is a pending 'hold' action, cancel it and don't queue this one\n       * Else, if there isn't any 'unhold' action, add this one to the queue\n       * Else, if there is already a 'unhold' action, skip\n       */\n      if (this.pending_actions.isPending('hold')) {\n        this.pending_actions.pop('hold');\n      } else if (!this.pending_actions.isPending('unhold')) {\n        this.pending_actions.push('unhold');\n      }\n      return;\n    } else if (this.local_hold === false) {\n      return;\n    }\n\n    this.onunhold('local');\n\n    this.sendReinvite();\n  },\n\n  /**\n   * isOnHold\n   */\n  isOnHold: function() {\n    return {\n      local: this.local_hold,\n      remote: this.remote_hold\n    };\n  },\n\n  /**\n   * In dialog INVITE Reception\n   * @private\n   */\n  receiveReinvite: function(request) {\n    var self = this,\n        contentType = request.getHeader('Content-Type'),\n        hold = true;\n\n    if (request.body) {\n      if (contentType !== 'application/sdp') {\n        this.logger.warn('invalid Content-Type');\n        request.reply(415);\n        return;\n      }\n\n      // Are we holding?\n      hold = (/a=(sendonly|inactive)/).test(request.body);\n\n      this.mediaHandler.setDescription(\n        request.body,\n        /*\n         * onSuccess\n         * SDP Offer is valid\n         */\n        function() {\n          self.mediaHandler.getDescription(\n            function(body) {\n              request.reply(200, null, ['Contact: ' + self.contact], body,\n                function() {\n                  self.status = C.STATUS_WAITING_FOR_ACK;\n                  self.setInvite2xxTimer(request, body);\n                  self.setACKTimer();\n\n                  if (self.remote_hold && !hold) {\n                    self.onunhold('remote');\n                  } else if (!self.remote_hold && hold) {\n                    self.onhold('remote');\n                  }\n                });\n            },\n            function() {\n              request.reply(500);\n            },\n            self.mediaHint\n          );\n        },\n        /*\n         * onFailure\n         * Bad media description\n         */\n        function(e) {\n          self.logger.error(e);\n          request.reply(488);\n        }\n      );\n    }\n  },\n\n  sendReinvite: function(options) {\n    options = options || {};\n\n    var\n      self = this,\n       extraHeaders = (options.extraHeaders || []).slice(),\n       eventHandlers = options.eventHandlers || {},\n       mangle = options.mangle || null;\n\n    if (eventHandlers.succeeded) {\n      this.reinviteSucceeded = eventHandlers.succeeded;\n    } else {\n      this.reinviteSucceeded = function(){\n        SIP.Timers.clearTimeout(self.timers.ackTimer);\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.status = C.STATUS_CONFIRMED;\n      };\n    }\n    if (eventHandlers.failed) {\n      this.reinviteFailed = eventHandlers.failed;\n    } else {\n      this.reinviteFailed = function(){};\n    }\n\n    extraHeaders.push('Contact: ' + this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n    extraHeaders.push('Content-Type: application/sdp');\n\n    this.receiveResponse = this.receiveReinviteResponse;\n    //REVISIT\n    this.mediaHandler.getDescription(\n      function(body){\n        if (mangle) {\n          body = mangle(body);\n        }\n\n        self.dialog.sendRequest(self, SIP.C.INVITE, {\n          extraHeaders: extraHeaders,\n          body: body\n        });\n      },\n      function() {\n        if (self.isReadyToReinvite()) {\n          self.onReadyToReinvite();\n        }\n        self.reinviteFailed();\n      },\n      self.mediaHint\n    );\n  },\n\n  receiveRequest: function (request) {\n    switch (request.method) {\n      case SIP.C.BYE:\n        request.reply(200);\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.emit('bye', request);\n          this.terminated(request, SIP.C.causes.BYE);\n        }\n        break;\n      case SIP.C.INVITE:\n        if(this.status === C.STATUS_CONFIRMED) {\n          this.logger.log('re-INVITE received');\n          // Switch these two lines to try re-INVITEs:\n          //this.receiveReinvite(request);\n          request.reply(488, null, ['Warning: 399 sipjs \"Cannot update media description\"']);\n        }\n        break;\n      case SIP.C.INFO:\n        if(this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK) {\n          var body, tone, duration,\n              contentType = request.getHeader('content-type'),\n              reg_tone = /^(Signal\\s*?=\\s*?)([0-9A-D#*]{1})(\\s)?.*/,\n              reg_duration = /^(Duration\\s?=\\s?)([0-9]{1,4})(\\s)?.*/;\n\n          if (contentType) {\n            if (contentType.match(/^application\\/dtmf-relay/i)) {\n              if (request.body) {\n                body = request.body.split('\\r\\n', 2);\n                if (body.length === 2) {\n                  if (reg_tone.test(body[0])) {\n                    tone = body[0].replace(reg_tone,\"$2\");\n                  }\n                  if (reg_duration.test(body[1])) {\n                    duration = parseInt(body[1].replace(reg_duration,\"$2\"), 10);\n                  }\n                }\n              }\n\n              new DTMF(this, tone, {duration: duration}).init_incoming(request);\n            } else {\n              request.reply(415, null, [\"Accept: application/dtmf-relay\"]);\n            }\n          }\n        }\n        break;\n      case SIP.C.REFER:\n        if(this.status ===  C.STATUS_CONFIRMED) {\n          this.logger.log('REFER received');\n          request.reply(202, 'Accepted');\n          var\n            hasReferListener = this.checkListener('refer'),\n            notifyBody = hasReferListener ?\n              'SIP/2.0 100 Trying' :\n              // RFC 3515.2.4.2: 'the UA MAY decline the request.'\n              'SIP/2.0 603 Declined'\n          ;\n\n          this.sendRequest(SIP.C.NOTIFY, {\n            extraHeaders:[\n              'Event: refer',\n              'Subscription-State: terminated',\n              'Content-Type: message/sipfrag'\n            ],\n            body: notifyBody,\n            receiveResponse: function() {}\n          });\n\n          if (hasReferListener) {\n            this.emit('refer', request);\n          }\n        }\n        break;\n    }\n  },\n\n  /**\n   * Reception of Response for in-dialog INVITE\n   * @private\n   */\n  receiveReinviteResponse: function(response) {\n    var self = this,\n        contentType = response.getHeader('Content-Type');\n\n    if (this.status === C.STATUS_TERMINATED) {\n      return;\n    }\n\n    switch(true) {\n      case /^1[0-9]{2}$/.test(response.status_code):\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        this.status = C.STATUS_CONFIRMED;\n\n        this.sendRequest(SIP.C.ACK,{cseq:response.cseq});\n\n        if(!response.body) {\n          this.reinviteFailed();\n          break;\n        } else if (contentType !== 'application/sdp') {\n          this.reinviteFailed();\n          break;\n        }\n\n        //REVISIT\n        this.mediaHandler.setDescription(\n          response.body,\n          /*\n           * onSuccess\n           * SDP Answer fits with Offer.\n           */\n          function() {\n            self.reinviteSucceeded();\n          },\n          /*\n           * onFailure\n           * SDP Answer does not fit the Offer.\n           */\n          function() {\n            self.reinviteFailed();\n          }\n        );\n        break;\n      default:\n        this.reinviteFailed();\n    }\n  },\n\n  acceptAndTerminate: function(response, status_code, reason_phrase) {\n    var extraHeaders = [];\n\n    if (status_code) {\n      reason_phrase = reason_phrase || SIP.C.REASON_PHRASE[status_code] || '';\n      extraHeaders.push('Reason: SIP ;cause=' + status_code + '; text=\"' + reason_phrase + '\"');\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if (this.dialog || this.createDialog(response, 'UAC')) {\n      this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n      this.sendRequest(SIP.C.BYE, {\n        extraHeaders: extraHeaders\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * RFC3261 13.3.1.4\n   * Response retransmissions cannot be accomplished by transaction layer\n   *  since it is destroyed when receiving the first 2xx answer\n   */\n  setInvite2xxTimer: function(request, body) {\n    var self = this,\n        timeout = SIP.Timers.T1;\n\n    this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {\n      if (self.status !== C.STATUS_WAITING_FOR_ACK) {\n        return;\n      }\n\n      self.logger.log('no ACK received, attempting to retransmit OK');\n\n      request.reply(200, null, ['Contact: ' + self.contact], body);\n\n      timeout = Math.min(timeout * 2, SIP.Timers.T2);\n\n      self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);\n    }, timeout);\n  },\n\n  /**\n   * RFC3261 14.2\n   * If a UAS generates a 2xx response and never receives an ACK,\n   *  it SHOULD generate a BYE to terminate the dialog.\n   */\n  setACKTimer: function() {\n    var self = this;\n\n    this.timers.ackTimer = SIP.Timers.setTimeout(function() {\n      if(self.status === C.STATUS_WAITING_FOR_ACK) {\n        self.logger.log('no ACK received for an extended period of time, terminating the call');\n        SIP.Timers.clearTimeout(self.timers.invite2xxTimer);\n        self.sendRequest(SIP.C.BYE);\n        self.terminated(null, SIP.C.causes.NO_ACK);\n      }\n    }, SIP.Timers.TIMER_H);\n  },\n\n  /*\n   * @private\n   */\n  onReadyToReinvite: function() {\n    var action = this.pending_actions.shift();\n\n    if (!action || !this[action.name]) {\n      return;\n    }\n\n    this[action.name]();\n  },\n\n  onTransportError: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.CONNECTION_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.CONNECTION_ERROR);\n    }\n  },\n\n  onRequestTimeout: function() {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);\n    }\n  },\n\n  onDialogError: function(response) {\n    if (this.status === C.STATUS_CONFIRMED) {\n      this.terminated(response, SIP.C.causes.DIALOG_ERROR);\n    } else if (this.status !== C.STATUS_TERMINATED) {\n      this.failed(response, SIP.C.causes.DIALOG_ERROR);\n    }\n  },\n\n  /**\n   * @private\n   */\n  onhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;\n    this.emit('hold', { originator: originator });\n  },\n\n  /**\n   * @private\n   */\n  onunhold: function(originator) {\n    this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;\n    this.emit('unhold', { originator: originator });\n  },\n\n  /*\n   * @private\n   */\n  onmute: function(options) {\n    this.emit('muted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  /*\n   * @private\n   */\n  onunmute: function(options) {\n    this.emit('unmuted', {\n      audio: options.audio,\n      video: options.video\n    });\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  rejected: function(response, cause) {\n    this.close();\n    return this.emit('rejected',\n      response || null,\n      cause\n    );\n  },\n\n  canceled: function() {\n    this.close();\n    return this.emit('cancel');\n  },\n\n  accepted: function(response, cause) {\n    cause = cause || (response && SIP.C.REASON_PHRASE[response.status_code]) || '';\n\n    this.startTime = new Date();\n\n    return this.emit('accepted', response, cause);\n  },\n\n  terminated: function(message, cause) {\n    this.endTime = new Date();\n\n    this.close();\n    return this.emit('terminated', {\n      message: message || null,\n      cause: cause || null\n    });\n  },\n\n  connecting: function(request) {\n    return this.emit('connecting', { request: request });\n  }\n};\n\nSession.C = C;\nSIP.Session = Session;\n\n\nInviteServerContext = function(ua, request) {\n  var expires,\n    self = this,\n    contentType = request.getHeader('Content-Type'),\n    contentDisp = request.parseHeader('Content-Disposition');\n\n  // Check body and content type\n  if ((!contentDisp && contentType !== 'application/sdp') || (contentDisp && contentDisp.type === 'render')) {\n    this.renderbody = request.body;\n    this.rendertype = contentType;\n  } else if (contentType !== 'application/sdp' && (contentDisp && contentDisp.type === 'session')) {\n    request.reply(415);\n    //TODO: instead of 415, pass off to the media handler, who can then decide if we can use it\n    return;\n  }\n\n  //TODO: move this into media handler\n  SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n  SIP.Hacks.AllBrowsers.maskDtls(request);\n\n  SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  this.status = C.STATUS_INVITE_RECEIVED;\n  this.from_tag = request.from_tag;\n  this.id = request.call_id + this.from_tag;\n  this.request = request;\n  this.contact = this.ua.contact.toString();\n\n  this.receiveNonInviteResponse = function () {}; // intentional no-op\n\n  this.logger = ua.getLogger('sip.inviteservercontext', this.id);\n\n  //Save the session into the ua sessions collection.\n  this.ua.sessions[this.id] = this;\n\n  //Get the Expires header value if exists\n  if(request.hasHeader('expires')) {\n    expires = request.getHeader('expires') * 1000;\n  }\n\n  //Set 100rel if necessary\n  function set100rel(h,c) {\n    if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {\n      self.rel100 = c;\n    }\n  }\n  set100rel('require', SIP.C.supported.REQUIRED);\n  set100rel('supported', SIP.C.supported.SUPPORTED);\n\n  /* Set the to_tag before\n   * replying a response code that will create a dialog.\n   */\n  request.to_tag = SIP.Utils.newTag();\n\n  // An error on dialog creation will fire 'failed' event\n  if(!this.createDialog(request, 'UAS', true)) {\n    request.reply(500, 'Missing Contact header field');\n    return;\n  }\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: {\"optional\": [{'DtlsSrtpKeyAgreement': 'true'}]}\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n\n  function fireNewSession() {\n    var options = {extraHeaders: ['Contact: ' + self.contact]};\n\n    if (self.rel100 !== SIP.C.supported.REQUIRED) {\n      self.progress(options);\n    }\n    self.status = C.STATUS_WAITING_FOR_ANSWER;\n\n    // Set userNoAnswerTimer\n    self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function() {\n      request.reply(408);\n      self.failed(request, SIP.C.causes.NO_ANSWER);\n    }, self.ua.configuration.noAnswerTimeout);\n\n    /* Set expiresTimer\n     * RFC3261 13.3.1\n     */\n    if (expires) {\n      self.timers.expiresTimer = SIP.Timers.setTimeout(function() {\n        if(self.status === C.STATUS_WAITING_FOR_ANSWER) {\n          request.reply(487);\n          self.failed(request, SIP.C.causes.EXPIRES);\n        }\n      }, expires);\n    }\n\n    self.emit('invite',request);\n  }\n\n  if (!request.body || this.renderbody) {\n    SIP.Timers.setTimeout(fireNewSession, 0);\n  } else {\n    this.hasOffer = true;\n    this.mediaHandler.setDescription(\n      request.body,\n      /*\n       * onSuccess\n       * SDP Offer is valid. Fire UA newRTCSession\n       */\n      fireNewSession,\n      /*\n       * onFailure\n       * Bad media description\n       */\n      function(e) {\n        self.logger.warn('invalid SDP');\n        self.logger.warn(e);\n        request.reply(488);\n      }\n    );\n  }\n};\n\nInviteServerContext.prototype = {\n  reject: function(options) {\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('rejecting RTCSession');\n\n    SIP.ServerContext.prototype.reject.apply(this, [options]);\n    return this.terminated();\n  },\n\n  terminate: function(options) {\n    options = options || {};\n\n    var\n    extraHeaders = (options.extraHeaders || []).slice(),\n    body = options.body,\n    dialog,\n    self = this;\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK &&\n       this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {\n      dialog = this.dialog;\n\n      this.receiveRequest = function(request) {\n        if (request.method === SIP.C.ACK) {\n          this.request(SIP.C.BYE, {\n            extraHeaders: extraHeaders,\n            body: body\n          });\n          dialog.terminate();\n        }\n      };\n\n      this.request.server_transaction.on('stateChanged', function(){\n        if (this.state === SIP.Transactions.C.STATUS_TERMINATED) {\n          this.request = new SIP.OutgoingRequest(\n            SIP.C.BYE,\n            this.dialog.remote_target,\n            this.ua,\n            {\n              'cseq': this.dialog.local_seqnum+=1,\n              'call_id': this.dialog.id.call_id,\n              'from_uri': this.dialog.local_uri,\n              'from_tag': this.dialog.id.local_tag,\n              'to_uri': this.dialog.remote_uri,\n              'to_tag': this.dialog.id.remote_tag,\n              'route_set': this.dialog.route_set\n            },\n            extraHeaders,\n            body\n          );\n\n          new SIP.RequestSender(\n            {\n              request: this.request,\n              onRequestTimeout: function() {\n                self.onRequestTimeout();\n              },\n              onTransportError: function() {\n                self.onTransportError();\n              },\n              receiveResponse: function() {\n                return;\n              }\n            },\n            this.ua\n          ).send();\n          dialog.terminate();\n        }\n      });\n\n      this.emit('bye', this.request);\n      this.terminated();\n\n      // Restore the dialog into 'this' in order to be able to send the in-dialog BYE :-)\n      this.dialog = dialog;\n\n      // Restore the dialog into 'ua' so the ACK can reach 'this' session\n      this.ua.dialogs[dialog.id.toString()] = dialog;\n\n    } else if (this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.reject(options);\n    }\n\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  progress: function (options) {\n    options = options || {};\n    var\n      statusCode = options.statusCode || 180,\n      reasonPhrase = options.reasonPhrase,\n      extraHeaders = (options.extraHeaders || []).slice(),\n      body = options.body,\n      response;\n\n    if (statusCode < 100 || statusCode > 199) {\n      throw new TypeError('Invalid statusCode: ' + statusCode);\n    }\n\n    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    function do100rel() {\n      statusCode = options.statusCode || 183;\n\n      // Set status and add extra headers\n      this.status = C.STATUS_WAITING_FOR_PRACK;\n      extraHeaders.push('Contact: '+ this.contact);\n      extraHeaders.push('Require: 100rel');\n      extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));\n\n      // Save media hint for later (referred sessions)\n      this.mediaHint = options.media;\n\n      // Get the session description to add to preaccept with\n      this.mediaHandler.getDescription(\n        // Success\n        function succ(body) {\n          if (this.isCanceled || this.status === C.STATUS_TERMINATED) {\n            return;\n          }\n\n          this.early_sdp = body;\n          this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;\n\n          // Retransmit until we get a response or we time out (see prackTimer below)\n          var timeout = SIP.Timers.T1;\n          this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {\n            this.request.reply(statusCode, null, extraHeaders, body);\n            timeout *= 2;\n            this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);\n          }.bind(this), timeout);\n\n          // Timeout and reject INVITE if no response\n          this.timers.prackTimer = SIP.Timers.setTimeout(function () {\n            if (this.status !== C.STATUS_WAITING_FOR_PRACK) {\n              return;\n            }\n\n            this.logger.log('no PRACK received, rejecting the call');\n            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n            this.request.reply(504);\n            this.terminated(null, SIP.C.causes.NO_PRACK);\n          }.bind(this), SIP.Timers.T1 * 64);\n\n          // Send the initial response\n          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n          this.emit('progress', response, reasonPhrase);\n        }.bind(this),\n\n        // Failure\n        function fail() {\n          this.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        }.bind(this),\n\n        // Media hint:\n        options.media);\n    } // end do100rel\n\n    function normalReply() {\n      response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);\n      this.emit('progress', response, reasonPhrase);\n    }\n\n    if (options.statusCode !== 100 &&\n        (this.rel100 === SIP.C.supported.REQUIRED ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||\n         (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {\n      do100rel.apply(this);\n    } else {\n      normalReply.apply(this);\n    }\n    return this;\n  },\n\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  accept: function(options) {\n    options = options || {};\n    options = SIP.Utils.desugarSessionOptions(options);\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    // commented out now-unused hold-related variables for jshint. See below. JMF 2014-1-21\n    var\n      //idx, length, hasAudio, hasVideo,\n      self = this,\n      request = this.request,\n      extraHeaders = (options.extraHeaders || []).slice(),\n    //mediaStream = options.mediaStream || null,\n      sdpCreationSucceeded = function(body) {\n        var\n          response,\n          // run for reply success callback\n          replySucceeded = function() {\n            self.status = C.STATUS_WAITING_FOR_ACK;\n\n            self.setInvite2xxTimer(request, body);\n            self.setACKTimer();\n          },\n\n          // run for reply failure callback\n          replyFailed = function() {\n            self.failed(null, SIP.C.causes.CONNECTION_ERROR);\n          };\n\n        // Chrome might call onaddstream before accept() is called, which means\n        // mediaHandler.render() was called without a renderHint, so we need to\n        // re-render now that mediaHint.render has been set.\n        //\n        // Chrome seems to be in the right regarding this, see\n        // http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-onaddstream\n        self.mediaHandler.render();\n\n        extraHeaders.push('Contact: ' + self.contact);\n\n        if(!self.hasOffer) {\n          self.hasOffer = true;\n        } else {\n          self.hasAnswer = true;\n        }\n        response = request.reply(200, null, extraHeaders,\n                      body,\n                      replySucceeded,\n                      replyFailed\n                     );\n        if (self.status !== C.STATUS_TERMINATED) { // Didn't fail\n          self.accepted(response, SIP.C.REASON_PHRASE[200]);\n        }\n      },\n\n      sdpCreationFailed = function() {\n        if (self.status === C.STATUS_TERMINATED) {\n          return;\n        }\n        // TODO - fail out on error\n        //response = request.reply(480);\n        //self.failed(response, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n        self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n      };\n\n    // Check Session Status\n    if (this.status === C.STATUS_WAITING_FOR_PRACK) {\n      this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;\n      return this;\n    } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {\n      this.status = C.STATUS_ANSWERED;\n    } else if (this.status !== C.STATUS_EARLY_MEDIA) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    // An error on dialog creation will fire 'failed' event\n    if(!this.createDialog(request, 'UAS')) {\n      request.reply(500, 'Missing Contact header field');\n      return this;\n    }\n\n    SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);\n\n    // this hold-related code breaks FF accepting new calls - JMF 2014-1-21\n    /*\n    length = this.getRemoteStreams().length;\n\n    for (idx = 0; idx < length; idx++) {\n      if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {\n        hasVideo = true;\n      }\n      if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {\n        hasAudio = true;\n      }\n    }\n\n    if (!hasAudio && this.mediaConstraints.audio === true) {\n      this.mediaConstraints.audio = false;\n      if (mediaStream) {\n        length = mediaStream.getAudioTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);\n        }\n      }\n    }\n\n    if (!hasVideo && this.mediaConstraints.video === true) {\n      this.mediaConstraints.video = false;\n      if (mediaStream) {\n        length = mediaStream.getVideoTracks().length;\n        for (idx = 0; idx < length; idx++) {\n          mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);\n        }\n      }\n    }\n    */\n\n    if (this.status === C.STATUS_EARLY_MEDIA) {\n      sdpCreationSucceeded();\n    } else {\n      this.mediaHandler.getDescription(\n        sdpCreationSucceeded,\n        sdpCreationFailed,\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveRequest: function(request) {\n\n    // ISC RECEIVE REQUEST\n\n    function confirmSession() {\n      var contentType;\n\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      // TODO - this logic assumes Content-Disposition defaults\n      contentType = request.getHeader('Content-Type');\n      if (contentType !== 'application/sdp') {\n        this.renderbody = request.body;\n        this.rendertype = contentType;\n      }\n    }\n\n    switch(request.method) {\n    case SIP.C.CANCEL:\n      /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL\n       * was in progress and that the UAC MAY continue with the session established by\n       * any 2xx response, or MAY terminate with BYE. SIP does continue with the\n       * established session. So the CANCEL is processed only if the session is not yet\n       * established.\n       */\n\n      /*\n       * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the\n       *request opening the session.\n       */\n      if(this.status === C.STATUS_WAITING_FOR_ANSWER ||\n         this.status === C.STATUS_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||\n         this.status === C.STATUS_EARLY_MEDIA ||\n         this.status === C.STATUS_ANSWERED) {\n\n        this.status = C.STATUS_CANCELED;\n        this.request.reply(487);\n        this.canceled(request);\n        this.rejected(request, SIP.C.causes.CANCELED);\n        this.failed(request, SIP.C.causes.CANCELED);\n      }\n      break;\n    case SIP.C.ACK:\n      if(this.status === C.STATUS_WAITING_FOR_ACK) {\n        if (!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            // ACK contains answer to an INVITE w/o SDP negotiation\n            SIP.Hacks.Firefox.cannotHandleExtraWhitespace(request);\n            SIP.Hacks.AllBrowsers.maskDtls(request);\n\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              confirmSession.bind(this),\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer.  Terminate the call.\n               */\n              function (e) {\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else if (this.early_sdp) {\n            confirmSession.apply(this);\n          } else {\n            //TODO: Pass to mediahandler\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          confirmSession.apply(this);\n        }\n      }\n      break;\n    case SIP.C.PRACK:\n      if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n        //localMedia = session.mediaHandler.localMedia;\n        if(!this.hasAnswer) {\n          if(request.body && request.getHeader('content-type') === 'application/sdp') {\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              request.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function() {\n                SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n                SIP.Timers.clearTimeout(this.timers.prackTimer);\n                request.reply(200);\n                if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n                  this.status = C.STATUS_EARLY_MEDIA;\n                  this.accept();\n                }\n                this.status = C.STATUS_EARLY_MEDIA;\n                //REVISIT\n                this.mute();\n              }.bind(this),\n              function (e) {\n                //TODO: Send to media handler\n                this.logger.warn(e);\n                this.terminate({\n                  statusCode: '488',\n                  reasonPhrase: 'Bad Media Description'\n                });\n                this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }.bind(this)\n            );\n          } else {\n            this.terminate({\n              statusCode: '488',\n              reasonPhrase: 'Bad Media Description'\n            });\n            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n          }\n        } else {\n          SIP.Timers.clearTimeout(this.timers.rel1xxTimer);\n          SIP.Timers.clearTimeout(this.timers.prackTimer);\n          request.reply(200);\n\n          if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {\n            this.status = C.STATUS_EARLY_MEDIA;\n            this.accept();\n          }\n          this.status = C.STATUS_EARLY_MEDIA;\n          //REVISIT\n          this.mute();\n        }\n      } else if(this.status === C.STATUS_EARLY_MEDIA) {\n        request.reply(200);\n      }\n      break;\n    default:\n      Session.prototype.receiveRequest.apply(this, [request]);\n      break;\n    }\n  }\n};\n\nSIP.InviteServerContext = InviteServerContext;\n\nInviteClientContext = function(ua, target, options) {\n  options = options || {};\n  var requestParams, iceServers,\n    extraHeaders = (options.extraHeaders || []).slice(),\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    isMediaSupported = ua.configuration.mediaHandlerFactory.isSupported;\n\n  // Check WebRTC support\n  if (isMediaSupported && !isMediaSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  this.RTCConstraints = options.RTCConstraints || {};\n  this.inviteWithoutSdp = options.inviteWithoutSdp || false;\n\n  // Set anonymous property\n  this.anonymous = options.anonymous || false;\n\n  // Custom data to be sent either in INVITE or in ACK\n  this.renderbody = options.renderbody || null;\n  this.rendertype = options.rendertype || 'text/plain';\n\n  requestParams = {from_tag: this.from_tag};\n\n  /* Do not add ;ob in initial forming dialog requests if the registration over\n   *  the current connection got a GRUU URI.\n   */\n  this.contact = ua.contact.toString({\n    anonymous: this.anonymous,\n    outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu\n  });\n\n  if (this.anonymous) {\n    requestParams.from_displayName = 'Anonymous';\n    requestParams.from_uri = 'sip:anonymous@anonymous.invalid';\n\n    extraHeaders.push('P-Preferred-Identity: '+ ua.configuration.uri.toString());\n    extraHeaders.push('Privacy: id');\n  }\n  extraHeaders.push('Contact: '+ this.contact);\n  extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n  if (!this.inviteWithoutSdp) {\n    extraHeaders.push('Content-Type: application/sdp');\n  } else if (this.renderbody) {\n    extraHeaders.push('Content-Type: ' + this.rendertype);\n    extraHeaders.push('Content-Disposition: render;handling=optional');\n  }\n\n  if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {\n    extraHeaders.push('Require: 100rel');\n  }\n\n  options.extraHeaders = extraHeaders;\n  options.params = requestParams;\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);\n  SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);\n\n  // Check Session Status\n  if (this.status !== C.STATUS_NULL) {\n    throw new SIP.Exceptions.InvalidStateError(this.status);\n  }\n\n  // Session parameter initialization\n  this.from_tag = SIP.Utils.newTag();\n\n  // OutgoingSession specific parameters\n  this.isCanceled = false;\n  this.received_100 = false;\n\n  this.method = SIP.C.INVITE;\n\n  this.receiveNonInviteResponse = this.receiveResponse;\n  this.receiveResponse = this.receiveInviteResponse;\n\n  this.logger = ua.getLogger('sip.inviteclientcontext');\n\n  if (stunServers) {\n    iceServers = SIP.UA.configuration_check.optional['stunServers'](stunServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid stunServers: '+ stunServers);\n    } else {\n      this.stunServers = iceServers;\n    }\n  }\n\n  if (turnServers) {\n    iceServers = SIP.UA.configuration_check.optional['turnServers'](turnServers);\n    if (!iceServers) {\n      throw new TypeError('Invalid turnServers: '+ turnServers);\n    } else {\n      this.turnServers = iceServers;\n    }\n  }\n\n  ua.applicants[this] = this;\n\n  this.id = this.request.call_id + this.from_tag;\n\n  //Initialize Media Session\n  this.mediaHandler = this.mediaHandlerFactory(this, {\n    RTCConstraints: this.RTCConstraints,\n    stunServers: this.stunServers,\n    turnServers: this.turnServers\n  });\n\n  if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {\n    this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);\n    this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);\n  }\n};\n\nInviteClientContext.prototype = {\n  /*\n   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n   */\n  invite: function (options) {\n    var self = this;\n    options = options || {};\n\n    SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);\n    this.mediaHint = options.media;\n\n    //Save the session into the ua sessions collection.\n    //Note: placing in constructor breaks call to request.cancel on close... User does not need this anyway\n    this.ua.sessions[this.id] = this;\n\n    //Note: due to the way Firefox handles gUM calls, it is recommended to make the gUM call at the app level\n    // and hand sip.js a stream as the mediaHint\n    if (this.inviteWithoutSdp) {\n      //just send an invite with no sdp...\n      this.request.body = self.renderbody;\n      this.status = C.STATUS_INVITE_SENT;\n      this.send();\n    } else {\n      this.mediaHandler.getDescription(\n        function onSuccess(offer) {\n          if (self.isCanceled || self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          self.hasOffer = true;\n          self.request.body = offer;\n          self.status = C.STATUS_INVITE_SENT;\n          self.send();\n        },\n        function onFailure() {\n          if (self.status === C.STATUS_TERMINATED) {\n            return;\n          }\n          // TODO...fail out\n          //self.failed(null, SIP.C.causes.USER_DENIED_MEDIA_ACCESS);\n          //self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n          self.failed(null, SIP.C.causes.WEBRTC_ERROR);\n        },\n        self.mediaHint\n      );\n    }\n\n    return this;\n  },\n\n  receiveInviteResponse: function(response) {\n    var cause, //localMedia,\n      session = this,\n      id = response.call_id + response.from_tag + response.to_tag,\n      extraHeaders = [],\n      options = {};\n\n    if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {\n      return;\n    }\n\n    if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {\n      if (id !== this.dialog.id.toString() ) {\n        if (!this.createDialog(response, 'UAC', true)) {\n          return;\n        }\n        this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,\n                                          {\n                                            body: SIP.Utils.generateFakeSDP(response.body)\n                                          });\n        this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);\n\n        /* NOTE: This fails because the forking proxy does not recognize that an unanswerable\n         * leg (due to peerConnection limitations) has been answered first. If your forking\n         * proxy does not hang up all unanswered branches on the first branch answered, remove this.\n         */\n        if(this.status !== C.STATUS_CONFIRMED) {\n          this.failed(response, SIP.C.causes.WEBRTC_ERROR);\n        }\n        return;\n      } else if (this.status === C.STATUS_CONFIRMED) {\n        this.sendRequest(SIP.C.ACK,{cseq: response.cseq});\n        return;\n      } else if (!this.hasAnswer) {\n        // invite w/o sdp is waiting for callback\n        //an invite with sdp must go on, and hasAnswer is true\n        return;\n      }\n    }\n\n    if (this.dialog && response.status_code < 200) {\n      /*\n        Early media has been set up with at least one other different branch,\n        but a final 2xx response hasn't been received\n      */\n      if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {\n        return;\n      }\n\n      extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n      this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n\n      this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n        extraHeaders: extraHeaders,\n        body: SIP.Utils.generateFakeSDP(response.body)\n      });\n      return;\n    }\n\n    // Proceed to cancellation if the user requested.\n    if(this.isCanceled) {\n      if(response.status_code >= 100 && response.status_code < 200) {\n        this.request.cancel(this.cancelReason);\n        this.canceled(null);\n      } else if(response.status_code >= 200 && response.status_code < 299) {\n        this.acceptAndTerminate(response);\n        this.emit('bye', this.request);\n      }\n      return;\n    }\n\n    switch(true) {\n      case /^100$/.test(response.status_code):\n        this.received_100 = true;\n        break;\n      case (/^1[0-9]{2}$/.test(response.status_code)):\n        // Do nothing with 1xx responses without To tag.\n        if(!response.to_tag) {\n          this.logger.warn('1xx response received without to tag');\n          break;\n        }\n\n        // Create Early Dialog if 1XX comes with contact\n        if(response.hasHeader('contact')) {\n          // An error on dialog creation will fire 'failed' event\n          if (!this.createDialog(response, 'UAC', true)) {\n            break;\n          }\n        }\n\n        this.status = C.STATUS_1XX_RECEIVED;\n\n        if(response.hasHeader('require') &&\n           response.getHeader('require').indexOf('100rel') !== -1) {\n\n          // Do nothing if this.dialog is already confirmed\n          if (this.dialog || !this.earlyDialogs[id]) {\n            break;\n          }\n\n          if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||\n              (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length-1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {\n            return;\n          }\n\n          SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n          SIP.Hacks.AllBrowsers.maskDtls(response);\n\n          if (!response.body) {\n            extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {\n              extraHeaders: extraHeaders\n            });\n            this.emit('progress', response);\n\n          } else if (this.hasOffer) {\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasAnswer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              /*\n               * onSuccess\n               * SDP Answer fits with Offer. Media will start\n               */\n              function () {\n                extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                session.dialog.pracked.push(response.getHeader('rseq'));\n\n                session.sendRequest(SIP.C.PRACK, {\n                  extraHeaders: extraHeaders,\n                  receiveResponse: function() {}\n                });\n                session.status = C.STATUS_EARLY_MEDIA;\n                session.mute();\n                session.emit('progress', response);\n                /*\n                if (session.status === C.STATUS_EARLY_MEDIA) {\n                  localMedia = session.mediaHandler.localMedia;\n                  if (localMedia.getAudioTracks().length > 0) {\n                    localMedia.getAudioTracks()[0].enabled = false;\n                  }\n                  if (localMedia.getVideoTracks().length > 0) {\n                    localMedia.getVideoTracks()[0].enabled = false;\n                  }\n                }*/\n              },\n              /*\n               * onFailure\n               * SDP Answer does not fit the Offer. Accept the call and Terminate.\n               */\n              function(e) {\n                session.logger.warn(e);\n                session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              }\n            );\n          } else {\n            this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n            this.earlyDialogs[id].mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.earlyDialogs[id].mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    extraHeaders.push('Content-Type: application/sdp');\n                    extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));\n                    session.earlyDialogs[id].sendRequest(session, SIP.C.PRACK, {\n                      extraHeaders: extraHeaders,\n                      body: sdp\n                    });\n                    session.status = C.STATUS_EARLY_MEDIA;\n                    session.emit('progress', response);\n                  },\n                  function onFailure() {\n                    session.earlyDialogs[id].pracked.push(response.getHeader('rseq'));\n                    if (session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n                    // TODO - fail out on error\n                    // session.failed(gum error);\n                    session.failed(null, SIP.C.causes.WEBRTC_ERROR);\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.earlyDialogs[id].pracked.splice(session.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')), 1);\n                // Could not set remote description\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n              }\n            );\n          }\n        } else {\n          this.emit('progress', response);\n        }\n        break;\n      case /^2[0-9]{2}$/.test(response.status_code):\n        var cseq = this.request.cseq + ' ' + this.request.method;\n        if (cseq !== response.getHeader('cseq')) {\n          break;\n        }\n\n        if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {\n          this.status = C.STATUS_CONFIRMED;\n          this.unmute();\n          /*localMedia = this.mediaHandler.localMedia;\n          if (localMedia.getAudioTracks().length > 0) {\n            localMedia.getAudioTracks()[0].enabled = true;\n          }\n          if (localMedia.getVideoTracks().length > 0) {\n            localMedia.getVideoTracks()[0].enabled = true;\n          }*/\n          options = {};\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + this.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          options.cseq = response.cseq;\n          this.sendRequest(SIP.C.ACK, options);\n          this.accepted(response);\n          break;\n        }\n        // Do nothing if this.dialog is already confirmed\n        if (this.dialog) {\n          break;\n        }\n\n        SIP.Hacks.Firefox.cannotHandleExtraWhitespace(response);\n        SIP.Hacks.AllBrowsers.maskDtls(response);\n\n        // This is an invite without sdp\n        if (!this.hasOffer) {\n          if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {\n            //REVISIT\n            this.hasOffer = true;\n            this.hasAnswer = true;\n            this.mediaHandler = this.earlyDialogs[id].mediaHandler;\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.status = C.STATUS_CONFIRMED;\n            this.sendRequest(SIP.C.ACK, {cseq:response.cseq});\n\n            this.unmute();\n            /*\n            localMedia = session.mediaHandler.localMedia;\n            if (localMedia.getAudioTracks().length > 0) {\n              localMedia.getAudioTracks()[0].enabled = true;\n            }\n            if (localMedia.getVideoTracks().length > 0) {\n              localMedia.getVideoTracks()[0].enabled = true;\n            }*/\n            this.accepted(response);\n          } else {\n            if(!response.body) {\n              this.acceptAndTerminate(response, 400, 'Missing session description');\n              this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n              break;\n            }\n            if (!this.createDialog(response, 'UAC')) {\n              break;\n            }\n            this.hasOffer = true;\n            this.mediaHandler.setDescription(\n              response.body,\n              function onSuccess() {\n                session.mediaHandler.getDescription(\n                  function onSuccess(sdp) {\n                    //var localMedia;\n                    if(session.isCanceled || session.status === C.STATUS_TERMINATED) {\n                      return;\n                    }\n\n                    sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);\n\n                    session.status = C.STATUS_CONFIRMED;\n                    session.hasAnswer = true;\n\n                    session.unmute();\n                    /*localMedia = session.mediaHandler.localMedia;\n                    if (localMedia.getAudioTracks().length > 0) {\n                      localMedia.getAudioTracks()[0].enabled = true;\n                    }\n                    if (localMedia.getVideoTracks().length > 0) {\n                      localMedia.getVideoTracks()[0].enabled = true;\n                    }*/\n                    session.sendRequest(SIP.C.ACK,{\n                      body: sdp,\n                      extraHeaders:['Content-Type: application/sdp'],\n                      cseq:response.cseq\n                    });\n                    session.accepted(response);\n                  },\n                  function onFailure() {\n                    // TODO do something here\n                    session.logger.warn(\"there was a problem\");\n                  },\n                  session.mediaHint\n                );\n              },\n              function onFailure(e) {\n                session.logger.warn('invalid SDP');\n                session.logger.warn(e);\n                response.reply(488);\n              }\n            );\n          }\n        } else if (this.hasAnswer){\n          if (this.renderbody) {\n            extraHeaders.push('Content-Type: ' + session.rendertype);\n            options.extraHeaders = extraHeaders;\n            options.body = this.renderbody;\n          }\n          this.sendRequest(SIP.C.ACK, options);\n        } else {\n          if(!response.body) {\n            this.acceptAndTerminate(response, 400, 'Missing session description');\n            this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            break;\n          }\n          if (!this.createDialog(response, 'UAC')) {\n            break;\n          }\n          this.hasAnswer = true;\n          this.mediaHandler.setDescription(\n            response.body,\n            /*\n             * onSuccess\n             * SDP Answer fits with Offer. Media will start\n             */\n            function() {\n              var options = {};//,localMedia;\n              session.status = C.STATUS_CONFIRMED;\n              session.unmute();\n              /*localMedia = session.mediaHandler.localMedia;\n              if (localMedia.getAudioTracks().length > 0) {\n                localMedia.getAudioTracks()[0].enabled = true;\n              }\n              if (localMedia.getVideoTracks().length > 0) {\n                localMedia.getVideoTracks()[0].enabled = true;\n              }*/\n              if (session.renderbody) {\n                extraHeaders.push('Content-Type: ' + session.rendertype);\n                options.extraHeaders = extraHeaders;\n                options.body = session.renderbody;\n              }\n              options.cseq = response.cseq;\n              session.sendRequest(SIP.C.ACK, options);\n              session.accepted(response);\n            },\n            /*\n             * onFailure\n             * SDP Answer does not fit the Offer. Accept the call and Terminate.\n             */\n            function(e) {\n              session.logger.warn(e);\n              session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n              session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n            }\n          );\n        }\n        break;\n      default:\n        cause = SIP.Utils.sipErrorCause(response.status_code);\n        this.failed(response, cause);\n        this.rejected(response, cause);\n    }\n  },\n\n  cancel: function(options) {\n    options = options || {};\n\n    var\n    statusCode = options.status_code,\n    reasonPhrase = options.reasonPhrase,\n    cancel_reason;\n\n    // Check Session Status\n    if (this.status === C.STATUS_TERMINATED) {\n      throw new SIP.Exceptions.InvalidStateError(this.status);\n    }\n\n    this.logger.log('canceling RTCSession');\n\n    if (statusCode && (statusCode < 200 || statusCode >= 700)) {\n      throw new TypeError('Invalid status_code: '+ statusCode);\n    } else if (statusCode) {\n      reasonPhrase = reasonPhrase || SIP.C.REASON_PHRASE[statusCode] || '';\n      cancel_reason = 'SIP ;cause=' + statusCode + ' ;text=\"' + reasonPhrase + '\"';\n    }\n\n    // Check Session Status\n    if (this.status === C.STATUS_NULL ||\n        (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {\n      this.isCanceled = true;\n      this.cancelReason = cancel_reason;\n    } else if (this.status === C.STATUS_INVITE_SENT ||\n               this.status === C.STATUS_1XX_RECEIVED ||\n               this.status === C.STATUS_EARLY_MEDIA) {\n      this.request.cancel(cancel_reason);\n    }\n\n    return this.canceled();\n  },\n\n  terminate: function(options) {\n    if (this.status === C.STATUS_TERMINATED) {\n      return this;\n    }\n\n    if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {\n      this.bye(options);\n    } else {\n      this.cancel(options);\n    }\n\n    return this.terminated();\n  },\n\n  receiveRequest: function(request) {\n    // ICC RECEIVE REQUEST\n\n    // Reject CANCELs\n    if (request.method === SIP.C.CANCEL) {\n      // TODO; make this a switch when it gets added\n    }\n\n    if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {\n      SIP.Timers.clearTimeout(this.timers.ackTimer);\n      SIP.Timers.clearTimeout(this.timers.invite2xxTimer);\n      this.status = C.STATUS_CONFIRMED;\n      this.unmute();\n\n      this.accepted();\n    }\n\n    return Session.prototype.receiveRequest.apply(this, [request]);\n  }\n};\n\nSIP.InviteClientContext = InviteClientContext;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Session.js\n ** module id = 25\n ** module chunks = 0\n **/","\n/**\n * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)\n */\n\n/**\n * @augments SIP\n * @class Class creating a SIP Subscription.\n */\nmodule.exports = function (SIP) {\nSIP.Subscription = function (ua, target, event, options) {\n  var events;\n\n  options = options || {};\n  options.extraHeaders = (options.extraHeaders || []).slice();\n\n  events = ['notify'];\n  this.id = null;\n  this.state = 'init';\n\n  if (!event) {\n    throw new TypeError('Event necessary to create a subscription.');\n  } else {\n    //TODO: check for valid events here probably make a list in SIP.C; or leave it up to app to check?\n    //The check may need to/should probably occur on the other side,\n    this.event = event;\n  }\n\n  if(typeof options.expires !== 'number'){\n    ua.logger.warn('expires must be a number. Using default of 3600.');\n    this.expires = 3600;\n  } else {\n    this.expires = options.expires;\n  }\n\n  options.extraHeaders.push('Event: ' + this.event);\n  options.extraHeaders.push('Expires: ' + this.expires);\n\n  if (options.body) {\n    this.body = options.body;\n  }\n\n  this.contact = ua.contact.toString();\n\n  options.extraHeaders.push('Contact: '+ this.contact);\n  options.extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(ua));\n\n  SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);\n\n  this.logger = ua.getLogger('sip.subscription');\n\n  this.dialog = null;\n  this.timers = {N: null, sub_duration: null};\n  this.errorCodes  = [404,405,410,416,480,481,482,483,484,485,489,501,604];\n\n  this.initMoreEvents(events);\n};\n\nSIP.Subscription.prototype = {\n  subscribe: function() {\n    var sub = this;\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n\n    this.state = 'notify_wait';\n\n    return this;\n  },\n\n  receiveResponse: function(response) {\n    var expires, sub = this,\n        cause = SIP.C.REASON_PHRASE[response.status_code] || '';\n\n    if (this.errorCodes.indexOf(response.status_code) !== -1) {\n      this.failed(response, null);\n    } else if (/^2[0-9]{2}$/.test(response.status_code)){\n      expires = response.getHeader('Expires');\n      SIP.Timers.clearTimeout(this.timers.N);\n\n      if (this.createConfirmedDialog(response,'UAC')) {\n        this.id = this.dialog.id.toString();\n        this.ua.subscriptions[this.id] = this;\n        this.emit('accepted', response, cause);\n        // UPDATE ROUTE SET TO BE BACKWARDS COMPATIBLE?\n      }\n\n      if (expires && expires <= this.expires) {\n        this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), expires * 1000);\n      } else {\n        if (!expires) {\n          this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');\n          this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);\n        } else {\n          this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');\n          this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);\n        }\n      }\n    } //Used to just ignore provisional responses; now ignores everything except errorCodes and 2xx\n  },\n\n  unsubscribe: function() {\n    var extraHeaders = [], sub = this;\n\n    this.state = 'terminated';\n\n    extraHeaders.push('Event: ' + this.event);\n    extraHeaders.push('Expires: 0');\n\n    extraHeaders.push('Contact: '+ this.contact);\n    extraHeaders.push('Allow: '+ SIP.Utils.getAllowedMethods(this.ua));\n\n    this.request = new SIP.OutgoingRequest(this.method, this.request.to.uri.toString(), this.ua, null, extraHeaders);\n\n    //MAYBE, may want to see state\n    this.receiveResponse = function(){};\n\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n    SIP.Timers.clearTimeout(this.timers.N);\n    this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);\n\n    this.send();\n  },\n\n  /**\n  * @private\n  */\n  timer_fire: function(){\n    if (this.state === 'terminated') {\n      this.close();\n    } else if (this.state === 'pending' || this.state === 'notify_wait') {\n      this.state = 'terminated';\n      this.close();\n    } else {\n      this.subscribe();\n    }\n  },\n\n  /**\n  * @private\n  */\n  close: function() {\n    if(this.state !== 'terminated') {\n      this.unsubscribe();\n    }\n\n    this.terminateDialog();\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    delete this.ua.subscriptions[this.id];\n  },\n\n  /**\n  * @private\n  */\n  createConfirmedDialog: function(message, type) {\n    var dialog;\n\n    this.terminateDialog();\n    dialog = new SIP.Dialog(this, message, type);\n\n    if(!dialog.error) {\n      this.dialog = dialog;\n      return true;\n    }\n    // Dialog not created due to an error\n    else {\n      return false;\n    }\n  },\n\n  /**\n  * @private\n  */\n  terminateDialog: function() {\n    if(this.dialog) {\n      delete this.ua.subscriptions[this.id];\n      this.dialog.terminate();\n      delete this.dialog;\n    }\n  },\n\n  /**\n  * @private\n  */\n  receiveRequest: function(request) {\n    var sub_state, sub = this;\n\n    function setExpiresTimeout() {\n      if (sub_state.expires) {\n        sub_state.expires = Math.min(sub.expires,\n                                     Math.max(sub_state.expires, 0));\n        sub.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub),\n                                                    sub_state.expires * 1000);\n      }\n    }\n\n    if (!this.matchEvent(request)) { //checks event and subscription_state headers\n      request.reply(489);\n      return;\n    }\n\n    sub_state = request.parseHeader('Subscription-State');\n\n    request.reply(200, SIP.C.REASON_200);\n\n    SIP.Timers.clearTimeout(this.timers.N);\n    SIP.Timers.clearTimeout(this.timers.sub_duration);\n\n    this.emit('notify', {request: request});\n\n    switch (sub_state.state) {\n      case 'active':\n        this.state = 'active';\n        setExpiresTimeout();\n        break;\n      case 'pending':\n        if (this.state === 'notify_wait') {\n          setExpiresTimeout();\n        }\n        this.state = 'pending';\n        break;\n      case 'terminated':\n        if (sub_state.reason) {\n          this.logger.log('terminating subscription with reason '+ sub_state.reason);\n          switch (sub_state.reason) {\n            case 'deactivated':\n            case 'timeout':\n              this.subscribe();\n              return;\n            case 'probation':\n            case 'giveup':\n              if(sub_state.params && sub_state.params['retry-after']) {\n                this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);\n              } else {\n                this.subscribe();\n              }\n              return;\n            case 'rejected':\n            case 'noresource':\n            case 'invariant':\n              break;\n          }\n        }\n        this.close();\n        break;\n    }\n  },\n\n  failed: function(response, cause) {\n    this.close();\n    return this.emit('failed', response, cause);\n  },\n\n  /**\n  * @private\n  */\n  matchEvent: function(request) {\n    var event;\n\n    // Check mandatory header Event\n    if (!request.hasHeader('Event')) {\n      this.logger.warn('missing Event header');\n      return false;\n    }\n    // Check mandatory header Subscription-State\n    if (!request.hasHeader('Subscription-State')) {\n      this.logger.warn('missing Subscription-State header');\n      return false;\n    }\n\n    // Check whether the event in NOTIFY matches the event in SUBSCRIBE\n    event = request.parseHeader('event').event;\n\n    if (this.event !== event) {\n      this.logger.warn('event match failed');\n      request.reply(481, 'Event Match Failed');\n      return false;\n    } else {\n      return true;\n    }\n  }\n};\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Subscription.js\n ** module id = 26\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaHandler\n */\n\n/* MediaHandler\n * @class PeerConnection helper Class.\n * @param {SIP.Session} session\n * @param {Object} [options]\n * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]\n *        The MediaStreamManager to acquire/release streams from/to.\n *        If not provided, a default MediaStreamManager will be used.\n */\nmodule.exports = function (SIP) {\n\nvar MediaHandler = function(session, options) {\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed',\n    'iceGathering',\n    'iceCandidate',\n    'iceComplete',\n    'iceFailed',\n    'getDescription',\n    'setDescription',\n    'dataChannel',\n    'addStream'\n  ];\n  options = options || {};\n\n  this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);\n  this.session = session;\n  this.localMedia = null;\n  this.ready = true;\n  this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);\n  this.audioMuted = false;\n  this.videoMuted = false;\n\n  // old init() from here on\n  var idx, length, server,\n    self = this,\n    servers = [],\n    stunServers = options.stunServers || null,\n    turnServers = options.turnServers || null,\n    config = this.session.ua.configuration;\n  this.RTCConstraints = options.RTCConstraints || {};\n\n  if (!stunServers) {\n    stunServers = config.stunServers;\n  }\n\n  if(!turnServers) {\n    turnServers = config.turnServers;\n  }\n\n  /* Change 'url' to 'urls' whenever this issue is solved:\n   * https://code.google.com/p/webrtc/issues/detail?id=2096\n   */\n  [].concat(stunServers).forEach(function (server) {\n    servers.push({'url': server});\n  });\n\n  length = turnServers.length;\n  for (idx = 0; idx < length; idx++) {\n    server = turnServers[idx];\n    servers.push({\n      'url': server.urls,\n      'username': server.username,\n      'credential': server.password\n    });\n  }\n\n  this.peerConnection = new SIP.WebRTC.RTCPeerConnection({'iceServers': servers}, this.RTCConstraints);\n\n  this.peerConnection.onaddstream = function(e) {\n    self.logger.log('stream added: '+ e.stream.id);\n    self.render();\n    self.emit('addStream', e);\n  };\n\n  this.peerConnection.onremovestream = function(e) {\n    self.logger.log('stream removed: '+ e.stream.id);\n  };\n\n  this.peerConnection.onicecandidate = function(e) {\n    self.emit('iceCandidate', e);\n    if (e.candidate) {\n      self.logger.log('ICE candidate received: '+ (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));\n    } else if (self.onIceCompleted !== undefined) {\n      self.onIceCompleted(this);\n    } else {\n      self.callOnIceCompleted = true;\n    }\n  };\n\n  this.peerConnection.onicegatheringstatechange = function () {\n    self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);\n    if (this.iceGatheringState === 'gathering') {\n      self.emit('iceGathering', this);\n    }\n    if (this.iceGatheringState === 'complete') {\n      if (self.onIceCompleted !== undefined) {\n        self.onIceCompleted(this);\n      } else {\n        self.callOnIceCompleted = true;\n      }\n    }\n  };\n\n  this.peerConnection.oniceconnectionstatechange = function() {  //need e for commented out case\n    self.logger.log('ICE connection state changed to \"'+ this.iceConnectionState +'\"');\n\n    if (this.iceConnectionState === 'failed') {\n      self.emit('iceFailed', this);\n    }\n\n    //Bria state changes are always connected -> disconnected -> connected on accept, so session gets terminated\n    //normal calls switch from failed to connected in some cases, so checking for failed and terminated\n    /*if (this.iceConnectionState === 'failed') {\n      self.session.terminate({\n        cause: SIP.C.causes.RTP_TIMEOUT,\n        status_code: 200,\n        reason_phrase: SIP.C.causes.RTP_TIMEOUT\n      });\n    } else if (e.currentTarget.iceGatheringState === 'complete' && this.iceConnectionState !== 'closed') {\n      self.onIceCompleted(this);\n    }*/\n  };\n\n  this.peerConnection.onstatechange = function() {\n    self.logger.log('PeerConnection state changed to \"'+ this.readyState +'\"');\n  };\n\n  this.initEvents(events);\n\n  function selfEmit(mh, event) {\n    if (mh.mediaStreamManager.on &&\n        mh.mediaStreamManager.checkEvent &&\n        mh.mediaStreamManager.checkEvent(event)) {\n      mh.mediaStreamManager.on(event, function () {\n        mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));\n      });\n    }\n  }\n\n  selfEmit(this, 'userMediaRequest');\n  selfEmit(this, 'userMedia');\n  selfEmit(this, 'userMediaFailed');\n};\n\nMediaHandler.defaultFactory = function defaultFactory (session, options) {\n  return new MediaHandler(session, options);\n};\nMediaHandler.defaultFactory.isSupported = function () {\n  return SIP.WebRTC.isSupported();\n};\n\nMediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {\n// Functions the session can use\n  isReady: {writable: true, value: function isReady () {\n    return this.ready;\n  }},\n\n  close: {writable: true, value: function close () {\n    this.logger.log('closing PeerConnection');\n    // have to check signalingState since this.close() gets called multiple times\n    // TODO figure out why that happens\n    if(this.peerConnection && this.peerConnection.signalingState !== 'closed') {\n      this.peerConnection.close();\n\n      if(this.localMedia) {\n        this.mediaStreamManager.release(this.localMedia);\n      }\n    }\n  }},\n\n  /**\n   * @param {Function} onSuccess\n   * @param {Function} onFailure\n   * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]\n   *        the MediaStream (or the constraints describing it) to be used for the session\n   */\n  getDescription: {writable: true, value: function getDescription (onSuccess, onFailure, mediaHint) {\n    var self = this;\n    mediaHint = mediaHint || {};\n    if (mediaHint.dataChannel === true) {\n      mediaHint.dataChannel = {};\n    }\n    this.mediaHint = mediaHint;\n\n    /*\n     * 1. acquire stream (skip if MediaStream passed in)\n     * 2. addStream\n     * 3. createOffer/createAnswer\n     * 4. call onSuccess()\n     */\n\n    /* Last functions first, to quiet JSLint */\n    function streamAdditionSucceeded() {\n      if (self.hasOffer('remote')) {\n        self.peerConnection.ondatachannel = function (evt) {\n          self.dataChannel = evt.channel;\n          self.emit('dataChannel', self.dataChannel);\n        };\n      } else if (mediaHint.dataChannel &&\n                 self.peerConnection.createDataChannel) {\n        self.dataChannel = self.peerConnection.createDataChannel(\n          'sipjs',\n          mediaHint.dataChannel\n        );\n        self.emit('dataChannel', self.dataChannel);\n      }\n\n      self.render();\n      self.createOfferOrAnswer(onSuccess, onFailure, self.RTCConstraints);\n    }\n\n    function acquireSucceeded(stream) {\n      self.logger.log('acquired local media stream');\n      self.localMedia = stream;\n      self.session.connecting();\n      self.addStream(\n        stream,\n        streamAdditionSucceeded,\n        onFailure\n      );\n    }\n\n    if (self.localMedia) {\n      self.logger.log('already have local media');\n      streamAdditionSucceeded();\n      return;\n    }\n\n    self.logger.log('acquiring local media');\n    self.mediaStreamManager.acquire(\n      acquireSucceeded,\n      function acquireFailed(err) {\n        self.logger.error('unable to acquire stream');\n        self.logger.error(err);\n        self.session.connecting();\n        onFailure(err);\n      },\n      mediaHint\n    );\n  }},\n\n  /**\n  * Message reception.\n  * @param {String} type\n  * @param {String} sdp\n  * @param {Function} onSuccess\n  * @param {Function} onFailure\n  */\n  setDescription: {writable: true, value: function setDescription (sdp, onSuccess, onFailure) {\n    var rawDescription = {\n      type: this.hasOffer('local') ? 'answer' : 'offer',\n      sdp: sdp\n    };\n\n    this.emit('setDescription', rawDescription);\n\n    var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);\n    this.peerConnection.setRemoteDescription(description, onSuccess, onFailure);\n  }},\n\n// Functions the session can use, but only because it's convenient for the application\n  isMuted: {writable: true, value: function isMuted () {\n    return {\n      audio: this.audioMuted,\n      video: this.videoMuted\n    };\n  }},\n\n  mute: {writable: true, value: function mute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioMuted = false,\n        videoMuted = false;\n\n    if (options.audio && !this.audioMuted) {\n      audioMuted = true;\n      this.audioMuted = true;\n      this.toggleMuteAudio(true);\n    }\n\n    if (options.video && !this.videoMuted) {\n      videoMuted = true;\n      this.videoMuted = true;\n      this.toggleMuteVideo(true);\n    }\n\n    //REVISIT\n    if (audioMuted || videoMuted) {\n      return {\n        audio: audioMuted,\n        video: videoMuted\n      };\n      /*this.session.onmute({\n        audio: audioMuted,\n        video: videoMuted\n      });*/\n    }\n  }},\n\n  unmute: {writable: true, value: function unmute (options) {\n    if (this.getLocalStreams().length === 0) {\n      return;\n    }\n\n    options = options || {\n      audio: this.getLocalStreams()[0].getAudioTracks().length > 0,\n      video: this.getLocalStreams()[0].getVideoTracks().length > 0\n    };\n\n    var audioUnMuted = false,\n        videoUnMuted = false;\n\n    if (options.audio && this.audioMuted) {\n      audioUnMuted = true;\n      this.audioMuted = false;\n      this.toggleMuteAudio(false);\n    }\n\n    if (options.video && this.videoMuted) {\n      videoUnMuted = true;\n      this.videoMuted = false;\n      this.toggleMuteVideo(false);\n    }\n\n    //REVISIT\n    if (audioUnMuted || videoUnMuted) {\n      return {\n        audio: audioUnMuted,\n        video: videoUnMuted\n      };\n      /*this.session.onunmute({\n        audio: audioUnMuted,\n        video: videoUnMuted\n      });*/\n    }\n  }},\n\n  hold: {writable: true, value: function hold () {\n    this.toggleMuteAudio(true);\n    this.toggleMuteVideo(true);\n  }},\n\n  unhold: {writable: true, value: function unhold () {\n    if (!this.audioMuted) {\n      this.toggleMuteAudio(false);\n    }\n\n    if (!this.videoMuted) {\n      this.toggleMuteVideo(false);\n    }\n  }},\n\n// Functions the application can use, but not the session\n  getLocalStreams: {writable: true, value: function getLocalStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getLocalStreams returning []');\n      return [];\n    }\n    return (pc.getLocalStreams && pc.getLocalStreams()) ||\n      pc.localStreams || [];\n  }},\n\n  getRemoteStreams: {writable: true, value: function getRemoteStreams () {\n    var pc = this.peerConnection;\n    if (pc && pc.signalingState === 'closed') {\n      this.logger.warn('peerConnection is closed, getRemoteStreams returning []');\n      return [];\n    }\n    return(pc.getRemoteStreams && pc.getRemoteStreams()) ||\n      pc.remoteStreams || [];\n  }},\n\n  render: {writable: true, value: function render (renderHint) {\n    renderHint = renderHint || (this.mediaHint && this.mediaHint.render);\n    if (!renderHint) {\n      return false;\n    }\n    var streamGetters = {\n      local: 'getLocalStreams',\n      remote: 'getRemoteStreams'\n    };\n    Object.keys(streamGetters).forEach(function (loc) {\n      var streamGetter = streamGetters[loc];\n      var streams = this[streamGetter]();\n      if (streams.length) {\n        SIP.WebRTC.MediaStreamManager.render(streams[0], renderHint[loc]);\n      }\n    }.bind(this));\n  }},\n\n// Internal functions\n  hasOffer: {writable: true, value: function hasOffer (where) {\n    var offerState = 'have-' + where + '-offer';\n    return this.peerConnection.signalingState === offerState;\n    // TODO consider signalingStates with 'pranswer'?\n  }},\n\n  createOfferOrAnswer: {writable: true, value: function createOfferOrAnswer (onSuccess, onFailure, constraints) {\n    var self = this;\n    var methodName;\n\n    function readySuccess () {\n      var sdp = self.peerConnection.localDescription.sdp;\n\n      sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);\n      sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);\n      sdp = SIP.Hacks.Firefox.hasIncompatibleCLineWithSomeSIPEndpoints(sdp);\n\n      var sdpWrapper = {\n        type: methodName === 'createOffer' ? 'offer' : 'answer',\n        sdp: sdp\n      };\n\n      self.emit('getDescription', sdpWrapper);\n\n      self.ready = true;\n      onSuccess(sdpWrapper.sdp);\n    }\n\n    function onSetLocalDescriptionSuccess() {\n      if (self.peerConnection.iceGatheringState === 'complete' && (self.peerConnection.iceConnectionState === 'connected' || self.peerConnection.iceConnectionState === 'completed')) {\n        readySuccess();\n      } else {\n        self.onIceCompleted = function(pc) {\n          self.logger.log('ICE Gathering Completed');\n          self.onIceCompleted = undefined;\n          self.emit('iceComplete', pc);\n          readySuccess();\n        };\n        if (self.callOnIceCompleted) {\n          self.onIceCompleted();\n        }\n      }\n    }\n\n    function methodFailed (methodName, e) {\n      self.logger.error('peerConnection.' + methodName + ' failed');\n      self.logger.error(e);\n      self.ready = true;\n      onFailure(e);\n    }\n\n    self.ready = false;\n\n    methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';\n\n    self.peerConnection[methodName](\n      function(sessionDescription){\n        self.peerConnection.setLocalDescription(\n          sessionDescription,\n          onSetLocalDescriptionSuccess,\n          methodFailed.bind(null, 'setLocalDescription')\n        );\n      },\n      methodFailed.bind(null, methodName),\n      constraints\n    );\n  }},\n\n  addStream: {writable: true, value: function addStream (stream, onSuccess, onFailure) {\n    try {\n      this.peerConnection.addStream(stream);\n    } catch(e) {\n      this.logger.error('error adding stream');\n      this.logger.error(e);\n      onFailure(e);\n      return;\n    }\n\n    onSuccess();\n  }},\n\n  toggleMuteHelper: {writable: true, value: function toggleMuteHelper (trackGetter, mute) {\n    this.getLocalStreams().forEach(function (stream) {\n      stream[trackGetter]().forEach(function (track) {\n        track.enabled = !mute;\n      });\n    });\n  }},\n\n  toggleMuteAudio: {writable: true, value: function toggleMuteAudio (mute) {\n    this.toggleMuteHelper('getAudioTracks', mute);\n  }},\n\n  toggleMuteVideo: {writable: true, value: function toggleMuteVideo (mute) {\n    this.toggleMuteHelper('getVideoTracks', mute);\n  }}\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaHandler;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC/MediaHandler.js\n ** module id = 27\n ** module chunks = 0\n **/","/**\n * @fileoverview MediaStreamManager\n */\n\n/* MediaStreamManager\n * @class Manages the acquisition and release of MediaStreams.\n * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()\n */\nmodule.exports = function (SIP) {\n\n// Default MediaStreamManager provides single-use streams created with getUserMedia\nvar MediaStreamManager = function MediaStreamManager (logger, defaultMediaHint) {\n  if (!SIP.WebRTC.isSupported()) {\n    throw new SIP.Exceptions.NotSupportedError('Media not supported');\n  }\n\n  var events = [\n    'userMediaRequest',\n    'userMedia',\n    'userMediaFailed'\n  ];\n  this.mediaHint = defaultMediaHint || {\n    constraints: {audio: true, video: true}\n  };\n\n  this.logger = logger;\n  this.initEvents(events);\n\n  // map of streams to acquisition manner:\n  // true -> passed in as mediaHint.stream\n  // false -> getUserMedia\n  this.acquisitions = {};\n};\nMediaStreamManager.streamId = function (stream) {\n  return stream.getAudioTracks().concat(stream.getVideoTracks())\n    .map(function trackId (track) {\n      return track.id;\n    })\n    .join('');\n};\n\nMediaStreamManager.render = function render (stream, elements) {\n  if (!elements) {\n    return false;\n  }\n\n  function attachAndPlay (element, stream) {\n    (window.attachMediaStream || attachMediaStream)(element, stream);\n    ensureMediaPlaying(element);\n  }\n\n  function attachMediaStream(element, stream) {\n    if (typeof element.src !== 'undefined') {\n      URL.revokeObjectURL(element.src);\n      element.src = URL.createObjectURL(stream);\n    } else if (typeof (element.srcObject || element.mozSrcObject) !== 'undefined') {\n      element.srcObject = element.mozSrcObject = stream;\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ensureMediaPlaying (mediaElement) {\n    var interval = 100;\n    mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {\n      if (mediaElement.paused) {\n        mediaElement.play();\n      }\n      else {\n        SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);\n      }\n    }, interval);\n  }\n\n  if (elements.video) {\n    if (elements.audio) {\n      elements.video.volume = 0;\n    }\n    attachAndPlay(elements.video, stream);\n  }\n  if (elements.audio) {\n    attachAndPlay(elements.audio, stream);\n  }\n};\n\nMediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {\n  'acquire': {value: function acquire (onSuccess, onFailure, mediaHint) {\n    mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;\n\n    var saveSuccess = function (onSuccess, stream, isHintStream) {\n      var streamId = MediaStreamManager.streamId(stream);\n      this.acquisitions[streamId] = !!isHintStream;\n      onSuccess(stream);\n    }.bind(this, onSuccess);\n\n    if (mediaHint.stream) {\n      saveSuccess(mediaHint.stream, true);\n    } else {\n      // Fallback to audio/video enabled if no mediaHint can be found.\n      var constraints = mediaHint.constraints ||\n        (this.mediaHint && this.mediaHint.constraints) ||\n        {audio: true, video: true};\n\n      /*\n       * Make the call asynchronous, so that ICCs have a chance\n       * to define callbacks to `userMediaRequest`\n       */\n      SIP.Timers.setTimeout(function () {\n        this.emit('userMediaRequest', constraints);\n\n        var emitThenCall = function (eventName, callback) {\n          var callbackArgs = Array.prototype.slice.call(arguments, 2);\n          // Emit with all of the arguments from the real callback.\n          var newArgs = [eventName].concat(callbackArgs);\n\n          this.emit.apply(this, newArgs);\n\n          callback.apply(null, callbackArgs);\n        }.bind(this);\n\n        SIP.WebRTC.getUserMedia(\n          constraints,\n          emitThenCall.bind(this, 'userMedia', saveSuccess),\n          emitThenCall.bind(this, 'userMediaFailed', onFailure)\n        );\n      }.bind(this), 0);\n    }\n  }},\n\n  'release': {value: function release (stream) {\n    var streamId = MediaStreamManager.streamId(stream);\n    if (this.acquisitions[streamId] === false) {\n      stream.stop();\n    }\n    delete this.acquisitions[streamId];\n  }},\n});\n\n// Return since it will be assigned to a variable.\nreturn MediaStreamManager;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC/MediaStreamManager.js\n ** module id = 28\n ** module chunks = 0\n **/","/**\n * @fileoverview WebRTC\n */\n\nmodule.exports = function (Utils, window, MediaHandler, MediaStreamManager) {\nvar WebRTC;\n\nWebRTC = {};\n\nWebRTC.MediaHandler = MediaHandler;\nWebRTC.MediaStreamManager = MediaStreamManager;\n\nvar _isSupported;\n\nWebRTC.isSupported = function () {\n  if (_isSupported !== undefined) {\n    return _isSupported;\n  }\n\n  WebRTC.MediaStream = Utils.getPrefixedProperty(window, 'MediaStream');\n  WebRTC.getUserMedia = Utils.getPrefixedProperty(window.navigator, 'getUserMedia');\n  WebRTC.RTCPeerConnection = Utils.getPrefixedProperty(window, 'RTCPeerConnection');\n  WebRTC.RTCSessionDescription = Utils.getPrefixedProperty(window, 'RTCSessionDescription');\n\n  if (WebRTC.getUserMedia && WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {\n    WebRTC.getUserMedia = WebRTC.getUserMedia.bind(window.navigator);\n    _isSupported = true;\n  }\n  else {\n    _isSupported = false;\n  }\n  return _isSupported;\n};\n\nreturn WebRTC;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/WebRTC.js\n ** module id = 29\n ** module chunks = 0\n **/","/**\n * @augments SIP\n * @class Class creating a SIP User Agent.\n * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]\n *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.\n *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.\n *\n * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n */\nmodule.exports = function (SIP) {\nvar UA,\n  C = {\n    // UA status codes\n    STATUS_INIT :                0,\n    STATUS_READY:                1,\n    STATUS_USER_CLOSED:          2,\n    STATUS_NOT_READY:            3,\n\n    // UA error codes\n    CONFIGURATION_ERROR:  1,\n    NETWORK_ERROR:        2,\n\n    /* UA events and corresponding SIP Methods.\n     * Dynamically added to 'Allow' header field if the\n     * corresponding event handler is set.\n     */\n    EVENT_METHODS: {\n      'invite': 'INVITE',\n      'message': 'MESSAGE'\n    },\n\n    ALLOWED_METHODS: [\n      'ACK',\n      'CANCEL',\n      'BYE',\n      'OPTIONS',\n      'INFO',\n      'NOTIFY'\n    ],\n\n    ACCEPTED_BODY_TYPES: [\n      'application/sdp',\n      'application/dtmf-relay'\n    ],\n\n    MAX_FORWARDS: 70,\n    TAG_LENGTH: 10\n  };\n\nUA = function(configuration) {\n  var self = this,\n  events = [\n    'connecting',\n    'connected',\n    'disconnected',\n    'newTransaction',\n    'transactionDestroyed',\n    'registered',\n    'unregistered',\n    'registrationFailed',\n    'invite',\n    'newSession',\n    'message'\n  ], i, len;\n\n  // Helper function for forwarding events\n  function selfEmit(type) {\n    //registrationFailed handler is invoked with two arguments. Allow event handlers to be invoked with a variable no. of arguments\n    return self.emit.bind(self, type);\n  }\n\n  for (i = 0, len = C.ALLOWED_METHODS.length; i < len; i++) {\n    events.push(C.ALLOWED_METHODS[i].toLowerCase());\n  }\n\n  // Set Accepted Body Types\n  C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();\n\n  this.log = new SIP.LoggerFactory();\n  this.logger = this.getLogger('sip.ua');\n\n  this.cache = {\n    credentials: {}\n  };\n\n  this.configuration = {};\n  this.dialogs = {};\n\n  //User actions outside any session/dialog (MESSAGE)\n  this.applicants = {};\n\n  this.data = {};\n  this.sessions = {};\n  this.subscriptions = {};\n  this.transport = null;\n  this.contact = null;\n  this.status = C.STATUS_INIT;\n  this.error = null;\n  this.transactions = {\n    nist: {},\n    nict: {},\n    ist: {},\n    ict: {}\n  };\n\n  this.transportRecoverAttempts = 0;\n  this.transportRecoveryTimer = null;\n\n  Object.defineProperties(this, {\n    transactionsCount: {\n      get: function() {\n        var type,\n          transactions = ['nist','nict','ist','ict'],\n          count = 0;\n\n        for (type in transactions) {\n          count += Object.keys(this.transactions[transactions[type]]).length;\n        }\n\n        return count;\n      }\n    },\n\n    nictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nict']).length;\n      }\n    },\n\n    nistTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['nist']).length;\n      }\n    },\n\n    ictTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ict']).length;\n      }\n    },\n\n    istTransactionsCount: {\n      get: function() {\n        return Object.keys(this.transactions['ist']).length;\n      }\n    }\n  });\n\n  /**\n   * Load configuration\n   *\n   * @throws {SIP.Exceptions.ConfigurationError}\n   * @throws {TypeError}\n   */\n\n  if(configuration === undefined) {\n    configuration = {};\n  } else if (typeof configuration === 'string' || configuration instanceof String) {\n    configuration = {\n      uri: configuration\n    };\n  }\n\n  // Apply log configuration if present\n  if (configuration.log) {\n    if (configuration.log.hasOwnProperty('builtinEnabled')) {\n      this.log.builtinEnabled = configuration.log.builtinEnabled;\n    }\n\n    if (configuration.log.hasOwnProperty('level')) {\n      this.log.level = configuration.log.level;\n    }\n\n    if (configuration.log.hasOwnProperty('connector')) {\n      this.log.connector = configuration.log.connector;\n    }\n  }\n\n  try {\n    this.loadConfig(configuration);\n    this.initEvents(events);\n  } catch(e) {\n    this.status = C.STATUS_NOT_READY;\n    this.error = C.CONFIGURATION_ERROR;\n    throw e;\n  }\n\n  // Initialize registerContext\n  this.registerContext = new SIP.RegisterContext(this);\n  this.registerContext.on('failed', selfEmit('registrationFailed'));\n  this.registerContext.on('registered', selfEmit('registered'));\n  this.registerContext.on('unregistered', selfEmit('unregistered'));\n\n  if(this.configuration.autostart) {\n    this.start();\n  }\n\n  if (typeof global.addEventListener === 'function') {\n    global.addEventListener('unload', this.stop.bind(this));\n  }\n};\nUA.prototype = new SIP.EventEmitter();\n\n//=================\n//  High Level API\n//=================\n\nUA.prototype.register = function(options) {\n  this.configuration.register = true;\n  this.registerContext.register(options);\n\n  return this;\n};\n\n/**\n * Unregister.\n *\n * @param {Boolean} [all] unregister all user bindings.\n *\n */\nUA.prototype.unregister = function(options) {\n  this.configuration.register = false;\n  this.registerContext.unregister(options);\n\n  return this;\n};\n\nUA.prototype.isRegistered = function() {\n  return this.registerContext.registered;\n};\n\n/**\n * Connection state.\n * @param {Boolean}\n */\nUA.prototype.isConnected = function() {\n  return this.transport ? this.transport.connected : false;\n};\n\n/**\n * Make an outgoing call.\n *\n * @param {String} target\n * @param {Object} views\n * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.invite = function(target, options) {\n  options = options || {};\n  options = SIP.Utils.desugarSessionOptions(options);\n  SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger);\n\n  var context = new SIP.InviteClientContext(this, target, options);\n\n  if (this.isConnected()) {\n    context.invite({media: options.media});\n  } else {\n    this.once('connected', function() {\n      context.invite({media: options.media});\n    });\n  }\n  return context;\n};\n\nUA.prototype.subscribe = function(target, event, options) {\n  var sub = new SIP.Subscription(this, target, event, options);\n\n  if (this.isConnected()) {\n    sub.subscribe();\n  } else {\n    this.once('connected', function() {\n      sub.subscribe();\n    });\n  }\n  return sub;\n};\n\n/**\n * Send a message.\n *\n * @param {String} target\n * @param {String} body\n * @param {Object} [options]\n *\n * @throws {TypeError}\n *\n */\nUA.prototype.message = function(target, body, options) {\n  if (body === undefined) {\n    throw new TypeError('Not enough arguments');\n  }\n\n  options = options || {};\n  options.contentType = options.contentType || 'text/plain';\n  options.body = body;\n\n  var mes = new SIP.ClientContext(this, SIP.C.MESSAGE, target, options);\n\n  if (this.isConnected()) {\n    mes.send();\n  } else {\n    this.once('connected', function() {\n      mes.send();\n    });\n  }\n\n  return mes;\n};\n\nUA.prototype.request = function (method, target, options) {\n  var req = new SIP.ClientContext(this, method, target, options);\n\n  if (this.isConnected()) {\n    req.send();\n  } else {\n    this.once('connected', function() {\n      req.send();\n    });\n  }\n\n  return req;\n};\n\n/**\n * Gracefully close.\n *\n */\nUA.prototype.stop = function() {\n  var session, subscription, applicant,\n    ua = this;\n\n  function transactionsListener() {\n    if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {\n        ua.off('transactionDestroyed', transactionsListener);\n        ua.transport.disconnect();\n    }\n  }\n\n  this.logger.log('user requested closure...');\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.warn('UA already closed');\n    return this;\n  }\n\n  // Clear transportRecoveryTimer\n  SIP.Timers.clearTimeout(this.transportRecoveryTimer);\n\n  // Close registerContext\n  this.logger.log('closing registerContext');\n  this.registerContext.close();\n\n  // Run  _terminate_ on every Session\n  for(session in this.sessions) {\n    this.logger.log('closing session ' + session);\n    this.sessions[session].terminate();\n  }\n\n  //Run _close_ on every Subscription\n  for(subscription in this.subscriptions) {\n    this.logger.log('unsubscribing from subscription ' + subscription);\n    this.subscriptions[subscription].close();\n  }\n\n  // Run  _close_ on every applicant\n  for(applicant in this.applicants) {\n    this.applicants[applicant].close();\n  }\n\n  this.status = C.STATUS_USER_CLOSED;\n\n  /*\n   * If the remaining transactions are all INVITE transactions, there is no need to\n   * wait anymore because every session has already been closed by this method.\n   * - locally originated sessions where terminated (CANCEL or BYE)\n   * - remotely originated sessions where rejected (4XX) or terminated (BYE)\n   * Remaining INVITE transactions belong tho sessions that where answered. This are in\n   * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]\n   */\n  if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {\n    this.transport.disconnect();\n  } else {\n    this.on('transactionDestroyed', transactionsListener);\n  }\n\n  return this;\n};\n\n/**\n * Connect to the WS server if status = STATUS_INIT.\n * Resume UA after being closed.\n *\n */\nUA.prototype.start = function() {\n  var server;\n\n  this.logger.log('user requested startup...');\n  if (this.status === C.STATUS_INIT) {\n    server = this.getNextWsServer();\n    new SIP.Transport(this, server);\n  } else if(this.status === C.STATUS_USER_CLOSED) {\n    this.logger.log('resuming');\n    this.status = C.STATUS_READY;\n    this.transport.connect();\n  } else if (this.status === C.STATUS_READY) {\n    this.logger.log('UA is in READY status, not resuming');\n  } else {\n    this.logger.error('Connection is down. Auto-Recovery system is trying to connect');\n  }\n\n  return this;\n};\n\n/**\n * Normalize a string into a valid SIP request URI\n *\n * @param {String} target\n *\n * @returns {SIP.URI|undefined}\n */\nUA.prototype.normalizeTarget = function(target) {\n  return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);\n};\n\n\n//===============================\n//  Private (For internal use)\n//===============================\n\nUA.prototype.saveCredentials = function(credentials) {\n  this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};\n  this.cache.credentials[credentials.realm][credentials.uri] = credentials;\n\n  return this;\n};\n\nUA.prototype.getCredentials = function(request) {\n  var realm, credentials;\n\n  realm = request.ruri.host;\n\n  if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {\n    credentials = this.cache.credentials[realm][request.ruri];\n    credentials.method = request.method;\n  }\n\n  return credentials;\n};\n\nUA.prototype.getLogger = function(category, label) {\n  return this.log.getLogger(category, label);\n};\n\n\n//==============================\n// Event Handlers\n//==============================\n\n/**\n * Transport Close event\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportClosed = function(transport) {\n  // Run _onTransportError_ callback on every client transaction using _transport_\n  var type, idx, length,\n    client_transactions = ['nict', 'ict', 'nist', 'ist'];\n\n  transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_DISCONNECTED);\n\n  length = client_transactions.length;\n  for (type = 0; type < length; type++) {\n    for(idx in this.transactions[client_transactions[type]]) {\n      this.transactions[client_transactions[type]][idx].onTransportError();\n    }\n  }\n\n  // Close sessions if GRUU is not being used\n  if (!this.contact.pub_gruu) {\n    this.closeSessionsOnTransportError();\n  }\n\n};\n\n/**\n * Unrecoverable transport event.\n * Connection reattempt logic has been done and didn't success.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportError = function(transport) {\n  var server;\n\n  this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to '+ SIP.Transport.C.STATUS_ERROR);\n\n  // Close sessions.\n  //Mark this transport as 'down'\n  transport.server.status = SIP.Transport.C.STATUS_ERROR;\n\n  this.emit('disconnected', {\n    transport: transport\n  });\n\n  // try the next transport if the UA isn't closed\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  server = this.getNextWsServer();\n\n  if(server) {\n    new SIP.Transport(this, server);\n  }else {\n    this.closeSessionsOnTransportError();\n    if (!this.error || this.error !== C.NETWORK_ERROR) {\n      this.status = C.STATUS_NOT_READY;\n      this.error = C.NETWORK_ERROR;\n    }\n    // Transport Recovery process\n    this.recoverTransport();\n  }\n};\n\n/**\n * Transport connection event.\n * @private\n * @event\n * @param {SIP.Transport} transport.\n */\nUA.prototype.onTransportConnected = function(transport) {\n  this.transport = transport;\n\n  // Reset transport recovery counter\n  this.transportRecoverAttempts = 0;\n\n  transport.server.status = SIP.Transport.C.STATUS_READY;\n  this.logger.log('connection state set to '+ SIP.Transport.C.STATUS_READY);\n\n  if(this.status === C.STATUS_USER_CLOSED) {\n    return;\n  }\n\n  this.status = C.STATUS_READY;\n  this.error = null;\n\n  if(this.configuration.register) {\n    this.registerContext.onTransportConnected();\n  }\n\n  this.emit('connected', {\n    transport: transport\n  });\n};\n\n\n/**\n * Transport connecting event\n * @private\n * @param {SIP.Transport} transport.\n * #param {Integer} attempts.\n */\n  UA.prototype.onTransportConnecting = function(transport, attempts) {\n    this.emit('connecting', {\n      transport: transport,\n      attempts: attempts\n    });\n  };\n\n\n/**\n * new Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.newTransaction = function(transaction) {\n  this.transactions[transaction.type][transaction.id] = transaction;\n  this.emit('newTransaction', {transaction: transaction});\n};\n\n\n/**\n * destroy Transaction\n * @private\n * @param {SIP.Transaction} transaction.\n */\nUA.prototype.destroyTransaction = function(transaction) {\n  delete this.transactions[transaction.type][transaction.id];\n  this.emit('transactionDestroyed', {\n    transaction: transaction\n  });\n};\n\n\n//=========================\n// receiveRequest\n//=========================\n\n/**\n * Request reception\n * @private\n * @param {SIP.IncomingRequest} request.\n */\nUA.prototype.receiveRequest = function(request) {\n  var dialog, session, message,\n    method = request.method,\n    transaction,\n    methodLower = request.method.toLowerCase(),\n    self = this;\n\n  function ruriMatches (uri) {\n    return uri && uri.user === request.ruri.user;\n  }\n\n  // Check that request URI points to us\n  if(!(ruriMatches(this.configuration.uri) ||\n       ruriMatches(this.contact.uri) ||\n       ruriMatches(this.contact.pub_gruu) ||\n       ruriMatches(this.contact.temp_gruu))) {\n    this.logger.warn('Request-URI does not point to us');\n    if (request.method !== SIP.C.ACK) {\n      request.reply_sl(404);\n    }\n    return;\n  }\n\n  // Check request URI scheme\n  if(request.ruri.scheme === SIP.C.SIPS) {\n    request.reply_sl(416);\n    return;\n  }\n\n  // Check transaction\n  if(SIP.Transactions.checkTransaction(this, request)) {\n    return;\n  }\n\n  /* RFC3261 12.2.2\n   * Requests that do not change in any way the state of a dialog may be\n   * received within a dialog (for example, an OPTIONS request).\n   * They are processed as if they had been received outside the dialog.\n   */\n  if(method === SIP.C.OPTIONS) {\n    new SIP.Transactions.NonInviteServerTransaction(request, this);\n    request.reply(200, null, [\n      'Allow: '+ SIP.Utils.getAllowedMethods(this),\n      'Accept: '+ C.ACCEPTED_BODY_TYPES\n    ]);\n  } else if (method === SIP.C.MESSAGE) {\n    if (!this.checkListener(methodLower)) {\n      // UA is not listening for this.  Reject immediately.\n      new SIP.Transactions.NonInviteServerTransaction(request, this);\n      request.reply(405, null, ['Allow: '+ SIP.Utils.getAllowedMethods(this)]);\n      return;\n    }\n    message = new SIP.ServerContext(this, request);\n    message.body = request.body;\n    message.content_type = request.getHeader('Content-Type') || 'text/plain';\n\n    request.reply(200, null);\n    this.emit('message', message);\n  } else if (method !== SIP.C.INVITE &&\n             method !== SIP.C.ACK) {\n    // Let those methods pass through to normal processing for now.\n    transaction = new SIP.ServerContext(this, request);\n  }\n\n  // Initial Request\n  if(!request.to_tag) {\n    switch(method) {\n      case SIP.C.INVITE:\n        var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;\n        if(!isMediaSupported || isMediaSupported()) {\n          session = new SIP.InviteServerContext(this, request)\n            .on('invite', function() {\n              self.emit('invite', this);\n            });\n        } else {\n          this.logger.warn('INVITE received but WebRTC is not supported');\n          request.reply(488);\n        }\n        break;\n      case SIP.C.BYE:\n        // Out of dialog BYE received\n        request.reply(481);\n        break;\n      case SIP.C.CANCEL:\n        session = this.findSession(request);\n        if(session) {\n          session.receiveRequest(request);\n        } else {\n          this.logger.warn('received CANCEL request for a non existent session');\n        }\n        break;\n      case SIP.C.ACK:\n        /* Absorb it.\n         * ACK request without a corresponding Invite Transaction\n         * and without To tag.\n         */\n        break;\n      default:\n        request.reply(405);\n        break;\n    }\n  }\n  // In-dialog request\n  else {\n    dialog = this.findDialog(request);\n\n    if(dialog) {\n      if (method === SIP.C.INVITE) {\n        new SIP.Transactions.InviteServerTransaction(request, this);\n      }\n      dialog.receiveRequest(request);\n    } else if (method === SIP.C.NOTIFY) {\n      session = this.findSession(request);\n      if(session) {\n        session.receiveRequest(request);\n      } else {\n        this.logger.warn('received NOTIFY request for a non existent session');\n        request.reply(481, 'Subscription does not exist');\n      }\n    }\n    /* RFC3261 12.2.2\n     * Request with to tag, but no matching dialog found.\n     * Exception: ACK for an Invite request for which a dialog has not\n     * been created.\n     */\n    else {\n      if(method !== SIP.C.ACK) {\n        request.reply(481);\n      }\n    }\n  }\n};\n\n//=================\n// Utils\n//=================\n\n/**\n * Get the session to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest} request.\n * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}\n */\nUA.prototype.findSession = function(request) {\n  return this.sessions[request.call_id + request.from_tag] ||\n          this.sessions[request.call_id + request.to_tag] ||\n          null;\n};\n\n/**\n * Get the dialog to which the request belongs to, if any.\n * @private\n * @param {SIP.IncomingRequest}\n * @returns {SIP.Dialog|null}\n */\nUA.prototype.findDialog = function(request) {\n  return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||\n          this.dialogs[request.call_id + request.to_tag + request.from_tag] ||\n          null;\n};\n\n/**\n * Retrieve the next server to which connect.\n * @private\n * @returns {Object} ws_server\n */\nUA.prototype.getNextWsServer = function() {\n  // Order servers by weight\n  var idx, length, ws_server,\n    candidates = [];\n\n  length = this.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ws_server = this.configuration.wsServers[idx];\n\n    if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {\n      continue;\n    } else if (candidates.length === 0) {\n      candidates.push(ws_server);\n    } else if (ws_server.weight > candidates[0].weight) {\n      candidates = [ws_server];\n    } else if (ws_server.weight === candidates[0].weight) {\n      candidates.push(ws_server);\n    }\n  }\n\n  idx = Math.floor(Math.random() * candidates.length);\n\n  return candidates[idx];\n};\n\n/**\n * Close all sessions on transport error.\n * @private\n */\nUA.prototype.closeSessionsOnTransportError = function() {\n  var idx;\n\n  // Run _transportError_ for every Session\n  for(idx in this.sessions) {\n    this.sessions[idx].onTransportError();\n  }\n  // Call registerContext _onTransportClosed_\n  this.registerContext.onTransportClosed();\n};\n\nUA.prototype.recoverTransport = function(ua) {\n  var idx, length, k, nextRetry, count, server;\n\n  ua = ua || this;\n  count = ua.transportRecoverAttempts;\n\n  length = ua.configuration.wsServers.length;\n  for (idx = 0; idx < length; idx++) {\n    ua.configuration.wsServers[idx].status = 0;\n  }\n\n  server = ua.getNextWsServer();\n\n  k = Math.floor((Math.random() * Math.pow(2,count)) +1);\n  nextRetry = k * ua.configuration.connectionRecoveryMinInterval;\n\n  if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {\n    this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');\n    nextRetry = ua.configuration.connectionRecoveryMinInterval;\n    count = 0;\n  }\n\n  this.logger.log('next connection attempt in '+ nextRetry +' seconds');\n\n  this.transportRecoveryTimer = SIP.Timers.setTimeout(\n    function(){\n      ua.transportRecoverAttempts = count + 1;\n      new SIP.Transport(ua, server);\n    }, nextRetry * 1000);\n};\n\n/**\n * Configuration load.\n * @private\n * returns {Boolean}\n */\nUA.prototype.loadConfig = function(configuration) {\n  // Settings and default values\n  var parameter, value, checked_value, hostportParams, registrarServer,\n    settings = {\n      /* Host address\n      * Value to be set in Via sent_by and host part of Contact FQDN\n      */\n      viaHost: SIP.Utils.createRandomToken(12) + '.invalid',\n\n      uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),\n      wsServers: [{\n        scheme: 'WSS',\n        sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',\n        status: 0,\n        weight: 0,\n        ws_uri: 'wss://edge.sip.onsip.com'\n      }],\n\n      // Password\n      password: null,\n\n      // Registration parameters\n      registerExpires: 600,\n      register: true,\n      registrarServer: null,\n\n      // Transport related parameters\n      wsServerMaxReconnection: 3,\n      wsServerReconnectionTimeout: 4,\n\n      connectionRecoveryMinInterval: 2,\n      connectionRecoveryMaxInterval: 30,\n\n      usePreloadedRoute: false,\n\n      //string to be inserted into User-Agent request header\n      userAgentString: SIP.C.USER_AGENT,\n\n      // Session parameters\n      noAnswerTimeout: 60,\n      stunServers: ['stun:stun.l.google.com:19302'],\n      turnServers: [],\n\n      // Logging parameters\n      traceSip: false,\n\n      // Hacks\n      hackViaTcp: false,\n      hackIpInContact: false,\n      hackWssInTransport: false,\n\n      //autostarting\n      autostart: true,\n\n      //Reliable Provisional Responses\n      rel100: SIP.C.supported.UNSUPPORTED,\n\n      mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory\n    };\n\n  // Pre-Configuration\n  function aliasUnderscored (parameter, logger) {\n    var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {\n      return m[0] + '_' + m[1].toLowerCase();\n    });\n\n    if (parameter === underscored) {\n      return;\n    }\n\n    var hasParameter = configuration.hasOwnProperty(parameter);\n    if (configuration.hasOwnProperty(underscored)) {\n      logger.warn(underscored + ' is deprecated, please use ' + parameter);\n      if (hasParameter) {\n        logger.warn(parameter + ' overriding ' + underscored);\n      }\n    }\n\n    configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];\n  }\n\n  // Check Mandatory parameters\n  for(parameter in UA.configuration_check.mandatory) {\n    aliasUnderscored(parameter, this.logger);\n    if(!configuration.hasOwnProperty(parameter)) {\n      throw new SIP.Exceptions.ConfigurationError(parameter);\n    } else {\n      value = configuration[parameter];\n      checked_value = UA.configuration_check.mandatory[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);\n\n  var emptyArraysAllowed = ['stunServers', 'turnServers'];\n\n  // Check Optional parameters\n  for(parameter in UA.configuration_check.optional) {\n    aliasUnderscored(parameter, this.logger);\n    if(configuration.hasOwnProperty(parameter)) {\n      value = configuration[parameter];\n\n      // If the parameter value is an empty array, but shouldn't be, apply its default value.\n      if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }\n\n      // If the parameter value is null, empty string, or undefined then apply its default value.\n      if(value === null || value === \"\" || value === undefined) { continue; }\n      // If it's a number with NaN value then also apply its default value.\n      // NOTE: JS does not allow \"value === NaN\", the following does the work:\n      else if(typeof(value) === 'number' && isNaN(value)) { continue; }\n\n      checked_value = UA.configuration_check.optional[parameter](value);\n      if (checked_value !== undefined) {\n        settings[parameter] = checked_value;\n      } else {\n        throw new SIP.Exceptions.ConfigurationError(parameter, value);\n      }\n    }\n  }\n\n  // Sanity Checks\n\n  // Connection recovery intervals\n  if(settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {\n    throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);\n  }\n\n  // Post Configuration Process\n\n  // Allow passing 0 number as displayName.\n  if (settings.displayName === 0) {\n    settings.displayName = '0';\n  }\n\n  // Instance-id for GRUU\n  if (!settings.instanceId) {\n    settings.instanceId = SIP.Utils.newUUID();\n  }\n\n  // sipjsId instance parameter. Static random tag of length 5\n  settings.sipjsId = SIP.Utils.createRandomToken(5);\n\n  // String containing settings.uri without scheme and user.\n  hostportParams = settings.uri.clone();\n  hostportParams.user = null;\n  settings.hostportParams = hostportParams.toString().replace(/^sip:/i, '');\n\n  /* Check whether authorizationUser is explicitly defined.\n   * Take 'settings.uri.user' value if not.\n   */\n  if (!settings.authorizationUser) {\n    settings.authorizationUser = settings.uri.user;\n  }\n\n  /* If no 'registrarServer' is set use the 'uri' value without user portion. */\n  if (!settings.registrarServer) {\n    registrarServer = settings.uri.clone();\n    registrarServer.user = null;\n    settings.registrarServer = registrarServer;\n  }\n\n  // User noAnswerTimeout\n  settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;\n\n  // Via Host\n  if (settings.hackIpInContact) {\n    settings.viaHost = SIP.Utils.getRandomTestNetIP();\n  }\n\n  this.contact = {\n    pub_gruu: null,\n    temp_gruu: null,\n    uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, {transport: ((settings.hackWssInTransport)?'wss':'ws')}),\n    toString: function(options){\n      options = options || {};\n\n      var\n        anonymous = options.anonymous || null,\n        outbound = options.outbound || null,\n        contact = '<';\n\n      if (anonymous) {\n        contact += (this.temp_gruu || ('sip:anonymous@anonymous.invalid;transport='+(settings.hackWssInTransport)?'wss':'ws')).toString();\n      } else {\n        contact += (this.pub_gruu || this.uri).toString();\n      }\n\n      if (outbound) {\n        contact += ';ob';\n      }\n\n      contact += '>';\n\n      return contact;\n    }\n  };\n\n  // media overrides mediaConstraints\n  SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);\n\n  // Fill the value of the configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = settings[parameter];\n  }\n\n  Object.defineProperties(this.configuration, UA.configuration_skeleton);\n\n  // Clean UA.configuration_skeleton\n  for(parameter in settings) {\n    UA.configuration_skeleton[parameter].value = '';\n  }\n\n  this.logger.log('configuration parameters after validation:');\n  for(parameter in settings) {\n    switch(parameter) {\n      case 'uri':\n      case 'registrarServer':\n      case 'mediaHandlerFactory':\n        this.logger.log('· ' + parameter + ': ' + settings[parameter]);\n        break;\n      case 'password':\n        this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');\n        break;\n      default:\n        this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));\n    }\n  }\n\n  return;\n};\n\n/**\n * Configuration Object skeleton.\n * @private\n */\nUA.configuration_skeleton = (function() {\n  var idx,  parameter,\n    skeleton = {},\n    parameters = [\n      // Internal parameters\n      \"sipjsId\",\n      \"hostportParams\",\n\n      // Optional user configurable parameters\n      \"uri\",\n      \"wsServers\",\n      \"authorizationUser\",\n      \"connectionRecoveryMaxInterval\",\n      \"connectionRecoveryMinInterval\",\n      \"displayName\",\n      \"hackViaTcp\", // false.\n      \"hackIpInContact\", //false\n      \"hackWssInTransport\", //false\n      \"instanceId\",\n      \"noAnswerTimeout\", // 30 seconds.\n      \"password\",\n      \"registerExpires\", // 600 seconds.\n      \"registrarServer\",\n      \"reliable\",\n      \"rel100\",\n      \"userAgentString\", //SIP.C.USER_AGENT\n      \"autostart\",\n      \"stunServers\",\n      \"traceSip\",\n      \"turnServers\",\n      \"usePreloadedRoute\",\n      \"wsServerMaxReconnection\",\n      \"wsServerReconnectionTimeout\",\n      \"mediaHandlerFactory\",\n      \"media\",\n      \"mediaConstraints\",\n\n      // Post-configuration generated parameters\n      \"via_core_value\",\n      \"viaHost\"\n    ];\n\n  for(idx in parameters) {\n    parameter = parameters[idx];\n    skeleton[parameter] = {\n      value: '',\n      writable: false,\n      configurable: false\n    };\n  }\n\n  skeleton['register'] = {\n    value: '',\n    writable: true,\n    configurable: false\n  };\n\n  return skeleton;\n}());\n\n/**\n * Configuration checker.\n * @private\n * @return {Boolean}\n */\nUA.configuration_check = {\n  mandatory: {\n  },\n\n  optional: {\n\n    uri: function(uri) {\n      var parsed;\n\n      if (!(/^sip:/i).test(uri)) {\n        uri = SIP.C.SIP + ':' + uri;\n      }\n      parsed = SIP.URI.parse(uri);\n\n      if(!parsed) {\n        return;\n      } else if(!parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    //Note: this function used to call 'this.logger.error' but calling 'this' with anything here is invalid\n    wsServers: function(wsServers) {\n      var idx, length, url;\n\n      /* Allow defining wsServers parameter as:\n       *  String: \"host\"\n       *  Array of Strings: [\"host1\", \"host2\"]\n       *  Array of Objects: [{ws_uri:\"host1\", weight:1}, {ws_uri:\"host2\", weight:0}]\n       *  Array of Objects and Strings: [{ws_uri:\"host1\"}, \"host2\"]\n       */\n      if (typeof wsServers === 'string') {\n        wsServers = [{ws_uri: wsServers}];\n      } else if (wsServers instanceof Array) {\n        length = wsServers.length;\n        for (idx = 0; idx < length; idx++) {\n          if (typeof wsServers[idx] === 'string'){\n            wsServers[idx] = {ws_uri: wsServers[idx]};\n          }\n        }\n      } else {\n        return;\n      }\n\n      if (wsServers.length === 0) {\n        return false;\n      }\n\n      length = wsServers.length;\n      for (idx = 0; idx < length; idx++) {\n        if (!wsServers[idx].ws_uri) {\n          return;\n        }\n        if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {\n          return;\n        }\n\n        url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');\n\n        if(url === -1) {\n          return;\n        } else if(url.scheme !== 'wss' && url.scheme !== 'ws') {\n          return;\n        } else {\n          wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=ws;lr>';\n\n          if (!wsServers[idx].weight) {\n            wsServers[idx].weight = 0;\n          }\n\n          wsServers[idx].status = 0;\n          wsServers[idx].scheme = url.scheme.toUpperCase();\n        }\n      }\n      return wsServers;\n    },\n\n    authorizationUser: function(authorizationUser) {\n      if(SIP.Grammar.parse('\"'+ authorizationUser +'\"', 'quoted_string') === -1) {\n        return;\n      } else {\n        return authorizationUser;\n      }\n    },\n\n    connectionRecoveryMaxInterval: function(connectionRecoveryMaxInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {\n        value = Number(connectionRecoveryMaxInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    connectionRecoveryMinInterval: function(connectionRecoveryMinInterval) {\n      var value;\n      if(SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {\n        value = Number(connectionRecoveryMinInterval);\n        if(value > 0) {\n          return value;\n        }\n      }\n    },\n\n    displayName: function(displayName) {\n      if(SIP.Grammar.parse('\"' + displayName + '\"', 'displayName') === -1) {\n        return;\n      } else {\n        return displayName;\n      }\n    },\n\n    hackViaTcp: function(hackViaTcp) {\n      if (typeof hackViaTcp === 'boolean') {\n        return hackViaTcp;\n      }\n    },\n\n    hackIpInContact: function(hackIpInContact) {\n      if (typeof hackIpInContact === 'boolean') {\n        return hackIpInContact;\n      }\n    },\n\n    hackWssInTransport: function(hackWssInTransport) {\n      if (typeof hackWssInTransport === 'boolean') {\n        return hackWssInTransport;\n      }\n    },\n\n    instanceId: function(instanceId) {\n      if(typeof instanceId !== 'string') {\n        return;\n      }\n\n      if ((/^uuid:/i.test(instanceId))) {\n        instanceId = instanceId.substr(5);\n      }\n\n      if(SIP.Grammar.parse(instanceId, 'uuid') === -1) {\n        return;\n      } else {\n        return instanceId;\n      }\n    },\n\n    noAnswerTimeout: function(noAnswerTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(noAnswerTimeout)) {\n        value = Number(noAnswerTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    password: function(password) {\n      return String(password);\n    },\n\n    rel100: function(rel100) {\n      if(rel100 === SIP.C.supported.REQUIRED) {\n        return SIP.C.supported.REQUIRED;\n      } else if (rel100 === SIP.C.supported.SUPPORTED) {\n        return SIP.C.supported.SUPPORTED;\n      } else  {\n        return SIP.C.supported.UNSUPPORTED;\n      }\n    },\n\n    register: function(register) {\n      if (typeof register === 'boolean') {\n        return register;\n      }\n    },\n\n    registerExpires: function(registerExpires) {\n      var value;\n      if (SIP.Utils.isDecimal(registerExpires)) {\n        value = Number(registerExpires);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    registrarServer: function(registrarServer) {\n      var parsed;\n\n      if(typeof registrarServer !== 'string') {\n        return;\n      }\n\n      if (!/^sip:/i.test(registrarServer)) {\n        registrarServer = SIP.C.SIP + ':' + registrarServer;\n      }\n      parsed = SIP.URI.parse(registrarServer);\n\n      if(!parsed) {\n        return;\n      } else if(parsed.user) {\n        return;\n      } else {\n        return parsed;\n      }\n    },\n\n    stunServers: function(stunServers) {\n      var idx, length, stun_server;\n\n      if (typeof stunServers === 'string') {\n        stunServers = [stunServers];\n      } else if (!(stunServers instanceof Array)) {\n        return;\n      }\n\n      length = stunServers.length;\n      for (idx = 0; idx < length; idx++) {\n        stun_server = stunServers[idx];\n        if (!(/^stuns?:/.test(stun_server))) {\n          stun_server = 'stun:' + stun_server;\n        }\n\n        if(SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {\n          return;\n        } else {\n          stunServers[idx] = stun_server;\n        }\n      }\n      return stunServers;\n    },\n\n    traceSip: function(traceSip) {\n      if (typeof traceSip === 'boolean') {\n        return traceSip;\n      }\n    },\n\n    turnServers: function(turnServers) {\n      var idx, length, turn_server, url;\n\n      if (turnServers instanceof Array) {\n        // Do nothing\n      } else {\n        turnServers = [turnServers];\n      }\n\n      length = turnServers.length;\n      for (idx = 0; idx < length; idx++) {\n        turn_server = turnServers[idx];\n        //Backwards compatibility: Allow defining the turn_server url with the 'server' property.\n        if (turn_server.server) {\n          turn_server.urls = [turn_server.server];\n        }\n\n        if (!turn_server.urls || !turn_server.username || !turn_server.password) {\n          return;\n        }\n\n        if (!(turn_server.urls instanceof Array)) {\n          turn_server.urls = [turn_server.urls];\n        }\n\n        length = turn_server.urls.length;\n        for (idx = 0; idx < length; idx++) {\n          url = turn_server.urls[idx];\n\n          if (!(/^turns?:/.test(url))) {\n            url = 'turn:' + url;\n          }\n\n          if(SIP.Grammar.parse(url, 'turn_URI') === -1) {\n            return;\n          }\n        }\n      }\n      return turnServers;\n    },\n\n    userAgentString: function(userAgentString) {\n      if (typeof userAgentString === 'string') {\n        return userAgentString;\n      }\n    },\n\n    usePreloadedRoute: function(usePreloadedRoute) {\n      if (typeof usePreloadedRoute === 'boolean') {\n        return usePreloadedRoute;\n      }\n    },\n\n    wsServerMaxReconnection: function(wsServerMaxReconnection) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {\n        value = Number(wsServerMaxReconnection);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    wsServerReconnectionTimeout: function(wsServerReconnectionTimeout) {\n      var value;\n      if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {\n        value = Number(wsServerReconnectionTimeout);\n        if (value > 0) {\n          return value;\n        }\n      }\n    },\n\n    autostart: function(autostart) {\n      if (typeof autostart === 'boolean') {\n        return autostart;\n      }\n    },\n\n    mediaHandlerFactory: function(mediaHandlerFactory) {\n      if (mediaHandlerFactory instanceof Function) {\n        return mediaHandlerFactory;\n      }\n    }\n  }\n};\n\nUA.C = C;\nSIP.UA = UA;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/UA.js\n ** module id = 30\n ** module chunks = 0\n **/","/**\n * @fileoverview Hacks - This file contains all of the things we\n * wish we didn't have to do, just for interop.  It is similar to\n * Utils, which provides actually useful and relevant functions for\n * a SIP library. Methods in this file are grouped by vendor, so\n * as to most easily track when particular hacks may not be necessary anymore.\n */\n\nmodule.exports = function (SIP) {\nvar Hacks = {\n  AllBrowsers: {\n    maskDtls: function (message) {\n      if (message.body) {\n        message.body = message.body.replace(/ UDP\\/TLS\\/RTP\\/SAVP/gmi, \" RTP/SAVP\");\n      }\n    },\n    unmaskDtls: function (sdp) {\n      /**\n       * Chrome does not handle DTLS correctly (Canaray does, but not production)\n       * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)\n       *\n       * UPDATE: May 21, 2014\n       * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES\n       *\n       * UPDATE: 2014-09-24\n       * Opera now supports DTLS by default as well.\n       *\n       **/\n      return sdp.replace(/ RTP\\/SAVP/gmi, \" UDP/TLS/RTP/SAVP\");\n    }\n  },\n  Firefox: {\n    /* Condition to detect if hacks are applicable */\n    isFirefox: function () {\n      return window.mozRTCPeerConnection !== undefined;\n    },\n\n    cannotHandleExtraWhitespace: function (message) {\n      if (this.isFirefox() && message.body) {\n        message.body = message.body.replace(/ \\r\\n/g, \"\\r\\n\");\n      }\n    },\n\n    hasMissingCLineInSDP: function (sdp) {\n      /*\n       * This is a Firefox hack to insert valid sdp when getDescription is\n       * called with the constraint offerToReceiveVideo = false.\n       * We search for either a c-line at the top of the sdp above all\n       * m-lines. If that does not exist then we search for a c-line\n       * beneath each m-line. If it is missing a c-line, we insert\n       * a fake c-line with the ip address 0.0.0.0. This is then valid\n       * sdp and no media will be sent for that m-line.\n       *\n       * Valid SDP is:\n       * m=\n       * i=\n       * c=\n       */\n      var insertAt, mlines;\n      if (sdp.indexOf('c=') > sdp.indexOf('m=')) {\n\n        // Find all m= lines\n        mlines = sdp.match(/m=.*\\r\\n.*/g);\n        for (var i=0; i<mlines.length; i++) {\n\n          // If it has an i= line, check if the next line is the c= line\n          if (mlines[i].toString().search(/i=.*/) >= 0) {\n            insertAt = sdp.indexOf(mlines[i].toString())+mlines[i].toString().length;\n            if (sdp.substr(insertAt,2)!=='c=') {\n              sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n            }\n\n          // else add the C line if it's missing\n          } else if (mlines[i].toString().search(/c=.*/) < 0) {\n            insertAt = sdp.indexOf(mlines[i].toString().match(/.*/))+mlines[i].toString().match(/.*/).toString().length;\n            sdp = sdp.substr(0,insertAt) + '\\r\\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);\n          }\n        }\n      }\n      return sdp;\n    },\n\n    hasIncompatibleCLineWithSomeSIPEndpoints: function(sdp) {\n      /*\n       * Firefox appears to be following https://tools.ietf.org/html/rfc5245#section-9.1.1.1\n       * and using a c line IP address of 0.0.0.0. This is completely valid, however it is\n       * causing some endpoints (such as FreeSWITCH) to interpret the SDP as being on hold\n       * https://freeswitch.org/jira/browse/FS-6955. To get around this issue we pull the\n       * replace the c line with 1.1.1.1 which SIP clients do not interpret as hold.\n       * This makes the other endpoint believe that the call is not on hold and audio flows\n       * because ICE determines the media pathway (not the c line).\n       */\n      return sdp.replace(/(0\\.0\\.0\\.0)/gmi, SIP.Utils.getRandomTestNetIP());\n    }\n  },\n\n  Chrome: {\n    needsExplicitlyInactiveSDP: function (sdp) {\n      var sub, index;\n\n      if (Hacks.Firefox.isFirefox()) { // Fix this in Firefox before sending\n        index = sdp.indexOf('m=video 0');\n        if (index !== -1) {\n          sub = sdp.substr(index);\n          sub = sub.replace(/\\r\\nc=IN IP4.*\\r\\n$/,\n                            '\\r\\nc=IN IP4 0.0.0.0\\r\\na=inactive\\r\\n');\n          return sdp.substr(0, index) + sub;\n        }\n      }\n      return sdp;\n    },\n\n    getsConfusedAboutGUM: function (session) {\n      if (session.mediaHandler) {\n        session.mediaHandler.close();\n      }\n    }\n  }\n};\n\nreturn Hacks;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Hacks.js\n ** module id = 31\n ** module chunks = 0\n **/","/**\n * @fileoverview Incoming SIP Message Sanity Check\n */\n\n/**\n * SIP message sanity check.\n * @augments SIP\n * @function\n * @param {SIP.IncomingMessage} message\n * @param {SIP.UA} ua\n * @param {SIP.Transport} transport\n * @returns {Boolean}\n */\nmodule.exports = function (SIP) {\nvar sanityCheck,\n logger,\n message, ua, transport,\n requests = [],\n responses = [],\n all = [];\n\n/*\n * Sanity Check for incoming Messages\n *\n * Requests:\n *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme\n *  - _rfc3261_16_3_4_ Receive a Request already sent by us\n *   Does not look at via sent-by but at sipjsId, which is inserted as\n *   a prefix in all initial requests generated by the ua\n *  - _rfc3261_18_3_request_ Body Content-Length\n *  - _rfc3261_8_2_2_2_ Merged Requests\n *\n * Responses:\n *  - _rfc3261_8_1_3_3_ Multiple Via headers\n *  - _rfc3261_18_1_2_ sent-by mismatch\n *  - _rfc3261_18_3_response_ Body Content-Length\n *\n * All:\n *  - Minimum headers in a SIP message\n */\n\n// Sanity Check functions for requests\nfunction rfc3261_8_2_2_1() {\n  if(!message.ruri || message.ruri.scheme !== 'sip') {\n    reply(416);\n    return false;\n  }\n}\n\nfunction rfc3261_16_3_4() {\n  if(!message.to_tag) {\n    if(message.call_id.substr(0, 5) === ua.configuration.sipjsId) {\n      reply(482);\n      return false;\n    }\n  }\n}\n\nfunction rfc3261_18_3_request() {\n  var len = SIP.Utils.str_utf8_length(message.body),\n  contentLength = message.getHeader('content-length');\n\n  if(len < contentLength) {\n    reply(400);\n    return false;\n  }\n}\n\nfunction rfc3261_8_2_2_2() {\n  var tr, idx,\n    fromTag = message.from_tag,\n    call_id = message.call_id,\n    cseq = message.cseq;\n\n  if(!message.to_tag) {\n    if(message.method === SIP.C.INVITE) {\n      tr = ua.transactions.ist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.ist) {\n          tr = ua.transactions.ist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    } else {\n      tr = ua.transactions.nist[message.via_branch];\n      if(tr) {\n        return;\n      } else {\n        for(idx in ua.transactions.nist) {\n          tr = ua.transactions.nist[idx];\n          if(tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {\n            reply(482);\n            return false;\n          }\n        }\n      }\n    }\n  }\n}\n\n// Sanity Check functions for responses\nfunction rfc3261_8_1_3_3() {\n  if(message.getHeaders('via').length > 1) {\n    logger.warn('More than one Via header field present in the response. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_1_2() {\n  var viaHost = ua.configuration.viaHost;\n  if(message.via.host !== viaHost || message.via.port !== undefined) {\n    logger.warn('Via sent-by in the response does not match UA Via host value. Dropping the response');\n    return false;\n  }\n}\n\nfunction rfc3261_18_3_response() {\n  var\n    len = SIP.Utils.str_utf8_length(message.body),\n    contentLength = message.getHeader('content-length');\n\n    if(len < contentLength) {\n      logger.warn('Message body length is lower than the value in Content-Length header field. Dropping the response');\n      return false;\n    }\n}\n\n// Sanity Check functions for requests and responses\nfunction minimumHeaders() {\n  var\n    mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],\n    idx = mandatoryHeaders.length;\n\n  while(idx--) {\n    if(!message.hasHeader(mandatoryHeaders[idx])) {\n      logger.warn('Missing mandatory header field : '+ mandatoryHeaders[idx] +'. Dropping the response');\n      return false;\n    }\n  }\n}\n\n// Reply\nfunction reply(status_code) {\n  var to,\n    response = \"SIP/2.0 \" + status_code + \" \" + SIP.C.REASON_PHRASE[status_code] + \"\\r\\n\",\n    vias = message.getHeaders('via'),\n    length = vias.length,\n    idx = 0;\n\n  for(idx; idx < length; idx++) {\n    response += \"Via: \" + vias[idx] + \"\\r\\n\";\n  }\n\n  to = message.getHeader('To');\n\n  if(!message.to_tag) {\n    to += ';tag=' + SIP.Utils.newTag();\n  }\n\n  response += \"To: \" + to + \"\\r\\n\";\n  response += \"From: \" + message.getHeader('From') + \"\\r\\n\";\n  response += \"Call-ID: \" + message.call_id + \"\\r\\n\";\n  response += \"CSeq: \" + message.cseq + \" \" + message.method + \"\\r\\n\";\n  response += \"\\r\\n\";\n\n  transport.send(response);\n}\n\nrequests.push(rfc3261_8_2_2_1);\nrequests.push(rfc3261_16_3_4);\nrequests.push(rfc3261_18_3_request);\nrequests.push(rfc3261_8_2_2_2);\n\nresponses.push(rfc3261_8_1_3_3);\nresponses.push(rfc3261_18_1_2);\nresponses.push(rfc3261_18_3_response);\n\nall.push(minimumHeaders);\n\nsanityCheck = function(m, u, t) {\n  var len, pass;\n\n  message = m;\n  ua = u;\n  transport = t;\n\n  logger = ua.getLogger('sip.sanitycheck');\n\n  len = all.length;\n  while(len--) {\n    pass = all[len](message);\n    if(pass === false) {\n      return false;\n    }\n  }\n\n  if(message instanceof SIP.IncomingRequest) {\n    len = requests.length;\n    while(len--) {\n      pass = requests[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  else if(message instanceof SIP.IncomingResponse) {\n    len = responses.length;\n    while(len--) {\n      pass = responses[len](message);\n      if(pass === false) {\n        return false;\n      }\n    }\n  }\n\n  //Everything is OK\n  return true;\n};\n\nSIP.sanityCheck = sanityCheck;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/SanityCheck.js\n ** module id = 32\n ** module chunks = 0\n **/","\n/**\n * @fileoverview SIP Digest Authentication\n */\n\n/**\n * SIP Digest Authentication.\n * @augments SIP.\n * @function Digest Authentication\n * @param {SIP.UA} ua\n */\nmodule.exports = function (Utils) {\nvar DigestAuthentication;\n\nDigestAuthentication = function(ua) {\n  this.logger = ua.getLogger('sipjs.digestauthentication');\n  this.username = ua.configuration.authorizationUser;\n  this.password = ua.configuration.password;\n  this.cnonce = null;\n  this.nc = 0;\n  this.ncHex = '00000000';\n  this.response = null;\n};\n\n\n/**\n* Performs Digest authentication given a SIP request and the challenge\n* received in a response to that request.\n* Returns true if credentials were successfully generated, false otherwise.\n*\n* @param {SIP.OutgoingRequest} request\n* @param {Object} challenge\n*/\nDigestAuthentication.prototype.authenticate = function(request, challenge) {\n  // Inspect and validate the challenge.\n\n  this.algorithm = challenge.algorithm;\n  this.realm = challenge.realm;\n  this.nonce = challenge.nonce;\n  this.opaque = challenge.opaque;\n  this.stale = challenge.stale;\n\n  if (this.algorithm) {\n    if (this.algorithm !== 'MD5') {\n      this.logger.warn('challenge with Digest algorithm different than \"MD5\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.algorithm = 'MD5';\n  }\n\n  if (! this.realm) {\n    this.logger.warn('challenge without Digest realm, authentication aborted');\n    return false;\n  }\n\n  if (! this.nonce) {\n    this.logger.warn('challenge without Digest nonce, authentication aborted');\n    return false;\n  }\n\n  // 'qop' can contain a list of values (Array). Let's choose just one.\n  if (challenge.qop) {\n    if (challenge.qop.indexOf('auth') > -1) {\n      this.qop = 'auth';\n    } else if (challenge.qop.indexOf('auth-int') > -1) {\n      this.qop = 'auth-int';\n    } else {\n      // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n      this.logger.warn('challenge without Digest qop different than \"auth\" or \"auth-int\", authentication aborted');\n      return false;\n    }\n  } else {\n    this.qop = null;\n  }\n\n  // Fill other attributes.\n\n  this.method = request.method;\n  this.uri = request.ruri;\n  this.cnonce = Utils.createRandomToken(12);\n  this.nc += 1;\n  this.updateNcHex();\n\n  // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n  if (this.nc === 4294967296) {\n    this.nc = 1;\n    this.ncHex = '00000001';\n  }\n\n  // Calculate the Digest \"response\" value.\n  this.calculateResponse();\n\n  return true;\n};\n\n\n/**\n* Generate Digest 'response' value.\n* @private\n*/\nDigestAuthentication.prototype.calculateResponse = function() {\n  var ha1, ha2;\n\n  // HA1 = MD5(A1) = MD5(username:realm:password)\n  ha1 = Utils.calculateMD5(this.username + \":\" + this.realm + \":\" + this.password);\n\n  if (this.qop === 'auth') {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n\n  } else if (this.qop === 'auth-int') {\n    // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri + \":\" + Utils.calculateMD5(this.body ? this.body : \"\"));\n    // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n\n  } else if (this.qop === null) {\n    // HA2 = MD5(A2) = MD5(method:digestURI)\n    ha2 = Utils.calculateMD5(this.method + \":\" + this.uri);\n    // response = MD5(HA1:nonce:HA2)\n    this.response = Utils.calculateMD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n  }\n};\n\n\n/**\n* Return the Proxy-Authorization or WWW-Authorization header value.\n*/\nDigestAuthentication.prototype.toString = function() {\n  var auth_params = [];\n\n  if (! this.response) {\n    throw new Error('response field does not exist, cannot generate Authorization header');\n  }\n\n  auth_params.push('algorithm=' + this.algorithm);\n  auth_params.push('username=\"' + this.username + '\"');\n  auth_params.push('realm=\"' + this.realm + '\"');\n  auth_params.push('nonce=\"' + this.nonce + '\"');\n  auth_params.push('uri=\"' + this.uri + '\"');\n  auth_params.push('response=\"' + this.response + '\"');\n  if (this.opaque) {\n    auth_params.push('opaque=\"' + this.opaque + '\"');\n  }\n  if (this.qop) {\n    auth_params.push('qop=' + this.qop);\n    auth_params.push('cnonce=\"' + this.cnonce + '\"');\n    auth_params.push('nc=' + this.ncHex);\n  }\n\n  return 'Digest ' + auth_params.join(', ');\n};\n\n\n/**\n* Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n* @private\n*/\nDigestAuthentication.prototype.updateNcHex = function() {\n  var hex = Number(this.nc).toString(16);\n  this.ncHex = '00000000'.substr(0, 8-hex.length) + hex;\n};\n\nreturn DigestAuthentication;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/DigestAuthentication.js\n ** module id = 33\n ** module chunks = 0\n **/","/* jshint ignore:start */\nmodule.exports = function(SIP) {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 182, Via: 190, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, stun_URI: 209, To: 188, turn_URI: 216, uuid: 219, WWW_Authenticate: 205, challenge: 157 },\n        peg$startRuleIndex   = 118,\n\n        peg$consts = [\n          \"\\r\\n\",\n          { type: \"literal\", value: \"\\r\\n\", description: \"\\\"\\\\r\\\\n\\\"\" },\n          /^[0-9]/,\n          { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n          /^[a-zA-Z]/,\n          { type: \"class\", value: \"[a-zA-Z]\", description: \"[a-zA-Z]\" },\n          /^[0-9a-fA-F]/,\n          { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n          /^[\\0-\\xFF]/,\n          { type: \"class\", value: \"[\\\\0-\\\\xFF]\", description: \"[\\\\0-\\\\xFF]\" },\n          /^[\"]/,\n          { type: \"class\", value: \"[\\\"]\", description: \"[\\\"]\" },\n          \" \",\n          { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n          \"\\t\",\n          { type: \"literal\", value: \"\\t\", description: \"\\\"\\\\t\\\"\" },\n          /^[a-zA-Z0-9]/,\n          { type: \"class\", value: \"[a-zA-Z0-9]\", description: \"[a-zA-Z0-9]\" },\n          \";\",\n          { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n          \"/\",\n          { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n          \"?\",\n          { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n          \":\",\n          { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n          \"@\",\n          { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n          \"&\",\n          { type: \"literal\", value: \"&\", description: \"\\\"&\\\"\" },\n          \"=\",\n          { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n          \"+\",\n          { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n          \"$\",\n          { type: \"literal\", value: \"$\", description: \"\\\"$\\\"\" },\n          \",\",\n          { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n          \"-\",\n          { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n          \"_\",\n          { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n          \".\",\n          { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n          \"!\",\n          { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n          \"~\",\n          { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n          \"*\",\n          { type: \"literal\", value: \"*\", description: \"\\\"*\\\"\" },\n          \"'\",\n          { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n          \"(\",\n          { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n          \")\",\n          { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n          peg$FAILED,\n          \"%\",\n          { type: \"literal\", value: \"%\", description: \"\\\"%\\\"\" },\n          function(escaped) {return escaped.join(''); },\n          null,\n          [],\n          function() {return \" \"; },\n          function() {return ':'; },\n          function() {\n                              return text(); },\n          /^[!-~]/,\n          { type: \"class\", value: \"[!-~]\", description: \"[!-~]\" },\n          /^[\\x80-\\uFFFF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\uFFFF]\", description: \"[\\\\x80-\\\\uFFFF]\" },\n          /^[\\x80-\\xBF]/,\n          { type: \"class\", value: \"[\\\\x80-\\\\xBF]\", description: \"[\\\\x80-\\\\xBF]\" },\n          /^[a-f]/,\n          { type: \"class\", value: \"[a-f]\", description: \"[a-f]\" },\n          \"`\",\n          { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n          function() {\n                            return text(); },\n          \"<\",\n          { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n          \">\",\n          { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n          \"\\\\\",\n          { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n          \"[\",\n          { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n          \"]\",\n          { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n          \"{\",\n          { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n          \"}\",\n          { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n          function() {return \"*\"; },\n          function() {return \"/\"; },\n          function() {return \"=\"; },\n          function() {return \"(\"; },\n          function() {return \")\"; },\n          function() {return \">\"; },\n          function() {return \"<\"; },\n          function() {return \",\"; },\n          function() {return \";\"; },\n          function() {return \":\"; },\n          function() {return \"\\\"\"; },\n          /^[!-']/,\n          { type: \"class\", value: \"[!-']\", description: \"[!-']\" },\n          /^[*-[]/,\n          { type: \"class\", value: \"[*-[]\", description: \"[*-[]\" },\n          /^[\\]-~]/,\n          { type: \"class\", value: \"[\\\\]-~]\", description: \"[\\\\]-~]\" },\n          function(contents) {\n                                  return contents; },\n          /^[#-[]/,\n          { type: \"class\", value: \"[#-[]\", description: \"[#-[]\" },\n          /^[\\0-\\t]/,\n          { type: \"class\", value: \"[\\\\0-\\\\t]\", description: \"[\\\\0-\\\\t]\" },\n          /^[\\x0B-\\f]/,\n          { type: \"class\", value: \"[\\\\x0B-\\\\f]\", description: \"[\\\\x0B-\\\\f]\" },\n          /^[\\x0E-]/,\n          { type: \"class\", value: \"[\\\\x0E-]\", description: \"[\\\\x0E-]\" },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                },\n          function() {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n\n                                  if (options.startRule === 'SIP_URI') { data = data.uri;}\n                                },\n          \"sips\",\n          { type: \"literal\", value: \"sips\", description: \"\\\"sips\\\"\" },\n          \"sip\",\n          { type: \"literal\", value: \"sip\", description: \"\\\"sip\\\"\" },\n          function(uri_scheme) {\n                              data.scheme = uri_scheme.toLowerCase(); },\n          function() {\n                              data.user = decodeURIComponent(text().slice(0, -1));},\n          function() {\n                              data.password = text(); },\n          function() {\n                              data.host = text().toLowerCase();\n                              return data.host; },\n          function() {\n                            data.host_type = 'domain';\n                            return text(); },\n          /^[a-zA-Z0-9_\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n          /^[a-zA-Z0-9\\-]/,\n          { type: \"class\", value: \"[a-zA-Z0-9\\\\-]\", description: \"[a-zA-Z0-9\\\\-]\" },\n          function() {\n                              data.host_type = 'IPv6';\n                              return text(); },\n          \"::\",\n          { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n          function() {\n                            data.host_type = 'IPv6';\n                            return text(); },\n          function() {\n                              data.host_type = 'IPv4';\n                              return text(); },\n          \"25\",\n          { type: \"literal\", value: \"25\", description: \"\\\"25\\\"\" },\n          /^[0-5]/,\n          { type: \"class\", value: \"[0-5]\", description: \"[0-5]\" },\n          \"2\",\n          { type: \"literal\", value: \"2\", description: \"\\\"2\\\"\" },\n          /^[0-4]/,\n          { type: \"class\", value: \"[0-4]\", description: \"[0-4]\" },\n          \"1\",\n          { type: \"literal\", value: \"1\", description: \"\\\"1\\\"\" },\n          /^[1-9]/,\n          { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n          function(port) {\n                              port = parseInt(port.join(''));\n                              data.port = port;\n                              return port; },\n          \"transport=\",\n          { type: \"literal\", value: \"transport=\", description: \"\\\"transport=\\\"\" },\n          \"udp\",\n          { type: \"literal\", value: \"udp\", description: \"\\\"udp\\\"\" },\n          \"tcp\",\n          { type: \"literal\", value: \"tcp\", description: \"\\\"tcp\\\"\" },\n          \"sctp\",\n          { type: \"literal\", value: \"sctp\", description: \"\\\"sctp\\\"\" },\n          \"tls\",\n          { type: \"literal\", value: \"tls\", description: \"\\\"tls\\\"\" },\n          function(transport) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['transport'] = transport.toLowerCase(); },\n          \"user=\",\n          { type: \"literal\", value: \"user=\", description: \"\\\"user=\\\"\" },\n          \"phone\",\n          { type: \"literal\", value: \"phone\", description: \"\\\"phone\\\"\" },\n          \"ip\",\n          { type: \"literal\", value: \"ip\", description: \"\\\"ip\\\"\" },\n          function(user) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['user'] = user.toLowerCase(); },\n          \"method=\",\n          { type: \"literal\", value: \"method=\", description: \"\\\"method=\\\"\" },\n          function(method) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['method'] = method; },\n          \"ttl=\",\n          { type: \"literal\", value: \"ttl=\", description: \"\\\"ttl=\\\"\" },\n          function(ttl) {\n                                if(!data.params) data.params={};\n                                data.params['ttl'] = ttl; },\n          \"maddr=\",\n          { type: \"literal\", value: \"maddr=\", description: \"\\\"maddr=\\\"\" },\n          function(maddr) {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['maddr'] = maddr; },\n          \"lr\",\n          { type: \"literal\", value: \"lr\", description: \"\\\"lr\\\"\" },\n          function() {\n                                if(!data.uri_params) data.uri_params={};\n                                data.uri_params['lr'] = undefined; },\n          function(param, value) {\n                                if(!data.uri_params) data.uri_params = {};\n                                if (value === null){\n                                  value = undefined;\n                                }\n                                else {\n                                  value = value[1];\n                                }\n                                data.uri_params[param.toLowerCase()] = value && value.toLowerCase();},\n          function(pname) {return pname.join(''); },\n          function(pvalue) {return pvalue.join(''); },\n          function(hname, hvalue) {\n                                hname = hname.join('').toLowerCase();\n                                hvalue = hvalue.join('');\n                                if(!data.uri_headers) data.uri_headers = {};\n                                if (!data.uri_headers[hname]) {\n                                  data.uri_headers[hname] = [hvalue];\n                                } else {\n                                  data.uri_headers[hname].push(hvalue);\n                                }},\n          function() {\n                                // lots of tests fail if this isn't guarded...\n                                if (options.startRule === 'Refer_To') {\n                                  data.uri = new SIP.URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);\n                                  delete data.scheme;\n                                  delete data.user;\n                                  delete data.host;\n                                  delete data.host_type;\n                                  delete data.port;\n                                  delete data.uri_params;\n                                }\n                              },\n          \"//\",\n          { type: \"literal\", value: \"//\", description: \"\\\"//\\\"\" },\n          function() {\n                              data.scheme= text(); },\n          { type: \"literal\", value: \"SIP\", description: \"\\\"SIP\\\"\" },\n          function() {\n                              data.sip_version = text(); },\n          \"INVITE\",\n          { type: \"literal\", value: \"INVITE\", description: \"\\\"INVITE\\\"\" },\n          \"ACK\",\n          { type: \"literal\", value: \"ACK\", description: \"\\\"ACK\\\"\" },\n          \"VXACH\",\n          { type: \"literal\", value: \"VXACH\", description: \"\\\"VXACH\\\"\" },\n          \"OPTIONS\",\n          { type: \"literal\", value: \"OPTIONS\", description: \"\\\"OPTIONS\\\"\" },\n          \"BYE\",\n          { type: \"literal\", value: \"BYE\", description: \"\\\"BYE\\\"\" },\n          \"CANCEL\",\n          { type: \"literal\", value: \"CANCEL\", description: \"\\\"CANCEL\\\"\" },\n          \"REGISTER\",\n          { type: \"literal\", value: \"REGISTER\", description: \"\\\"REGISTER\\\"\" },\n          \"SUBSCRIBE\",\n          { type: \"literal\", value: \"SUBSCRIBE\", description: \"\\\"SUBSCRIBE\\\"\" },\n          \"NOTIFY\",\n          { type: \"literal\", value: \"NOTIFY\", description: \"\\\"NOTIFY\\\"\" },\n          \"REFER\",\n          { type: \"literal\", value: \"REFER\", description: \"\\\"REFER\\\"\" },\n          function() {\n\n                              data.method = text();\n                              return data.method; },\n          function(status_code) {\n                            data.status_code = parseInt(status_code.join('')); },\n          function() {\n                            data.reason_phrase = text(); },\n          function() {\n                        data = text(); },\n          function() {\n                                  var idx, length;\n                                  length = data.multi_header.length;\n                                  for (idx = 0; idx < length; idx++) {\n                                    if (data.multi_header[idx].parsed === null) {\n                                      data = null;\n                                      break;\n                                    }\n                                  }\n                                  if (data !== null) {\n                                    data = data.multi_header;\n                                  } else {\n                                    data = -1;\n                                  }},\n          function() {\n                                  var header;\n                                  if(!data.multi_header) data.multi_header = [];\n                                  try {\n                                    header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                    delete data.uri;\n                                    delete data.displayName;\n                                    delete data.params;\n                                  } catch(e) {\n                                    header = null;\n                                  }\n                                  data.multi_header.push( { 'position': peg$currPos,\n                                                            'offset': offset(),\n                                                            'parsed': header\n                                                          });},\n          function(displayName) {\n                                  displayName = text().trim();\n                                  if (displayName[0] === '\\\"') {\n                                    displayName = displayName.substring(1, displayName.length-1);\n                                  }\n                                  data.displayName = displayName; },\n          \"q\",\n          { type: \"literal\", value: \"q\", description: \"\\\"q\\\"\" },\n          function(q) {\n                                  if(!data.params) data.params = {};\n                                  data.params['q'] = q; },\n          \"expires\",\n          { type: \"literal\", value: \"expires\", description: \"\\\"expires\\\"\" },\n          function(expires) {\n                                  if(!data.params) data.params = {};\n                                  data.params['expires'] = expires; },\n          function(delta_seconds) {\n                                  return parseInt(delta_seconds.join('')); },\n          \"0\",\n          { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n          function() {\n                                  return parseFloat(text()); },\n          function(param, value) {\n                                  if(!data.params) data.params = {};\n                                  if (value === null){\n                                    value = undefined;\n                                  }\n                                  else {\n                                    value = value[1];\n                                  }\n                                  data.params[param.toLowerCase()] = value;},\n          \"render\",\n          { type: \"literal\", value: \"render\", description: \"\\\"render\\\"\" },\n          \"session\",\n          { type: \"literal\", value: \"session\", description: \"\\\"session\\\"\" },\n          \"icon\",\n          { type: \"literal\", value: \"icon\", description: \"\\\"icon\\\"\" },\n          \"alert\",\n          { type: \"literal\", value: \"alert\", description: \"\\\"alert\\\"\" },\n          function() {\n                                      if (options.startRule === 'Content_Disposition') {\n                                        data.type = text().toLowerCase();\n                                      }\n                                    },\n          \"handling\",\n          { type: \"literal\", value: \"handling\", description: \"\\\"handling\\\"\" },\n          \"optional\",\n          { type: \"literal\", value: \"optional\", description: \"\\\"optional\\\"\" },\n          \"required\",\n          { type: \"literal\", value: \"required\", description: \"\\\"required\\\"\" },\n          function(length) {\n                                  data = parseInt(length.join('')); },\n          function() {\n                                  data = text(); },\n          \"text\",\n          { type: \"literal\", value: \"text\", description: \"\\\"text\\\"\" },\n          \"image\",\n          { type: \"literal\", value: \"image\", description: \"\\\"image\\\"\" },\n          \"audio\",\n          { type: \"literal\", value: \"audio\", description: \"\\\"audio\\\"\" },\n          \"video\",\n          { type: \"literal\", value: \"video\", description: \"\\\"video\\\"\" },\n          \"application\",\n          { type: \"literal\", value: \"application\", description: \"\\\"application\\\"\" },\n          \"message\",\n          { type: \"literal\", value: \"message\", description: \"\\\"message\\\"\" },\n          \"multipart\",\n          { type: \"literal\", value: \"multipart\", description: \"\\\"multipart\\\"\" },\n          \"x-\",\n          { type: \"literal\", value: \"x-\", description: \"\\\"x-\\\"\" },\n          function(cseq_value) {\n                            data.value=parseInt(cseq_value.join('')); },\n          function(expires) {data = expires; },\n          function(event_type) {\n                                 data.event = event_type.toLowerCase(); },\n          function() {\n                          var tag = data.tag;\n                            data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                            if (tag) {data.setParam('tag',tag)}\n                          },\n          \"tag\",\n          { type: \"literal\", value: \"tag\", description: \"\\\"tag\\\"\" },\n          function(tag) {data.tag = tag; },\n          function(forwards) {\n                            data = parseInt(forwards.join('')); },\n          function(min_expires) {data = min_expires; },\n          function() {\n                                  data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                                },\n          \"digest\",\n          { type: \"literal\", value: \"Digest\", description: \"\\\"Digest\\\"\" },\n          \"realm\",\n          { type: \"literal\", value: \"realm\", description: \"\\\"realm\\\"\" },\n          function(realm) { data.realm = realm; },\n          \"domain\",\n          { type: \"literal\", value: \"domain\", description: \"\\\"domain\\\"\" },\n          \"nonce\",\n          { type: \"literal\", value: \"nonce\", description: \"\\\"nonce\\\"\" },\n          function(nonce) { data.nonce=nonce; },\n          \"opaque\",\n          { type: \"literal\", value: \"opaque\", description: \"\\\"opaque\\\"\" },\n          function(opaque) { data.opaque=opaque; },\n          \"stale\",\n          { type: \"literal\", value: \"stale\", description: \"\\\"stale\\\"\" },\n          \"true\",\n          { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n          function() { data.stale=true; },\n          \"false\",\n          { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n          function() { data.stale=false; },\n          \"algorithm\",\n          { type: \"literal\", value: \"algorithm\", description: \"\\\"algorithm\\\"\" },\n          \"md5\",\n          { type: \"literal\", value: \"MD5\", description: \"\\\"MD5\\\"\" },\n          \"md5-sess\",\n          { type: \"literal\", value: \"MD5-sess\", description: \"\\\"MD5-sess\\\"\" },\n          function(algorithm) {\n                                data.algorithm=algorithm.toUpperCase(); },\n          \"qop\",\n          { type: \"literal\", value: \"qop\", description: \"\\\"qop\\\"\" },\n          \"auth-int\",\n          { type: \"literal\", value: \"auth-int\", description: \"\\\"auth-int\\\"\" },\n          \"auth\",\n          { type: \"literal\", value: \"auth\", description: \"\\\"auth\\\"\" },\n          function(qop_value) {\n                                  data.qop || (data.qop=[]);\n                                  data.qop.push(qop_value.toLowerCase()); },\n          function(rack_value) {\n                            data.value=parseInt(rack_value.join('')); },\n          function() {\n                            var idx, length;\n                            length = data.multi_header.length;\n                            for (idx = 0; idx < length; idx++) {\n                              if (data.multi_header[idx].parsed === null) {\n                                data = null;\n                                break;\n                              }\n                            }\n                            if (data !== null) {\n                              data = data.multi_header;\n                            } else {\n                              data = -1;\n                            }},\n          function() {\n                            var header;\n                            if(!data.multi_header) data.multi_header = [];\n                            try {\n                              header = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                              delete data.uri;\n                              delete data.displayName;\n                              delete data.params;\n                            } catch(e) {\n                              header = null;\n                            }\n                            data.multi_header.push( { 'position': peg$currPos,\n                                                      'offset': offset(),\n                                                      'parsed': header\n                                                    });},\n          function() {\n                        data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                      },\n          function(rseq_value) {\n                            data.value=parseInt(rseq_value.join('')); },\n          \"active\",\n          { type: \"literal\", value: \"active\", description: \"\\\"active\\\"\" },\n          \"pending\",\n          { type: \"literal\", value: \"pending\", description: \"\\\"pending\\\"\" },\n          \"terminated\",\n          { type: \"literal\", value: \"terminated\", description: \"\\\"terminated\\\"\" },\n          function() {\n                                  data.state = text(); },\n          \"reason\",\n          { type: \"literal\", value: \"reason\", description: \"\\\"reason\\\"\" },\n          function(reason) {\n                                  if (typeof reason !== 'undefined') data.reason = reason; },\n          function(expires) {\n                                  if (typeof expires !== 'undefined') data.expires = expires; },\n          \"retry_after\",\n          { type: \"literal\", value: \"retry_after\", description: \"\\\"retry_after\\\"\" },\n          function(retry_after) {\n                                  if (typeof retry_after !== 'undefined') data.retry_after = retry_after; },\n          \"deactivated\",\n          { type: \"literal\", value: \"deactivated\", description: \"\\\"deactivated\\\"\" },\n          \"probation\",\n          { type: \"literal\", value: \"probation\", description: \"\\\"probation\\\"\" },\n          \"rejected\",\n          { type: \"literal\", value: \"rejected\", description: \"\\\"rejected\\\"\" },\n          \"timeout\",\n          { type: \"literal\", value: \"timeout\", description: \"\\\"timeout\\\"\" },\n          \"giveup\",\n          { type: \"literal\", value: \"giveup\", description: \"\\\"giveup\\\"\" },\n          \"noresource\",\n          { type: \"literal\", value: \"noresource\", description: \"\\\"noresource\\\"\" },\n          \"invariant\",\n          { type: \"literal\", value: \"invariant\", description: \"\\\"invariant\\\"\" },\n          function() {\n                        var tag = data.tag;\n                          data = new SIP.NameAddrHeader(data.uri, data.displayName, data.params);\n                          if (tag) {data.setParam('tag',tag)}\n                        },\n          \"ttl\",\n          { type: \"literal\", value: \"ttl\", description: \"\\\"ttl\\\"\" },\n          function(via_ttl_value) {\n                                data.ttl = via_ttl_value; },\n          \"maddr\",\n          { type: \"literal\", value: \"maddr\", description: \"\\\"maddr\\\"\" },\n          function(via_maddr) {\n                                data.maddr = via_maddr; },\n          \"received\",\n          { type: \"literal\", value: \"received\", description: \"\\\"received\\\"\" },\n          function(via_received) {\n                                data.received = via_received; },\n          \"branch\",\n          { type: \"literal\", value: \"branch\", description: \"\\\"branch\\\"\" },\n          function(via_branch) {\n                                data.branch = via_branch; },\n          \"rport\",\n          { type: \"literal\", value: \"rport\", description: \"\\\"rport\\\"\" },\n          function() {\n                                if(typeof response_port !== 'undefined')\n                                  data.rport = response_port.join(''); },\n          function(via_protocol) {\n                                data.protocol = via_protocol; },\n          { type: \"literal\", value: \"UDP\", description: \"\\\"UDP\\\"\" },\n          { type: \"literal\", value: \"TCP\", description: \"\\\"TCP\\\"\" },\n          { type: \"literal\", value: \"TLS\", description: \"\\\"TLS\\\"\" },\n          { type: \"literal\", value: \"SCTP\", description: \"\\\"SCTP\\\"\" },\n          function(via_transport) {\n                                data.transport = via_transport; },\n          function() {\n                                data.host = text(); },\n          function(via_sent_by_port) {\n                                data.port = parseInt(via_sent_by_port.join('')); },\n          function(ttl) {\n                                return parseInt(ttl.join('')); },\n          \"stuns\",\n          { type: \"literal\", value: \"stuns\", description: \"\\\"stuns\\\"\" },\n          \"stun\",\n          { type: \"literal\", value: \"stun\", description: \"\\\"stun\\\"\" },\n          function(scheme) {\n                                data.scheme = scheme; },\n          function(host) {\n                                data.host = host; },\n          function() {\n                                return text(); },\n          \"?transport=\",\n          { type: \"literal\", value: \"?transport=\", description: \"\\\"?transport=\\\"\" },\n          \"turns\",\n          { type: \"literal\", value: \"turns\", description: \"\\\"turns\\\"\" },\n          \"turn\",\n          { type: \"literal\", value: \"turn\", description: \"\\\"turn\\\"\" },\n          function() {\n                                data.transport = transport; },\n          function() {\n                            data = text(); }\n        ],\n\n        peg$bytecode = [\n          peg$decode(\". \\\"\\\"2 3!\"),\n          peg$decode(\"0\\\"\\\"\\\"1!3#\"),\n          peg$decode(\"0$\\\"\\\"1!3%\"),\n          peg$decode(\"0&\\\"\\\"1!3'\"),\n          peg$decode(\"7'*# \\\"7(\"),\n          peg$decode(\"0(\\\"\\\"1!3)\"),\n          peg$decode(\"0*\\\"\\\"1!3+\"),\n          peg$decode(\".,\\\"\\\"2,3-\"),\n          peg$decode(\"..\\\"\\\"2.3/\"),\n          peg$decode(\"00\\\"\\\"1!31\"),\n          peg$decode(\".2\\\"\\\"2233*\\x89 \\\".4\\\"\\\"2435*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"7)*# \\\"7,\"),\n          peg$decode(\".F\\\"\\\"2F3G*} \\\".H\\\"\\\"2H3I*q \\\".J\\\"\\\"2J3K*e \\\".L\\\"\\\"2L3M*Y \\\".N\\\"\\\"2N3O*M \\\".P\\\"\\\"2P3Q*A \\\".R\\\"\\\"2R3S*5 \\\".T\\\"\\\"2T3U*) \\\".V\\\"\\\"2V3W\"),\n          peg$decode(\"!!.Y\\\"\\\"2Y3Z+7$7#+-%7#+#%'#%$## X$\\\"# X\\\"# X+' 4!6[!! %\"),\n          peg$decode(\"!! ]7$,#&7$\\\"+-$7 +#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+@$ ]7$+&$,#&7$\\\"\\\"\\\" X+'%4\\\"6^\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*# \\\" \\\\\"),\n          peg$decode(\"! ]7'*# \\\"7(,)&7'*# \\\"7(\\\"+A$.8\\\"\\\"2839+1%7/+'%4#6_# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]72+&$,#&72\\\"\\\"\\\" X+s$ ]! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X,@&! ]7.,#&7.\\\"+-$72+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6`\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"0a\\\"\\\"1!3b*# \\\"73\"),\n          peg$decode(\"0c\\\"\\\"1!3d\"),\n          peg$decode(\"0e\\\"\\\"1!3f\"),\n          peg$decode(\"7!*) \\\"0g\\\"\\\"1!3h\"),\n          peg$decode(\"! ]7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x9E$,\\x9B&7)*\\x95 \\\".F\\\"\\\"2F3G*\\x89 \\\".J\\\"\\\"2J3K*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"! ]7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O+\\x92$,\\x8F&7)*\\x89 \\\".F\\\"\\\"2F3G*} \\\".L\\\"\\\"2L3M*q \\\".Y\\\"\\\"2Y3Z*e \\\".P\\\"\\\"2P3Q*Y \\\".H\\\"\\\"2H3I*M \\\".@\\\"\\\"2@3A*A \\\".i\\\"\\\"2i3j*5 \\\".R\\\"\\\"2R3S*) \\\".N\\\"\\\"2N3O\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\".T\\\"\\\"2T3U*\\xE3 \\\".V\\\"\\\"2V3W*\\xD7 \\\".l\\\"\\\"2l3m*\\xCB \\\".n\\\"\\\"2n3o*\\xBF \\\".:\\\"\\\"2:3;*\\xB3 \\\".D\\\"\\\"2D3E*\\xA7 \\\".2\\\"\\\"2233*\\x9B \\\".8\\\"\\\"2839*\\x8F \\\".p\\\"\\\"2p3q*\\x83 \\\"7&*} \\\".4\\\"\\\"2435*q \\\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".6\\\"\\\"2637*M \\\".>\\\"\\\"2>3?*A \\\".v\\\"\\\"2v3w*5 \\\".x\\\"\\\"2x3y*) \\\"7'*# \\\"7(\"),\n          peg$decode(\"! ]7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y+\\u0134$,\\u0131&7)*\\u012B \\\".F\\\"\\\"2F3G*\\u011F \\\".J\\\"\\\"2J3K*\\u0113 \\\".L\\\"\\\"2L3M*\\u0107 \\\".Y\\\"\\\"2Y3Z*\\xFB \\\".P\\\"\\\"2P3Q*\\xEF \\\".H\\\"\\\"2H3I*\\xE3 \\\".@\\\"\\\"2@3A*\\xD7 \\\".i\\\"\\\"2i3j*\\xCB \\\".R\\\"\\\"2R3S*\\xBF \\\".N\\\"\\\"2N3O*\\xB3 \\\".T\\\"\\\"2T3U*\\xA7 \\\".V\\\"\\\"2V3W*\\x9B \\\".l\\\"\\\"2l3m*\\x8F \\\".n\\\"\\\"2n3o*\\x83 \\\".8\\\"\\\"2839*w \\\".p\\\"\\\"2p3q*k \\\"7&*e \\\".4\\\"\\\"2435*Y \\\".r\\\"\\\"2r3s*M \\\".t\\\"\\\"2t3u*A \\\".6\\\"\\\"2637*5 \\\".v\\\"\\\"2v3w*) \\\".x\\\"\\\"2x3y\\\"\\\"\\\" X+& 4!6k! %\"),\n          peg$decode(\"!7/+A$.P\\\"\\\"2P3Q+1%7/+'%4#6z# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.4\\\"\\\"2435+1%7/+'%4#6{# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.>\\\"\\\"2>3?+1%7/+'%4#6|# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.T\\\"\\\"2T3U+1%7/+'%4#6}# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.V\\\"\\\"2V3W+1%7/+'%4#6~# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.n\\\"\\\"2n3o+1$7/+'%4\\\"6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+7$.l\\\"\\\"2l3m+'%4\\\"6\\x80\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.D\\\"\\\"2D3E+1%7/+'%4#6\\x81# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.2\\\"\\\"2233+1%7/+'%4#6\\x82# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+A$.8\\\"\\\"2839+1%7/+'%4#6\\x83# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+1$7&+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7&+1$7/+'%4\\\"6\\x84\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7=+W$ ]7G*) \\\"7K*# \\\"7F,/&7G*) \\\"7K*# \\\"7F\\\"+-%7>+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"0\\x85\\\"\\\"1!3\\x86*A \\\"0\\x87\\\"\\\"1!3\\x88*5 \\\"0\\x89\\\"\\\"1!3\\x8A*) \\\"73*# \\\"7.\"),\n          peg$decode(\"!7/+Y$7&+O% ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+1%7&+'%4$6k$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7/+`$7&+V%! ]7J*# \\\"7K,)&7J*# \\\"7K\\\"+! (%+2%7&+(%4$6\\x8B$!!%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7.*G \\\".L\\\"\\\"2L3M*; \\\"0\\x8C\\\"\\\"1!3\\x8D*/ \\\"0\\x89\\\"\\\"1!3\\x8A*# \\\"73\"),\n          peg$decode(\"!.p\\\"\\\"2p3q+K$0\\x8E\\\"\\\"1!3\\x8F*5 \\\"0\\x90\\\"\\\"1!3\\x91*) \\\"0\\x92\\\"\\\"1!3\\x93+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+Q$.8\\\"\\\"2839+A%7O*# \\\" \\\\+1%7S+'%4$6\\x94$ %$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7N+k$.8\\\"\\\"2839+[%7O*# \\\" \\\\+K%7S+A%7_+7%7l*# \\\" \\\\+'%4&6\\x95& %$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x96\\\"\\\"1$3\\x97*) \\\"/\\x98\\\"\\\"1#3\\x99+' 4!6\\x9A!! %\"),\n          peg$decode(\"!7P+b$!.8\\\"\\\"2839+-$7R+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+7%.:\\\"\\\"2:3;+'%4#6\\x9B# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7+*) \\\"7-*# \\\"7Q+2$,/&7+*) \\\"7-*# \\\"7Q\\\"\\\"\\\" X\"),\n          peg$decode(\".<\\\"\\\"2<3=*q \\\".>\\\"\\\"2>3?*e \\\".@\\\"\\\"2@3A*Y \\\".B\\\"\\\"2B3C*M \\\".D\\\"\\\"2D3E*A \\\".2\\\"\\\"2233*5 \\\".6\\\"\\\"2637*) \\\".4\\\"\\\"2435\"),\n          peg$decode(\"! ]7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E,e&7+*_ \\\"7-*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\\\"+& 4!6\\x9C! %\"),\n          peg$decode(\"!7T+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\x9D! %\"),\n          peg$decode(\"! ]!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X,>&!7V+3$.J\\\"\\\"2J3K+#%'\\\"%$\\\"# X\\\"# X\\\"+G$7W+=%.J\\\"\\\"2J3K*# \\\" \\\\+'%4#6\\x9E# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]0\\x9F\\\"\\\"1!3\\xA0+,$,)&0\\x9F\\\"\\\"1!3\\xA0\\\"\\\"\\\" X\"),\n          peg$decode(\"!0$\\\"\\\"1!3%+A$ ]0\\xA1\\\"\\\"1!3\\xA2,)&0\\xA1\\\"\\\"1!3\\xA2\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.r\\\"\\\"2r3s+A$7Y+7%.t\\\"\\\"2t3u+'%4#6\\xA3# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!7Z+\\xBF$.8\\\"\\\"2839+\\xAF%7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0838 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\xAF$7Z+\\xA5%.8\\\"\\\"2839+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0795 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95$7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u070C \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+{$7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u069D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+a$7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0648 \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+G$7Z+=%.8\\\"\\\"2839+-%7[+#%'$%$$# X$## X$\\\"# X\\\"# X*\\u060D \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7[+#%'\\\"%$\\\"# X\\\"# X*\\u05EC \\\"!.\\xA4\\\"\\\"2\\xA43\\xA5+-$7Z+#%'\\\"%$\\\"# X\\\"# X*\\u05CB \\\"!7Z+\\xA5$.\\xA4\\\"\\\"2\\xA43\\xA5+\\x95%7Z+\\x8B%.8\\\"\\\"2839+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0538 \\\"!7Z+\\xB6$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x8B%.\\xA4\\\"\\\"2\\xA43\\xA5+{%7Z+q%.8\\\"\\\"2839+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0494 \\\"!7Z+\\xC7$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x9C%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+q%.\\xA4\\\"\\\"2\\xA43\\xA5+a%7Z+W%.8\\\"\\\"2839+G%7Z+=%.8\\\"\\\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u03DF \\\"!7Z+\\xD8$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xAD%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x82%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+W%.\\xA4\\\"\\\"2\\xA43\\xA5+G%7Z+=%.8\\\"\\\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0319 \\\"!7Z+\\xE9$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0242 \\\"!7Z+\\u0114$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xE9%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xBE%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x93%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+h%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+=%.\\xA4\\\"\\\"2\\xA43\\xA5+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X*\\u0140 \\\"!7Z+\\u0135$!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\u010A%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xDF%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\xB4%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+\\x89%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+^%!.8\\\"\\\"2839+-$7Z+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+3%.\\xA4\\\"\\\"2\\xA43\\xA5+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X+& 4!6\\xA6! %\"),\n          peg$decode(\"!7#+S$7#*# \\\" \\\\+C%7#*# \\\" \\\\+3%7#*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7Z+=$.8\\\"\\\"2839+-%7Z+#%'#%$## X$\\\"# X\\\"# X*# \\\"7\\\\\"),\n          peg$decode(\"!7]+u$.J\\\"\\\"2J3K+e%7]+[%.J\\\"\\\"2J3K+K%7]+A%.J\\\"\\\"2J3K+1%7]+'%4'6\\xA7' %$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xA8\\\"\\\"2\\xA83\\xA9+3$0\\xAA\\\"\\\"1!3\\xAB+#%'\\\"%$\\\"# X\\\"# X*\\xA0 \\\"!.\\xAC\\\"\\\"2\\xAC3\\xAD+=$0\\xAE\\\"\\\"1!3\\xAF+-%7!+#%'#%$## X$\\\"# X\\\"# X*o \\\"!.\\xB0\\\"\\\"2\\xB03\\xB1+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X*D \\\"!0\\xB2\\\"\\\"1!3\\xB3+-$7!+#%'\\\"%$\\\"# X\\\"# X*# \\\"7!\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\xB4!! %\"),\n          peg$decode(\" ]!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7`+#%'\\\"%$\\\"# X\\\"# X\\\"\"),\n          peg$decode(\"7a*A \\\"7b*; \\\"7c*5 \\\"7d*/ \\\"7e*) \\\"7f*# \\\"7g\"),\n          peg$decode(\"!/\\xB5\\\"\\\"1*3\\xB6+b$/\\xB7\\\"\\\"1#3\\xB8*G \\\"/\\xB9\\\"\\\"1#3\\xBA*; \\\"/\\xBB\\\"\\\"1$3\\xBC*/ \\\"/\\xBD\\\"\\\"1#3\\xBE*# \\\"76+(%4\\\"6\\xBF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC0\\\"\\\"1%3\\xC1+J$/\\xC2\\\"\\\"1%3\\xC3*/ \\\"/\\xC4\\\"\\\"1\\\"3\\xC5*# \\\"76+(%4\\\"6\\xC6\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xC7\\\"\\\"1'3\\xC8+2$7\\x8F+(%4\\\"6\\xC9\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCA\\\"\\\"1$3\\xCB+2$7\\xEC+(%4\\\"6\\xCC\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xCD\\\"\\\"1&3\\xCE+2$7T+(%4\\\"6\\xCF\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xD0\\\"\\\"1\\\"3\\xD1+R$!.>\\\"\\\"2>3?+-$76+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xD2\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7h+T$!.>\\\"\\\"2>3?+-$7i+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\xD3\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD4!! %\"),\n          peg$decode(\"! ]7j+&$,#&7j\\\"\\\"\\\" X+' 4!6\\xD5!! %\"),\n          peg$decode(\"7k*) \\\"7+*# \\\"7-\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".8\\\"\\\"2839*A \\\".<\\\"\\\"2<3=*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"!.6\\\"\\\"2637+u$7m+k% ]!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X,>&!.<\\\"\\\"2<3=+-$7m+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7n+C$.>\\\"\\\"2>3?+3%7o+)%4#6\\xD6#\\\"\\\" %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-+2$,/&7p*) \\\"7+*# \\\"7-\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7p*) \\\"7+*# \\\"7-,/&7p*) \\\"7+*# \\\"7-\\\"\"),\n          peg$decode(\".r\\\"\\\"2r3s*e \\\".t\\\"\\\"2t3u*Y \\\".4\\\"\\\"2435*M \\\".6\\\"\\\"2637*A \\\".8\\\"\\\"2839*5 \\\".@\\\"\\\"2@3A*) \\\".B\\\"\\\"2B3C\"),\n          peg$decode(\"7\\x90*# \\\"7r\"),\n          peg$decode(\"!7\\x8F+K$7'+A%7s+7%7'+-%7\\x84+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7M*# \\\"7t\"),\n          peg$decode(\"!7+G$.8\\\"\\\"2839+7%7u*# \\\"7x+'%4#6\\xD7# %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7v*# \\\"7w+N$!.6\\\"\\\"2637+-$7\\x83+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!.\\xD8\\\"\\\"2\\xD83\\xD9+=$7\\x80+3%7w*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!.4\\\"\\\"2435+-$7{+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7z+5$ ]7y,#&7y\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7**) \\\"7+*# \\\"7-\"),\n          peg$decode(\"7+*\\x8F \\\"7-*\\x89 \\\".2\\\"\\\"2233*} \\\".6\\\"\\\"2637*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7|+k$ ]!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X,>&!.4\\\"\\\"2435+-$7|+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7~,#&7~\\\"+k$ ]!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X,>&!.2\\\"\\\"2233+-$7}+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\" ]7~,#&7~\\\"\"),\n          peg$decode(\"7+*w \\\"7-*q \\\".8\\\"\\\"2839*e \\\".:\\\"\\\"2:3;*Y \\\".<\\\"\\\"2<3=*M \\\".>\\\"\\\"2>3?*A \\\".@\\\"\\\"2@3A*5 \\\".B\\\"\\\"2B3C*) \\\".D\\\"\\\"2D3E\"),\n          peg$decode(\"!7\\\"+\\x8D$ ]7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K,M&7\\\"*G \\\"7!*A \\\".@\\\"\\\"2@3A*5 \\\".F\\\"\\\"2F3G*) \\\".J\\\"\\\"2J3K\\\"+'%4\\\"6\\xDA\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\x81*# \\\"7\\x82\"),\n          peg$decode(\"!!7O+3$.:\\\"\\\"2:3;+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+-$7S+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\" ]7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A+\\x8C$,\\x89&7+*\\x83 \\\"7-*} \\\".B\\\"\\\"2B3C*q \\\".D\\\"\\\"2D3E*e \\\".2\\\"\\\"2233*Y \\\".8\\\"\\\"2839*M \\\".:\\\"\\\"2:3;*A \\\".<\\\"\\\"2<3=*5 \\\".>\\\"\\\"2>3?*) \\\".@\\\"\\\"2@3A\\\"\\\"\\\" X\"),\n          peg$decode(\" ]7y,#&7y\\\"\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB+y$.4\\\"\\\"2435+i% ]7!+&$,#&7!\\\"\\\"\\\" X+P%.J\\\"\\\"2J3K+@% ]7!+&$,#&7!\\\"\\\"\\\" X+'%4%6\\xDC% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\".\\xDD\\\"\\\"2\\xDD3\\xDE\"),\n          peg$decode(\".\\xDF\\\"\\\"2\\xDF3\\xE0\"),\n          peg$decode(\".\\xE1\\\"\\\"2\\xE13\\xE2\"),\n          peg$decode(\".\\xE3\\\"\\\"2\\xE33\\xE4\"),\n          peg$decode(\".\\xE5\\\"\\\"2\\xE53\\xE6\"),\n          peg$decode(\".\\xE7\\\"\\\"2\\xE73\\xE8\"),\n          peg$decode(\".\\xE9\\\"\\\"2\\xE93\\xEA\"),\n          peg$decode(\".\\xEB\\\"\\\"2\\xEB3\\xEC\"),\n          peg$decode(\".\\xED\\\"\\\"2\\xED3\\xEE\"),\n          peg$decode(\".\\xEF\\\"\\\"2\\xEF3\\xF0\"),\n          peg$decode(\"!7\\x85*S \\\"7\\x86*M \\\"7\\x88*G \\\"7\\x89*A \\\"7\\x8A*; \\\"7\\x8B*5 \\\"7\\x8C*/ \\\"7\\x8D*) \\\"7\\x8E*# \\\"76+& 4!6\\xF1! %\"),\n          peg$decode(\"!7\\x84+K$7'+A%7\\x91+7%7'+-%7\\x93+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x92+' 4!6\\xF2!! %\"),\n          peg$decode(\"!7!+7$7!+-%7!+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(,G&7**A \\\"7+*; \\\"7-*5 \\\"73*/ \\\"74*) \\\"7'*# \\\"7(\\\"+& 4!6\\xF3! %\"),\n          peg$decode(\"!7\\xB5+_$ ]!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xB5+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!79+R$!.:\\\"\\\"2:3;+-$79+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\xF4\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7:*j \\\"!7\\x97+_$ ]!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\x97+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+& 4!6\\xF5! %\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9A+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\xF6\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x99*# \\\" \\\\+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!!76+_$ ]!7.+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7.+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\"7H+' 4!6\\xF7!! %\"),\n          peg$decode(\"7\\x9B*) \\\"7\\x9C*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\xF8\\\"\\\"1!3\\xF9+<$7<+2%7\\x9E+(%4#6\\xFA#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\xFD#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\xFE!! %\"),\n          peg$decode(\"!.\\xFF\\\"\\\"2\\xFF3\\u0100+x$!.J\\\"\\\"2J3K+S$7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0101\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+N$!7<+-$7\\xA0+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+)%4\\\"6\\u0102\\\"\\\"! %$\\\"# X\\\"# X\"),\n          peg$decode(\"76*) \\\"7T*# \\\"7H\"),\n          peg$decode(\"!7\\xA2+_$ ]!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xA3+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0103\\\"\\\"1&3\\u0104*G \\\"/\\u0105\\\"\\\"1'3\\u0106*; \\\"/\\u0107\\\"\\\"1$3\\u0108*/ \\\"/\\u0109\\\"\\\"1%3\\u010A*# \\\"76+& 4!6\\u010B! %\"),\n          peg$decode(\"7\\xA4*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u010C\\\"\\\"1(3\\u010D+O$7<+E%/\\u010E\\\"\\\"1(3\\u010F*/ \\\"/\\u0110\\\"\\\"1(3\\u0111*# \\\"76+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0112!! %\"),\n          peg$decode(\"!7\\xA8+& 4!6\\u0113! %\"),\n          peg$decode(\"!7\\xA9+s$7;+i%7\\xAE+_% ]!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xAF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAA*# \\\"7\\xAB\"),\n          peg$decode(\"/\\u0114\\\"\\\"1$3\\u0115*S \\\"/\\u0116\\\"\\\"1%3\\u0117*G \\\"/\\u0118\\\"\\\"1%3\\u0119*; \\\"/\\u011A\\\"\\\"1%3\\u011B*/ \\\"/\\u011C\\\"\\\"1+3\\u011D*# \\\"7\\xAC\"),\n          peg$decode(\"/\\u011E\\\"\\\"1'3\\u011F*/ \\\"/\\u0120\\\"\\\"1)3\\u0121*# \\\"7\\xAC\"),\n          peg$decode(\"76*# \\\"7\\xAD\"),\n          peg$decode(\"!/\\u0122\\\"\\\"1\\\"3\\u0123+-$76+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xAC*# \\\"76\"),\n          peg$decode(\"!76+7$7<+-%7\\xB0+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"76*# \\\"7H\"),\n          peg$decode(\"!7\\xB2+7$7.+-%7\\x8F+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0124!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u0125!! %\"),\n          peg$decode(\"!7\\xB5+d$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+(%4\\\"6\\u0126\\\"!!%$\\\"# X\\\"# X\"),\n          peg$decode(\"!!77+k$ ]!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X,>&!.J\\\"\\\"2J3K+-$77+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+! (%\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xB7+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0127\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0128\\\"\\\"1#3\\u0129+<$7<+2%76+(%4#6\\u012A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u012B!! %\"),\n          peg$decode(\"!7\\x9D+' 4!6\\u012C!! %\"),\n          peg$decode(\"! ]7\\x99,#&7\\x99\\\"+\\x81$7@+w%7M+m%7?+c% ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4%6\\u012D% %$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!/\\u012E\\\"\\\"1&3\\u012F+s$7.+i%7\\xC0+_% ]!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xC0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X*# \\\"7\\xBE\"),\n          peg$decode(\"!76+s$7.+i%7\\xBF+_% ]!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xBF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+=$7<+3%76*# \\\"7H+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xC1*G \\\"7\\xC3*A \\\"7\\xC5*; \\\"7\\xC7*5 \\\"7\\xC8*/ \\\"7\\xC9*) \\\"7\\xCA*# \\\"7\\xBF\"),\n          peg$decode(\"!/\\u0130\\\"\\\"1%3\\u0131+7$7<+-%7\\xC2+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0132!! %\"),\n          peg$decode(\"!/\\u0133\\\"\\\"1&3\\u0134+\\xA5$7<+\\x9B%7D+\\x91%7\\xC4+\\x87% ]! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X,G&! ]7'+&$,#&7'\\\"\\\"\\\" X+-$7\\xC4+#%'\\\"%$\\\"# X\\\"# X\\\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7t*# \\\"7w\"),\n          peg$decode(\"!/\\u0135\\\"\\\"1%3\\u0136+7$7<+-%7\\xC6+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7I+' 4!6\\u0137!! %\"),\n          peg$decode(\"!/\\u0138\\\"\\\"1&3\\u0139+<$7<+2%7I+(%4#6\\u013A#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u013B\\\"\\\"1%3\\u013C+_$7<+U%!/\\u013D\\\"\\\"1$3\\u013E+& 4!6\\u013F! %*4 \\\"!/\\u0140\\\"\\\"1%3\\u0141+& 4!6\\u0142! %+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0143\\\"\\\"1)3\\u0144+T$7<+J%/\\u0145\\\"\\\"1#3\\u0146*/ \\\"/\\u0147\\\"\\\"1(3\\u0148*# \\\"76+(%4#6\\u0149#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014A\\\"\\\"1#3\\u014B+\\x9E$7<+\\x94%7D+\\x8A%!7\\xCB+k$ ]!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X,>&!.D\\\"\\\"2D3E+-$7\\xCB+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X+-%7E+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u014C\\\"\\\"1(3\\u014D*/ \\\"/\\u014E\\\"\\\"1$3\\u014F*# \\\"76+' 4!6\\u0150!! %\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xCE+K$7.+A%7\\xCE+7%7.+-%7\\x8F+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0151!! %\"),\n          peg$decode(\"!7\\xD0+c$ ]!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD0+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0152\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0153\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7L*) \\\"7\\x98*# \\\"7t+c$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0154\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xD4+_$ ]!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xD4+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\x98+_$ ]!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\x9F+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"! ]7!+&$,#&7!\\\"\\\"\\\" X+' 4!6\\u0155!! %\"),\n          peg$decode(\"!7\\xD7+_$ ]!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xD8+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0156\\\"\\\"1&3\\u0157*; \\\"/\\u0158\\\"\\\"1'3\\u0159*/ \\\"/\\u015A\\\"\\\"1*3\\u015B*# \\\"76+& 4!6\\u015C! %\"),\n          peg$decode(\"!/\\u015D\\\"\\\"1&3\\u015E+<$7<+2%7\\xD9+(%4#6\\u015F#! %$## X$\\\"# X\\\"# X*\\x83 \\\"!/\\xFB\\\"\\\"1'3\\xFC+<$7<+2%7\\x9D+(%4#6\\u0160#! %$## X$\\\"# X\\\"# X*S \\\"!/\\u0161\\\"\\\"1+3\\u0162+<$7<+2%7\\x9D+(%4#6\\u0163#! %$## X$\\\"# X\\\"# X*# \\\"7\\x9F\"),\n          peg$decode(\"/\\u0164\\\"\\\"1+3\\u0165*k \\\"/\\u0166\\\"\\\"1)3\\u0167*_ \\\"/\\u0168\\\"\\\"1(3\\u0169*S \\\"/\\u016A\\\"\\\"1'3\\u016B*G \\\"/\\u016C\\\"\\\"1&3\\u016D*; \\\"/\\u016E\\\"\\\"1*3\\u016F*/ \\\"/\\u0170\\\"\\\"1)3\\u0171*# \\\"76\"),\n          peg$decode(\"71*# \\\" \\\\\"),\n          peg$decode(\"!76+_$ ]!7A+-$76+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$76+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\\"),\n          peg$decode(\"!7L*# \\\"7\\x98+c$ ]!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xDD+#%'\\\"%$\\\"# X\\\"# X\\\"+'%4\\\"6\\u0172\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xB8*# \\\"7\\x9F\"),\n          peg$decode(\"!7\\xDF+_$ ]!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X,8&!7A+-$7\\xDF+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE6+s$7.+i%7\\xE9+_% ]!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X,8&!7B+-$7\\xE0+#%'\\\"%$\\\"# X\\\"# X\\\"+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"7\\xE1*; \\\"7\\xE2*5 \\\"7\\xE3*/ \\\"7\\xE4*) \\\"7\\xE5*# \\\"7\\x9F\"),\n          peg$decode(\"!/\\u0173\\\"\\\"1#3\\u0174+<$7<+2%7\\xEC+(%4#6\\u0175#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0176\\\"\\\"1%3\\u0177+<$7<+2%7T+(%4#6\\u0178#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0179\\\"\\\"1(3\\u017A+B$7<+8%7\\\\*# \\\"7Y+(%4#6\\u017B#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017C\\\"\\\"1&3\\u017D+<$7<+2%76+(%4#6\\u017E#! %$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u017F\\\"\\\"1%3\\u0180+T$!7<+5$ ]7!,#&7!\\\"+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+'%4\\\"6\\u0181\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xE7+K$7;+A%76+7%7;+-%7\\xE8+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\x98\\\"\\\"1#3\\xDB*# \\\"76+' 4!6\\u0182!! %\"),\n          peg$decode(\"!/\\xB7\\\"\\\"1#3\\u0183*G \\\"/\\xB9\\\"\\\"1#3\\u0184*; \\\"/\\xBD\\\"\\\"1#3\\u0185*/ \\\"/\\xBB\\\"\\\"1$3\\u0186*# \\\"76+' 4!6\\u0187!! %\"),\n          peg$decode(\"!7\\xEA+H$!7C+-$7\\xEB+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7U*) \\\"7\\\\*# \\\"7X+& 4!6\\u0188! %\"),\n          peg$decode(\"!!7!*# \\\" \\\\+c$7!*# \\\" \\\\+S%7!*# \\\" \\\\+C%7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'%%$%# X$$# X$## X$\\\"# X\\\"# X+' 4!6\\u0189!! %\"),\n          peg$decode(\"!!7!+C$7!*# \\\" \\\\+3%7!*# \\\" \\\\+#%'#%$## X$\\\"# X\\\"# X+' 4!6\\u018A!! %\"),\n          peg$decode(\"7\\xBD\"),\n          peg$decode(\"!76+7$70+-%7\\xEF+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\" ]72*) \\\"74*# \\\"7.,/&72*) \\\"74*# \\\"7.\\\"\"),\n          peg$decode(\" ]7%,#&7%\\\"\"),\n          peg$decode(\"!7\\xF2+=$.8\\\"\\\"2839+-%7\\xF3+#%'#%$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u018B\\\"\\\"1%3\\u018C*) \\\"/\\u018D\\\"\\\"1$3\\u018E+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xF4+N$!.8\\\"\\\"2839+-$7^+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\\\*) \\\"7X*# \\\"7\\x82+' 4!6\\u0190!! %\"),\n          peg$decode(\"! ]7\\xF6*) \\\"7-*# \\\"7\\xF7,/&7\\xF6*) \\\"7-*# \\\"7\\xF7\\\"+& 4!6\\u0191! %\"),\n          peg$decode(\"7\\\"*S \\\"7!*M \\\".F\\\"\\\"2F3G*A \\\".J\\\"\\\"2J3K*5 \\\".H\\\"\\\"2H3I*) \\\".N\\\"\\\"2N3O\"),\n          peg$decode(\".L\\\"\\\"2L3M*\\x95 \\\".B\\\"\\\"2B3C*\\x89 \\\".<\\\"\\\"2<3=*} \\\".R\\\"\\\"2R3S*q \\\".T\\\"\\\"2T3U*e \\\".V\\\"\\\"2V3W*Y \\\".P\\\"\\\"2P3Q*M \\\".@\\\"\\\"2@3A*A \\\".D\\\"\\\"2D3E*5 \\\".2\\\"\\\"2233*) \\\".>\\\"\\\"2>3?\"),\n          peg$decode(\"!7\\xF9+h$.8\\\"\\\"2839+X%7\\xF3+N%!.\\u0192\\\"\\\"2\\u01923\\u0193+-$7\\xE8+#%'\\\"%$\\\"# X\\\"# X*# \\\" \\\\+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!/\\u0194\\\"\\\"1%3\\u0195*) \\\"/\\u0196\\\"\\\"1$3\\u0197+' 4!6\\u018F!! %\"),\n          peg$decode(\"!7\\xE8+Q$/\\xB7\\\"\\\"1#3\\xB8*7 \\\"/\\xB9\\\"\\\"1#3\\xBA*+ \\\" ]7+,#&7+\\\"+'%4\\\"6\\u0198\\\" %$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFD+\\x8F$.F\\\"\\\"2F3G+%7\\xFC+u%.F\\\"\\\"2F3G+e%7\\xFC+[%.F\\\"\\\"2F3G+K%7\\xFC+A%.F\\\"\\\"2F3G+1%7\\xFE+'%4)6\\u0199) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+-$7\\xFC+#%'\\\"%$\\\"# X\\\"# X\"),\n          peg$decode(\"!7\\xFC+7$7\\xFC+-%7\\xFC+#%'#%$## X$\\\"# X\\\"# X\")\n        ],\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleIndices)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleIndex = peg$startRuleIndices[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$decode(s) {\n      var bc = new Array(s.length), i;\n\n      for (i = 0; i < s.length; i++) {\n        bc[i] = s.charCodeAt(i) - 32;\n      }\n\n      return bc;\n    }\n\n    function peg$parseRule(index) {\n      var bc    = peg$bytecode[index],\n          ip    = 0,\n          ips   = [],\n          end   = bc.length,\n          ends  = [],\n          stack = [],\n          params, i;\n\n      function protect(object) {\n        return Object.prototype.toString.apply(object) === \"[object Array]\" ? [] : object;\n      }\n\n      while (true) {\n        while (ip < end) {\n          switch (bc[ip]) {\n            case 0:\n              stack.push(protect(peg$consts[bc[ip + 1]]));\n              ip += 2;\n              break;\n\n            case 1:\n              stack.push(peg$currPos);\n              ip++;\n              break;\n\n            case 2:\n              stack.pop();\n              ip++;\n              break;\n\n            case 3:\n              peg$currPos = stack.pop();\n              ip++;\n              break;\n\n            case 4:\n              stack.length -= bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 5:\n              stack.splice(-2, 1);\n              ip++;\n              break;\n\n            case 6:\n              stack[stack.length - 2].push(stack.pop());\n              ip++;\n              break;\n\n            case 7:\n              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 8:\n              stack.pop();\n              stack.push(input.substring(stack[stack.length - 1], peg$currPos));\n              ip++;\n              break;\n\n            case 9:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1]) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 10:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] === peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 11:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 12:\n              if (stack[stack.length - 1] !== peg$FAILED) {\n                ends.push(end);\n                ips.push(ip);\n\n                end = ip + 2 + bc[ip + 1];\n                ip += 2;\n              } else {\n                ip += 2 + bc[ip + 1];\n              }\n\n              break;\n\n            case 13:\n              ends.push(end);\n              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);\n\n              if (input.length > peg$currPos) {\n                end = ip + 3 + bc[ip + 1];\n                ip += 3;\n              } else {\n                end = ip + 3 + bc[ip + 1] + bc[ip + 2];\n                ip += 3 + bc[ip + 1];\n              }\n\n              break;\n\n            case 14:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 15:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 16:\n              ends.push(end);\n              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);\n\n              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {\n                end = ip + 4 + bc[ip + 2];\n                ip += 4;\n              } else {\n                end = ip + 4 + bc[ip + 2] + bc[ip + 3];\n                ip += 4 + bc[ip + 2];\n              }\n\n              break;\n\n            case 17:\n              stack.push(input.substr(peg$currPos, bc[ip + 1]));\n              peg$currPos += bc[ip + 1];\n              ip += 2;\n              break;\n\n            case 18:\n              stack.push(peg$consts[bc[ip + 1]]);\n              peg$currPos += peg$consts[bc[ip + 1]].length;\n              ip += 2;\n              break;\n\n            case 19:\n              stack.push(peg$FAILED);\n              if (peg$silentFails === 0) {\n                peg$fail(peg$consts[bc[ip + 1]]);\n              }\n              ip += 2;\n              break;\n\n            case 20:\n              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];\n              ip += 2;\n              break;\n\n            case 21:\n              peg$reportedPos = peg$currPos;\n              ip++;\n              break;\n\n            case 22:\n              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);\n              for (i = 0; i < bc[ip + 3]; i++) {\n                params[i] = stack[stack.length - 1 - params[i]];\n              }\n\n              stack.splice(\n                stack.length - bc[ip + 2],\n                bc[ip + 2],\n                peg$consts[bc[ip + 1]].apply(null, params)\n              );\n\n              ip += 4 + bc[ip + 3];\n              break;\n\n            case 23:\n              stack.push(peg$parseRule(bc[ip + 1]));\n              ip += 2;\n              break;\n\n            case 24:\n              peg$silentFails++;\n              ip++;\n              break;\n\n            case 25:\n              peg$silentFails--;\n              ip++;\n              break;\n\n            default:\n              throw new Error(\"Invalid opcode: \" + bc[ip] + \".\");\n          }\n        }\n\n        if (ends.length > 0) {\n          end = ends.pop();\n          ip = ips.pop();\n        } else {\n          break;\n        }\n      }\n\n      return stack[0];\n    }\n\n    var data = {};\n\n    peg$result = peg$parseRule(peg$startRuleIndex);\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return data;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      return -1;\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       function (input, startRule) {return parse(input, {startRule: startRule});}\n  };\n};\n/* jshint ignore:end */\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/sip.js/src/Grammar/dist/Grammar.js\n ** module id = 34\n ** module chunks = 0\n **/","var EventEmitter = function() {\n    this.handlers = {};\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.emit = function(name /*, args */) {\n    var self = this, args = Array.prototype.slice.call(arguments, 1);\n    if (name in this.handlers) {\n        var list = this.handlers[name];\n        for (var i = 0; i < list.length; i++) {\n            setTimeout(executeListener(list[i]), 0);\n        }\n    }\n    function executeListener(listener) {\n        return function() {\n            listener.apply(self, args);\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.on = function(name, listener) {\n    if (!Array.isArray(name)) name = [name];\n    for (var i = 0; i < name.length; i++) {\n        this.handlers[name[i]] = this.handlers[name[i]] || [];\n        var list = this.handlers[name[i]];\n        list.push(listener);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nEventEmitter.prototype.off = function(name, listener) {\n    this.handlers[name] = this.handlers[name] || [];\n    var index = this.handlers[name].indexOf(listener);\n    if (index !== -1) {\n        this.handlers[name].splice(index, 1);\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\nEventEmitter.prototype.once = function(name, listener) {\n    var self = this;\n\n    function listenOnce() {\n        listener.apply(this, arguments);\n        self.off(name, listenOnce);\n    }\n\n    self.on(name, listenOnce);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME Remove Angular-specific\n//monkey patching emit for assuring that $apply is called\nvar __emit = EventEmitter.prototype.emit;\nEventEmitter.prototype.emit = function() {\n    var self = this, args = arguments;\n    setTimeout(function() {\n        __emit.apply(self, args);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = EventEmitter;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/emitter.js\n ** module id = 35\n ** module chunks = 0\n **/","var SIP = require('sip.js');\nvar EventEmitter = require('./emitter');\nvar PhoneLine = require('./phoneLine');\nvar utils = require('./utils');\n\nvar extend = utils.extend;\nvar uuid = utils.uuid;\n\nvar EVENT_NAMES = require('./eventNames');\nvar DomAudio = require('./dom');\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * @param options\n * @constructor\n */\nvar UserAgent = function(options) {\n    this.eventEmitter = new EventEmitter();\n    this.sipConfig = options ? (options.sipConfig || {}) : ({});\n    this.lines = {};\n    this.userAgent = undefined;\n    this.getUserMedia = undefined;\n    this.RTCPeerConnection = undefined;\n    this.RTCSessionDescription = undefined;\n    this.dom = new DomAudio();\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.checkConfig = function() {\n    // set mootools expands to non-enumerables under ES5\n    if (typeof this.sipConfig.wsServers === 'string') {\n        this.sipConfig.wsServers = [\n            {ws_uri: this.sipConfig.wsServers}\n        ];\n    }\n    var key, enums = {enumerable: false};\n    for (key in this.sipConfig.wsServers) this.sipConfig.wsServers.hasOwnProperty(key) || Object.defineProperty(Array.prototype, key, enums);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.setSIPConfig = function(config) {\n    var wsServers = config.wsServers,\n        useSecureConnection = (document.location.protocol == 'https:');\n\n    for (var i = 0; i < wsServers.length; i++) {\n        if (\n            (useSecureConnection && /^wss:/.test(wsServers[i]))\n            ||\n            (!useSecureConnection && /^ws:/.test(wsServers[i]))\n        ) {\n            config.wsServers = [wsServers[i]];\n            break;\n        }\n    }\n\n    this.sipConfig = config;\n    this.checkConfig();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__createLine = function(session, type) {\n    var self = this;\n    session.data.id = uuid();\n    self.eventEmitter.emit(EVENT_NAMES.sipRTCSession, session);\n    var line = new PhoneLine({\n        session: session,\n        userAgent: self,\n        instanceId: self.sipConfig.authorizationUser,\n        eventEmitter: self.eventEmitter,\n        type: type\n    });\n    self.__clearInactiveLines();\n    self.lines[session.data.id] = line;\n    window.line = line;\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLines = function() {\n    this.__clearInactiveLines();\n    return this.lines;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getActiveLinesArray = function() {\n    var lines = this.getActiveLines();\n    var arr = [];\n    for (var id in lines) {\n        if (lines.hasOwnProperty(id)) {\n            arr.push(lines[id]);\n        }\n    }\n    return arr;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.getIncomingLinesArray = function() {\n    return this.getActiveLinesArray().filter(function(el) {\n        return el.isIncoming();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.__clearInactiveLines = function() {\n    for (var id in this.lines) {\n        if (this.lines.hasOwnProperty(id)) {\n            if (this.lines[id].isClosed()) {\n                delete this.lines[id];\n            }\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nvar __disconnectCount = 0;\n\n\nUserAgent.prototype.start = function(options) {\n    var self = this;\n\n    self.stop();\n    if (self.userAgent instanceof SIP.UA) {\n        self.userAgent.loadConfig(self.sipConfig);\n        self.userAgent.traceSip = true;\n    }\n    else {\n        self.userAgent = new SIP.UA(self.sipConfig);\n        self.__registerExtraOptions = options || {};\n        self.userAgent.on('connected', function(e) {\n            __disconnectCount = 0;\n            self.eventEmitter.emit(EVENT_NAMES.sipConnected, e);\n            self.userAgent.register({\n                extraHeaders: options.extraHeaders || []\n            });\n        });\n        self.userAgent.on('disconnected', function(e) {\n            if (++__disconnectCount >= (self.sipConfig.retryCount || 3)) {\n                __disconnectCount = 0;\n                self.stop();\n                self.eventEmitter.emit(EVENT_NAMES.sipConnectionFailed, new Error(\"Unable to connect to the WS server: exceeded number of attempts\"));\n            }\n            self.eventEmitter.emit(EVENT_NAMES.sipDisconnected, e);\n        });\n        self.userAgent.on('registered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistered, e);\n        });\n        self.userAgent.on('unregistered', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipUnRegistered, e);\n        });\n        self.userAgent.on('registrationFailed', function(e) {\n            self.eventEmitter.emit(EVENT_NAMES.sipRegistrationFailed, e);\n        });\n        //happens when call is incoming\n        self.userAgent.on('invite', function(session) {\n            var newLine;\n\n            if (session && session.request && session.request.hasHeader('replaces')) {\n                var replaces = session.request.getHeader('replaces').split(';'),\n                    callId = replaces[0],\n                    lines = self.getActiveLinesArray(),\n                    foundLine = null;\n                for (var i = 0; i < lines.length; i++) {\n                    if (lines[i].session.request.call_id) {\n                        if (callId === lines[i].session.request.call_id) {\n                            foundLine = lines[i];\n                            break;\n                        }\n                    }\n                }\n\n                if (foundLine) {\n                    var originalSessionId = foundLine.getId();\n                    newLine = self.__createLine(session, PhoneLine.types.incoming);\n                    newLine.answer().then(function() {\n                        self.eventEmitter.emit(EVENT_NAMES.callReplaced, newLine, foundLine);\n                        foundLine.cancel();\n                    });\n                }\n            }\n            else {\n                newLine = self.__createLine(session, PhoneLine.types.incoming);\n                self.eventEmitter.emit(EVENT_NAMES.sipIncomingCall, newLine);\n            }\n        });\n    }\n    //noop on transport connected (this will cause unwanted REGISTER)\n    self.userAgent.registerContext.onTransportConnected = function() {};\n    self.userAgent.start();\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.reregister = function(options, reconnect) {\n    var self = this, reconnect = !!reconnect;\n    options = extend(self.__registerExtraOptions, options);\n    if (!self.userAgent) {\n        self.start(options);\n    }\n    if (!reconnect) {\n        self.userAgent.register(options);\n    }\n    else {\n        if (!self.isConnected()) {\n            self.stop();\n            self.start(options);\n        }\n        else {\n            //This will be treated as abrupt disconnection and SIP.js will try to reconnect the WS\n            self.userAgent.transport.ws.close();\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.stop = function() {\n    if (this.userAgent instanceof SIP.UA) {\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.call = function(number, inviteOptions) {\n    var self = this;\n    var options = {\n        media: {\n            constraints: {audio: true, video: false},\n            render: {\n                local: {\n                    audio: self.dom.localAudio\n                },\n                remote: {\n                    audio: self.dom.remoteAudio\n                }\n            }\n        },\n        RTCConstraints: {\n            \"optional\": [\n                {'DtlsSrtpKeyAgreement': 'true'}\n            ]\n        }\n    };\n    var fromNumber = inviteOptions.fromNumber;\n    var country = inviteOptions.country;\n\n    var headers = [];\n    if (fromNumber) {\n        headers.push('P-Asserted-Identity: sip:' + fromNumber + '@' + this.sipConfig.domain);\n    }\n    if (country) {\n        headers.push('P-rc-country-id: ' + country);\n    }\n    extend(options, {\n        extraHeaders: headers\n    });\n    var session = this.userAgent.invite('' + number, options);\n    var line = self.__createLine(session, PhoneLine.types.outgoing);\n    this.eventEmitter.emit(EVENT_NAMES.outgoingCall, line);\n    return line;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.answer = function(line) {\n    return line && line.answer();\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nUserAgent.prototype.hangup = function(line) {\n    if (line) {\n        line.cancel();\n        delete this.lines[line.getId()];\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.on = function(eventName, cb) {\n    this.eventEmitter.on(eventName, cb);\n    return this;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnected = function() {\n    return !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.connected);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.isConnecting = function() {\n    //websocket.readyState === CONNECTING (0)\n    return !this.isConnected() && !!(this.userAgent && this.userAgent.transport && this.userAgent.transport.ws && this.userAgent.transport.ws.readyState === 0);\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nUserAgent.prototype.forceDisconnect = function() {\n    console.warn(this.isConnecting(), this.isConnected())\n    if (this.isConnecting() || this.isConnected()) {\n        this.userAgent.transport.disconnect();\n        this.userAgent.stop();\n        this.userAgent = null;\n    }\n};\n\nmodule.exports = UserAgent;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/userAgent.js\n ** module id = 36\n ** module chunks = 0\n **/","var SIP = require('sip.js');\nvar utils = require('./utils');\nvar EVENT_NAMES = require('./eventNames');\n\nvar delay = utils.delay;\nvar extend = utils.extend;\n\nvar index = 0;\n\n/**\n * @param options\n * @constructor\n */\nvar PhoneLine = function(options) {\n\n    var self = this;\n    this.index = index++;\n\n    this.session = options.session;\n    this.userAgent = options.userAgent;\n    this.eventEmitter = options.eventEmitter;\n    this.instanceId = options.instanceId;\n    this.sessionId = this.session && this.session.id;\n\n    this.onCall = false;\n    this.onRecord = false;\n    this.contact = {};\n    this.muted = false;\n    this.bothMuted = false;\n    this.onHold = false;\n    this.timeCallStarted = null;\n\n    this.accepted = false;\n    this.type = options.type;\n\n    this.responseTimeout = 10000;\n\n    this.controlSender = {\n        messages: {\n            park: {reqid: 1, command: 'callpark'},\n            startRecord: {reqid: 2, command: 'startcallrecord'},\n            stopRecord: {reqid: 3, command: 'stopcallrecord'},\n            flip: {reqid: 3, command: 'callflip', target: ''},\n            monitor: {reqid: 4, command: 'monitor'},\n            barge: {reqid: 5, command: 'barge'},\n            whisper: {reqid: 6, command: 'whisper'},\n            takeover: {reqid: 7, command: 'takeover'}\n        },\n        send: function(command, options) {\n\n            options = options || {};\n            extend(command, options);\n\n            var cseq = null;\n\n            return new Promise(function(resolve, reject){\n                self.session.sendRequest(SIP.C.INFO, {\n                    body: JSON.stringify({\n                        request: command\n                    }),\n                    extraHeaders: [\n                        \"Content-Type: application/json;charset=utf-8\"\n                    ],\n                    receiveResponse: function(response) {\n                        var timeout = null;\n                        if (response.status_code === 200) {\n                            cseq = response.cseq;\n                            function onInfo(request) {\n                                if (response.cseq === cseq) {\n                                    var body = request && request.body || '{}';\n                                    var obj;\n\n                                    try {\n                                        obj = JSON.parse(body);\n                                    }\n                                    catch (e) {\n                                        obj = {};\n                                    }\n\n                                    if (obj.response && obj.response.command === command.command) {\n                                        if (obj.response.result) {\n                                            if (obj.response.result.code == 0) {\n                                                resolve(obj.response.result);\n                                            }\n                                            else {\n                                                reject(obj.response.result);\n                                            }\n                                        }\n                                    }\n                                    timeout && clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_INFO', onInfo);\n                                    resolve(); //FIXME What to resolve\n                                }\n                            }\n\n                            timeout = setTimeout(function() {\n                                reject(new Error('Timeout: no reply'));\n                                self.eventEmitter.off('SIP_INFO', onInfo);\n                            }, self.responseTimeout);\n                            self.eventEmitter.on('SIP_INFO', onInfo);\n                        }\n                        else {\n                            reject(new Error('The INFO response status code is: ' + response.status_code + ' (waiting for 200)'));\n                        }\n                    }\n                });\n\n            });\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __receiveRequest = this.session.receiveRequest;\n    this.session.receiveRequest = function(request) {\n        switch (request.method) {\n            case SIP.C.INFO:\n                self.eventEmitter.emit('SIP_INFO', request);\n                //SIP.js does not support application/json content type, so we monkey override its behaviour in this case\n                if (this.status === SIP.Session.C.STATUS_CONFIRMED || this.status === SIP.Session.C.STATUS_WAITING_FOR_ACK) {\n                    var contentType = request.getHeader('content-type');\n                    if (contentType.match(/^application\\/json/i)) {\n                        request.reply(200);\n                        return this;\n                    }\n                }\n                break;\n            //Refresh invite should not be rejected with 488\n            case SIP.C.INVITE:\n                var session = this;\n                if (session.status === SIP.Session.C.STATUS_CONFIRMED) {\n                    if (request.call_id && session.dialog && session.dialog.id && request.call_id == session.dialog.id.call_id) {\n                        //TODO: check that SDP did not change\n                        session.logger.log('re-INVITE received');\n                        var localSDP = session.mediaHandler.peerConnection.localDescription.sdp;\n                        request.reply(200, null, ['Contact: ' + self.contact], localSDP, function() {\n                            session.status = SIP.Session.C.STATUS_WAITING_FOR_ACK;\n                            session.setInvite2xxTimer(request, localSDP);\n                            session.setACKTimer();\n                        });\n                        return session;\n                    }\n                    //else will be rejected with 488 by SIP.js\n                }\n                break;\n            //We need to analize NOTIFY messages sometimes, so we fire an event\n            case SIP.C.NOTIFY:\n                self.eventEmitter.emit('SIP_NOTIFY', request);\n                break;\n        }\n        return __receiveRequest.apply(self.session, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when ICE is starting to negotiate between the peers.\n    this.session.on('connecting', function(e) {\n        self.eventEmitter.emit(EVENT_NAMES.callConnecting, self, e);\n        setTimeout(function() {\n            if (self.session.mediaHandler.onIceCompleted !== undefined) {\n                self.session.mediaHandler.onIceCompleted(self.session);\n            }\n            else {\n                self.session.mediaHandler.callOnIceCompleted = true;\n            }\n        }, self.userAgent.sipConfig['iceGatheringTimeout'] || 3000);\n    });\n\n    this.__hasEarlyMedia = false;\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n\n    //Monkey patching for handling early media and to delay ACKs\n    var __receiveInviteReponse = this.session.receiveInviteResponse,\n        __waitingForIce = false;\n    this.session.receiveResponse = this.session.receiveInviteResponse = function(response) {\n        var sessionSelf = this, args = arguments;\n        switch (true) {\n            case (/^1[0-9]{2}$/.test(response.status_code)):\n                //Let's not allow the library to send PRACK\n                if (self.hasEarlyMedia()) {\n                    this.emit('progress', response);\n                    return;\n                }\n                break;\n            case /^(2[0-9]{2})|(4\\d{2})$/.test(response.status_code):\n                if (!self.hasEarlyMedia()) break;\n\n                //Let's check the ICE connection state\n                if (self.session.mediaHandler.peerConnection.iceConnectionState === 'completed' && !__waitingForIce) {\n                    __waitingForIce = false;\n                    //if ICE is connected, then let the library to handle the ACK\n                    break;\n                }\n                else {\n                    //If ICE is not connected, then we should send ACK after it has been connected\n                    if (!__waitingForIce) {\n                        self.eventEmitter.once(EVENT_NAMES.ICECompleted, function() {\n                            //let the library handle the ACK after ICE connection is completed\n                            __waitingForIce = false;\n                            __receiveInviteReponse.apply(sessionSelf, args);\n                        });\n\n                        self.eventEmitter.once(EVENT_NAMES.ICEFailed, function() {\n                            //handle the ICE Failed situation\n                            __waitingForIce = false;\n                            self.session.acceptAndTerminate(response, null, 'ICE Connection Failed');\n                        });\n\n                        __waitingForIce = true;\n                    }\n                    return;\n                }\n                break;\n        }\n        return __receiveInviteReponse.apply(sessionSelf, args);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a provisional (100-199) response is received.\n    this.session.on('progress', function(e) {\n        self.onCall = true;\n\n        //Early media is supported by SIP.js library\n        //But in case it is sent without 100rel support we play it manually\n        //STATUS_EARLY_MEDIA === 11, it will be set by SIP.js if 100rel is supported\n        if (self.session.status !== SIP.Session.C.STATUS_EARLY_MEDIA && e.status_code === 183 && typeof(e.body) === 'string' && e.body.indexOf('\\n') !== -1) {\n            var session = self.session,\n                response = e;\n\n            if (session.hasOffer) {\n                if (!session.createDialog(response, 'UAC')) {\n                    return;\n                }\n                session.hasAnswer = true;\n                session.mediaHandler.setDescription(\n                    response.body,\n                    function() {\n                        session.dialog.pracked.push(response.getHeader('rseq'));\n                        session.status = SIP.Session.C.STATUS_EARLY_MEDIA;\n                        session.mute();\n                        self.__hasEarlyMedia = true;\n                        self.eventEmitter.emit(EVENT_NAMES.callProgress, self, e);\n                    },\n                    function(e) {\n                        session.logger.warn(e);\n                        session.acceptAndTerminate(response, 488, 'Not Acceptable Here');\n                        session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);\n                    }\n                );\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired each time a successful final (200-299) response is received.\n    this.session.on('accepted', function(e) {\n        if (self.accepted === true) return;\n        self.onCall = true;\n        self.accepted = true;\n        self.timeCallStarted = new Date();\n        self.eventEmitter.emit(EVENT_NAMES.callStarted, self, e);\n    });\n\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function onEnd() {\n        self.onCall = false;\n        self.timeCallStarted = null;\n        self.accepted = true;\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n    //Fired each time an unsuccessful final (300-699) response is\n    //this will emit failed event\n    this.session.on('rejected', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callRejected, self, e);\n        //terminated is not called by SIP.js when the call is rejected\n        //self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the session was canceled by the client\n    this.session.on('cancel', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when a BYE is sent\n    this.session.on('bye', function(e) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callEnded, self, e);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Fired when the request fails, whether due to an unsuccessful final response or due to timeout, transport, or other error\n    this.session.on('failed', function(response, cause) {\n        this.terminated(null, cause);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, response, cause);\n        //SIP.js 0.6.x does not call terminated event sometimes, so we call it ourselves\n        if (cause === SIP.C.causes.REQUEST_TIMEOUT) {\n            //this === session\n            if (this.status !== SIP.Session.C.STATUS_CONFIRMED) {\n                this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);\n            }\n        }\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    this.session.on('terminated', function(response, cause) {\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callTerminated, self, response, cause);\n    });\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    function terminateCallOnDisconnected(reason) {\n        self.session.terminated(null, reason || SIP.C.causes.CONNECTION_ERROR);\n        onEnd();\n        self.eventEmitter.emit(EVENT_NAMES.callFailed, self, null, 'Connection error');\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n//FIXME: Explore if it can be replaced with ref: http://sipjs.com/api/0.7.0/mediaHandler/\n\n    //Monkey patching oniceconnectionstatechange because SIP.js 0.6.x does not have this event\n    var onStateChange = this.session.mediaHandler.peerConnection.oniceconnectionstatechange || function(){},\n        __doubleCompleted = false;\n    this.session.mediaHandler.peerConnection.oniceconnectionstatechange = function() {\n        //this === peerConnection\n        var state = this.iceConnectionState;\n        onStateChange.apply(this, arguments);\n\n        switch (state) {\n            case 'connected':\n                self.eventEmitter.emit(EVENT_NAMES.ICEConnected, self);\n                break;\n            case 'completed':\n                //this may be called twice, see: https://code.google.com/p/chromium/issues/detail?id=371804\n                if (!__doubleCompleted) {\n                    self.eventEmitter.emit(EVENT_NAMES.ICECompleted, self);\n                    __doubleCompleted = true;\n                }\n                break;\n            case 'disconnected':\n                terminateCallOnDisconnected();\n                self.eventEmitter.emit(EVENT_NAMES.ICEDisconnected, self);\n                break;\n            case 'failed':\n                self.eventEmitter.emit(EVENT_NAMES.ICEFailed, self);\n                break;\n        }\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    var __ignoreReinviteDuplicates = false;\n\n    //Monkey patching sendReinvite for better Hold handling\n    var __sendReinvite = this.session.sendReinvite;\n    this.session.sendReinvite = function() {\n        __ignoreReinviteDuplicates = false;\n        var res = __sendReinvite.apply(this, arguments);\n        var __reinviteSucceeded = this.reinviteSucceeded,\n            __reinviteFailed = this.reinviteFailed;\n        this.reinviteSucceeded = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteSucceeded, self);\n            return __reinviteSucceeded.apply(this, []);\n        };\n        this.reinviteFailed = function() {\n            self.eventEmitter.emit(EVENT_NAMES.callReinviteFailed, self);\n            return __reinviteFailed.apply(this, []);\n        };\n        return res;\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //Monkey patching receiveReinviteResponse to ignore duplicates which may break Hold/Unhold\n    var __receiveReinviteResponse = this.session.receiveReinviteResponse;\n    this.session.receiveReinviteResponse = function(response) {\n        switch (true) {\n            case /^2[0-9]{2}$/.test(response.status_code):\n                if (__ignoreReinviteDuplicates) {\n                    this.sendRequest(SIP.C.ACK, {cseq: response.cseq});\n                    return;\n                }\n                __ignoreReinviteDuplicates = true;\n                break;\n        }\n        return __receiveReinviteResponse.apply(this, arguments);\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------*/\n\n    //defining if the session is incoming or outgoing\n    if (this.type === PhoneLine.types.incoming) {\n        this.contact.name = this.session.request.from.uri.displayName;\n        this.contact.number = this.session.request.from.uri.user;\n\n    } else {\n        if (this.type === PhoneLine.types.outgoing) {\n            this.contact.name = this.session.request.to.uri.displayName;\n            this.contact.number = this.session.request.to.uri.user;\n        }\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.types = {\n    incoming: 'incoming',\n    outgoing: 'outgoing'\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getId = function() {\n    return this.session.data.id;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getSession = function() {\n    return this.session;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.cancel = function() {\n    var session = this.getSession();\n    return new Promise(function(resolve, reject) {\n        session.terminate({statusCode: 486});\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.record = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            var message = !!val\n                ? self.controlSender.messages.startRecord\n                : self.controlSender.messages.stopRecord;\n\n            if ((self.onRecord && !val) || (!self.onRecord && val)) {\n                return self.controlSender.send(message)\n                    .then(function(data) {\n                        self.onRecord = !!val;\n                        return data;\n                    });\n            }\n        }\n        else {\n         throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.flip = function(target) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        if (!target) return;\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.flip, {\n                target: target\n            });\n        }\n        else {\n           throw new Error('No line or no active line');\n        }\n    });\n};\n\nPhoneLine.prototype.park = function() {\n\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if (self.onCall) {\n            return self.controlSender.send(self.controlSender.messages.park);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n// Explore ref: http://sipjs.com/api/0.6.0/session/#dtmftone-options\n\n//PhoneLine.prototype.sendDTMF = function(value, duration) {\n//    duration = parseInt(duration) || 1000;\n//    var peer = this.session.mediaHandler.peerConnection;\n//    var stream = this.session.getLocalStreams()[0];\n//    var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n//    if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n//        dtmfSender.insertDTMF(value, duration);\n//    }\n//    return Promise.resolve(null);\n//};\n\nPhoneLine.prototype.sendDTMF = function(value, duration) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        if(self.onCall) {\n            duration = parseInt(duration) || 1000;\n            var peer = self.session.mediaHandler.peerConnection;\n            var stream = self.session.getLocalStreams()[0];\n            var dtmfSender = peer.createDTMFSender(stream.getAudioTracks()[0]);\n            if (dtmfSender !== undefined && dtmfSender.canInsertDTMF) {\n                dtmfSender.insertDTMF(value, duration);\n            }\n            return null;\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n\n\nPhoneLine.prototype.sendInfoDTMF = function(value, duration) {\n\n    var session = this.session;\n    return new Promise(function(resolve, reject) {\n        duration = parseInt(duration) || 1000;\n        session.dtmf(value.toString(), {\n            duration: duration\n        });\n        return null;\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.blindTransfer = function(target, options) {\n\n    var session = this.session;\n    var self = this;\n    var extraHeaders = [];\n    var originalTarget = target;\n    options = options || {};\n\n    return new Promise(function(resolve, reject){\n        //Blind Transfer is taken from SIP.js source\n\n        // Check Session Status\n        if (session.status !== SIP.Session.C.STATUS_CONFIRMED) {\n            throw new SIP.Exceptions.InvalidStateError(session.status);\n        }\n\n        // normalizeTarget allows instances of SIP.URI to pass through unaltered,\n        // so try to make one ahead of time\n        try {\n            target = SIP.Grammar.parse(target, 'Refer_To').uri || target;\n        } catch (e) {\n            session.logger.debug(\".refer() cannot parse Refer_To from\", target);\n            session.logger.debug(\"...falling through to normalizeTarget()\");\n        }\n\n        // Check target validity\n        target = session.ua.normalizeTarget(target);\n        if (!target) {\n            throw new TypeError('Invalid target: ' + originalTarget);\n        }\n\n        extraHeaders.push('Contact: ' + session.contact);\n        extraHeaders.push('Allow: ' + SIP.Utils.getAllowedMethods(session.ua));\n        extraHeaders.push('Refer-To: ' + target);\n\n        // Send the request\n        session.sendRequest(SIP.C.REFER, {\n            extraHeaders: extraHeaders,\n            body: options.body,\n            receiveResponse: function(response) {\n                var timeout = null;\n                if (response.status_code === 202) {\n                    var callId = response.call_id;\n\n                    function onNotify(request) {\n                        if (request.call_id === callId) {\n                            var body = request && request.body || '';\n                            switch (true) {\n                                case /1[0-9]{2}/.test(body):\n                                    request.reply(200);\n                                    break;\n                                case /2[0-9]{2}/.test(body):\n                                    self.session.terminate();\n                                    clearTimeout(timeout);\n                                    self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                                    resolve();\n                                    break;\n                                default:\n                                    reject(body);\n                                    break;\n                            }\n                        }\n                    }\n\n                    timeout = setTimeout(function() {\n                        reject(new Error('Timeout: no reply'));\n                        self.eventEmitter.off('SIP_NOTIFY', onNotify);\n                    }, self.responseTimeout);\n                    self.eventEmitter.on('SIP_NOTIFY', onNotify);\n                }\n                else {\n                    reject(new Error('The response status code is: ' + response.status_code + ' (waiting for 202)'));\n                }\n            }\n        });\n\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.transfer = function(target, options) {\n    var self = this;\n    return (self.onHold ? Promise.resolve(null) : self.setHold(true)).then(function(){ return delay(300); }).then(function() {\n        return self.blindTransfer(target, options);\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.forward = function(target, options) {\n    var self = this, interval = null;\n    return self.answer().then(function() {\n        return new Promise(function(resolve, reject){\n            interval = setInterval(function() {\n                if (self.session.status === 12) {\n                    clearInterval(interval);\n                    self.setMute(true);\n                    setTimeout(function() {\n                        self.transfer(target, options);\n                        resolve();\n                    }, 700);\n                }\n            }, 50);\n        });\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n//ref: http://sipjs.com/api/0.6.0/session/#acceptoptions\n//make var option = {}\n\nPhoneLine.prototype.answer = function() {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n\n        function onAnswered() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        function onFail(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callStarted, onAnswered);\n            self.eventEmitter.off(EVENT_NAMES.callFailed, onFail);\n        }\n\n        self.eventEmitter.on(EVENT_NAMES.callStarted, onAnswered);\n        self.eventEmitter.on(EVENT_NAMES.callFailed, onFail);\n\n        console.warn('emitting callProgress');\n        self.eventEmitter.emit(EVENT_NAMES.callProgress, self);\n\n        self.session.accept({\n            media: {\n                constraints: {audio: true, video: false},\n                render: {\n                    local: {\n                        audio: self.userAgent.dom.localAudio\n                    },\n                    remote: {\n                        audio: self.userAgent.dom.remoteAudio\n                    }\n                }\n            }\n        });\n\n    });\n\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMute = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.muted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nfunction setStreamMute(stream, val) {\n    var tracks = stream.getAudioTracks();\n    for (var i = 0; i < tracks.length; i++) {\n        tracks[i].enabled = !val;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n////FIXME: Use SIPJS mute() and unmute() ref: http://sipjs.com/api/0.7.0/session/#muteoptions\n\nPhoneLine.prototype.setMuteBoth = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject) {\n        self.bothMuted = !!val;\n        self.muted = !!val;\n        if (self.onCall) {\n            setStreamMute(self.session.getLocalStreams()[0], self.bothMuted);\n            setStreamMute(self.session.getRemoteStreams()[0], self.bothMuted);\n            val ? self.eventEmitter.emit(EVENT_NAMES.callMute, self) : self.eventEmitter.emit(EVENT_NAMES.callUnmute, self);\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: Explore send() ref: http://sipjs.com/api/0.7.0/transport/#sendmsg\n\n/* This is a direct and very tightly coupled code. Please, try to avoid using this method if possible */\nPhoneLine.prototype.sendRequest = function(method, body, options) {\n    var self = this;\n    options = options || {};\n\n    if (!this.session.dialog) return;\n\n    var request = new SIP.OutgoingRequest(\n        method,\n        self.session.dialog.remote_target,\n        self.session.ua,\n        {\n            cseq: options.cseq || (self.session.dialog.local_seqnum += 1),\n            call_id: self.session.dialog.id.call_id,\n            from_uri: self.session.dialog.local_uri,\n            from_tag: self.session.dialog.id.local_tag,\n            to_uri: self.session.dialog.remote_uri,\n            to_tag: self.session.dialog.id.remote_tag,\n            route_set: self.session.dialog.route_set,\n            statusCode: options.statusCode,\n            reasonPhrase: options.reasonPhrase\n        },\n        options.extraHeaders || [],\n        body || undefined\n    );\n\n    new SIP.RequestSender({\n        request: request,\n        onRequestTimeout: function() {\n            self.session.onRequestTimeout();\n        },\n        onTransportError: function() {\n            self.session.onTransportError();\n        },\n        receiveResponse: options.receiveResponse || function(response) {\n        }\n    }, self.session.ua).send();\n};\n\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n//FIXME: should be replaced with __hold()\n//This can be removed\n//Legacy hold uses direct in-dialog messages to trick SIP.js, try to avoid using this method if possible\nPhoneLine.prototype.__legacyHold = function(val) {\n    var self = this;\n    self.onHold = !!val;\n    return new Promise(function(resolve, reject){\n        if (self.onCall && self.session.dialog) {\n            var body = self.session.mediaHandler.peerConnection.localDescription.sdp;\n            if (self.onHold) {\n                //body = body.replace(/c=IN IP4 \\d+\\.\\d+.\\d+.\\d+/, \"c=IN IP4 0.0.0.0\");\n                body = body.replace(/a=sendrecv/, \"a=sendonly\");\n                self.session.mediaHandler.hold();\n                self.session.onhold('local');\n            }\n            else {\n                self.session.mediaHandler.unhold();\n                self.session.onunhold('local');\n            }\n\n            self.sendRequest(SIP.C.INVITE, body, {\n                extraHeaders: [\n                    \"Content-Type: application/sdp\",\n                    \"Contact: \" + self.session.contact\n                ],\n                receiveResponse: function(response) {\n                    switch (true) {\n                        case /^1[0-9]{2}$/.test(response.status_code):\n                            break;\n                        case /^2[0-9]{2}$/.test(response.status_code):\n                            resolve();\n                            self.sendRequest(SIP.C.ACK, null, {\n                                cseq: response.cseq\n                            });\n                            break;\n                        default:\n                            reject('Status code is: ' + response.status_code);\n                            self.onHold = !self.onHold;\n                            break;\n                    }\n                }\n            });\n        }\n        else {\n            throw new Error('No line or no active line');\n        }\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\n\nPhoneLine.prototype.__hold = function(val) {\n    var self = this;\n    return new Promise(function(resolve, reject){\n        function onSucceeded() {\n            resolve();\n            self.eventEmitter.off(EVENT_NAMES.callReinviteFailed, onFailed);\n        }\n\n        function onFailed(e) {\n            reject(e);\n            self.eventEmitter.off(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        }\n\n        self.eventEmitter.once(EVENT_NAMES.callReinviteSucceeded, onSucceeded);\n        self.eventEmitter.once(EVENT_NAMES.callReinviteFailed, onFailed);\n\n        val ? self.session.hold() : self.session.unhold();\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.setHold = function(val) {\n    var self = this;\n\n    return new Promise(function(resolve, reject){\n        self.onHold = !!val;\n        if (self.onCall) {\n            promise = self.__hold(val).then(function() {\n                val ? self.eventEmitter.emit(EVENT_NAMES.callHold, self) : self.eventEmitter.emit(EVENT_NAMES.callUnhold, self);\n            }, function(e) {\n                self.onHold = !self.onHold;\n            });\n        }\n        else\n            throw new Error('No line or no active line');\n    });\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnHold = function() {\n    return this.onHold;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnMute = function() {\n    return this.muted || this.bothMuted;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isOnRecord = function() {\n    return this.onRecord;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getContact = function() {\n    return this.contact;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.getCallDuration = function() {\n    if (this.timeCallStarted) {\n        return (new Date()).getTime() - this.timeCallStarted.getTime();\n    }\n    else {\n        return 0;\n    }\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isIncoming = function() {\n    return this.session.mediaHandler.peerConnection.signalingState !== \"closed\"\n        && !this.session.startTime;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.isClosed = function() {\n    return this.session.status === SIP.Session.C.STATUS_CANCELED || this.session.status === SIP.Session.C.STATUS_TERMINATED;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nPhoneLine.prototype.hasEarlyMedia = function() {\n    return this.__hasEarlyMedia;\n};\n\n/*--------------------------------------------------------------------------------------------------------------------*/\n\nmodule.exports = PhoneLine;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/phoneLine.js\n ** module id = 37\n ** module chunks = 0\n **/","module.exports = {\n\n    delay: function delay(ms) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    },\n\n    defer: function defer() {\n        var deferred = {};\n        deferred.promise = new Promise(function(resolve, reject) {\n            deferred.resolve = resolve;\n            deferred.reject = reject;\n        });\n        return deferred;\n    },\n\n    extend: function extend(dst, src) {\n        src = src || {};\n        dst = dst || {};\n        Object.keys(src).forEach(function(k) {\n            dst[k] = src[k];\n        });\n        return dst;\n    },\n\n    copy: function(src){\n        return this.extend({}, src);\n    },\n\n    uuid: function uuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils.js\n ** module id = 38\n ** module chunks = 0\n **/","module.exports = {\n    'message': 'message',\n    'sipConnecting': 'sipConnecting',\n    'sipConnected': 'sipConnected',\n    'sipDisconnected': 'sipDisconnected',\n    'sipRegistered': 'sipRegistered',\n    'sipUnRegistered': 'sipUnregistered',\n    'sipRegistrationFailed': 'sipRegistrationFailed',\n    'incomingCall': 'incomingCall',                     //when incoming call is received\n    'sipIncomingCall': 'sipIncomingCall',               //same as incomingCall\n    'outgoingCall': 'outgoingCall',                     //when the outbound call is initiated\n    'callConnecting': 'callConnecting',                 //when ICE gathering is started\n    'callProgress': 'callProgress',                     //when 1xx provisional message is received (outbound only) or call is accepted, but ACK is still not sent (inbound only)\n    'callStarted': 'callStarted',                       //when ACK is sent\n    'callRejected': 'callRejected',                     //when the call is rejected by its party\n    'callEnded': 'callEnded',                           //when the call had ended without errors (BYE)\n    'callTerminated': 'callTerminated',                 //when the media is terminated, UNSTABLE in SIP.js 0.6.x\n    'callFailed': 'callFailed',                         //when the call is failed because of many different reasons (connection issues, 4xx errors, etc.)\n    'callHold': 'callHold',                             //when the call is put on hold\n    'callUnhold': 'callUnhold',                         //when the call is unholded\n    'callMute': 'callMute',                             //when the call is muted\n    'callUnmute': 'callUnmute',                         //when the call is unmuted\n    'callReplaced': 'callReplaced',                     //when the call has been replaced by an incoming invite\n    'sipRTCSession': 'sipRTCSession',\n    'sipConnectionFailed': 'sipConnectionFailed',\n    'ICEConnected': 'ICEConnected',\n    'ICECompleted': 'ICECompleted',\n    'ICEFailed': 'ICEFailed',\n    'ICEChecking': 'ICEChecking',\n    'ICEClosed': 'ICEClosed',\n    'ICEDisconnected': 'ICEDisconnected',\n    'callReinviteSucceeded': 'callReinviteSucceeded',\n    'callReinviteFailed': 'callReinviteFailed'\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/eventNames.js\n ** module id = 39\n ** module chunks = 0\n **/","var uuid = require('./utils').uuid;\n\nfunction DomAudio(){\n\n    /*\n     * We create audio containers here\n     * Sorry for DOM manipulations inside a service, but it is for the good :)\n     */\n    var LOCAL_AUDIO = document.createElement('video'),\n        REMOTE_AUDIO = document.createElement('video'),\n        LOCAL_AUDIO_ID = 'local_' + uuid(),\n        REMOTE_AUDIO_ID = 'remote_' + uuid();\n\n    LOCAL_AUDIO.setAttribute('id', LOCAL_AUDIO_ID);\n    LOCAL_AUDIO.setAttribute('autoplay', 'true');\n    LOCAL_AUDIO.setAttribute('hidden', 'true');\n    LOCAL_AUDIO.setAttribute('muted', '');\n\n    REMOTE_AUDIO.setAttribute('id', REMOTE_AUDIO_ID);\n    REMOTE_AUDIO.setAttribute('autoplay', 'true');\n    REMOTE_AUDIO.setAttribute('hidden', 'true');\n\n    document.body.appendChild(LOCAL_AUDIO);\n    document.body.appendChild(REMOTE_AUDIO);\n\n    LOCAL_AUDIO.volume = 0;\n\n    this.localAudio = LOCAL_AUDIO;\n    this.remoteAudio = REMOTE_AUDIO;\n    this.localAudioId = LOCAL_AUDIO_ID;\n    this.remoteAudioId = REMOTE_AUDIO_ID;\n\n}\n\nmodule.exports = DomAudio;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/dom.js\n ** module id = 40\n ** module chunks = 0\n **/","'use strict';\n\nvar audio = require('./audio');\n\n/**\n * @param {WebPhone} rcSIPUA\n * @param options\n * @constructor\n */\nfunction AudioHelper(rcSIPUA, options) {\n\n    var self = this;\n\n    options = options || {};\n\n    this._rcSIPUA = rcSIPUA;\n    this._incoming = options.incoming || 'audio/incoming.ogg';\n    this._outgoing = options.outgoing || 'audio/outgoing.ogg';\n    this._audio = {};\n\n    rcSIPUA.on(rcSIPUA.events.incomingCall, function() {\n        self.playIncoming(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.outgoingCall, function() {\n        self.playOutgoing(true);\n    });\n\n    rcSIPUA.on(rcSIPUA.events.callProgress, function(session) {\n        if (session.hasEarlyMedia()) {\n            self.playOutgoing(false);\n        }\n    });\n\n    rcSIPUA.on([rcSIPUA.events.callStarted, rcSIPUA.events.callRejected, rcSIPUA.events.callEnded, rcSIPUA.events.callFailed], function() {\n        self.playIncoming(false);\n        self.playOutgoing(false);\n    });\n\n}\n\nAudioHelper.prototype._playSound = function(url, val, volume) {\n\n    if (!this._audio[url]) {\n        if (val) {\n            volume !== undefined && (audio.volume = volume);\n            this._audio[url] = audio.play(url, {loop: true});\n        }\n    } else {\n        if (val) {\n            this._audio[url].reset();\n        }\n        else {\n            this._audio[url].stop();\n        }\n    }\n\n};\n\nAudioHelper.prototype.playIncoming = function(val) {\n    this._playSound(this._incoming, val, 0.5);\n};\n\nAudioHelper.prototype.playOutgoing = function(val) {\n    this._playSound(this._outgoing, val, 1);\n};\n\nmodule.exports = AudioHelper;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/audioHelper.js\n ** module id = 41\n ** module chunks = 0\n **/","var error = console.error;\nvar EventEmitter = require('./emitter');\n\nmodule.exports = {\n\n    play: function(url, options) {\n\n        var emitter = new EventEmitter();\n\n        var audio = new Audio();\n\n        audio.volume = 1;\n\n        audio.addEventListener(\"timeupdate\", function(event) {\n            emitter.emit('progress', {\n                duration: audio.duration,\n                progress: audio.currentTime / audio.duration\n            });\n        });\n\n        audio.addEventListener(\"seeked\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"ended\", function(event) {\n            emitter.emit('ended');\n        });\n        audio.addEventListener(\"pause\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    paused: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"play\", function(event) {\n            emitter.emit('progress', {\n                    duration: audio.duration,\n                    resumed: true,\n                    progress: audio.currentTime / audio.duration\n            });\n        });\n        audio.addEventListener(\"error\", function() {\n            console.log(\"error\", audio.error); //FIXME\n            emitter.emit('error', audio.error);\n        });\n\n        emitter.stop = audio.pause.bind(audio);\n        emitter.pause = audio.pause.bind(audio);\n        emitter.resume = audio.play.bind(audio);\n        emitter.reset = function() {\n            audio.currentTime = 0;\n            audio.play();\n        };\n\n        emitter.duration = function() {\n            return Math.ceil(audio.duration);\n        };\n\n        audio.src = url;\n        audio.load(url);\n\n        if (options) { //FIXME angular.isObject\n            for (var prop in options) {\n                if (prop in audio) {\n                    audio[prop] = options[prop];\n                }\n            }\n        }\n\n        audio.play();\n\n        return emitter;\n\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/audio.js\n ** module id = 42\n ** module chunks = 0\n **/"],"sourceRoot":"/source/"}